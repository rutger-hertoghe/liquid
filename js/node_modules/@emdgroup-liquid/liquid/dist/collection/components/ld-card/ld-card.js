import { Component, h, Host, Prop } from '@stencil/core';
import { getClassNames } from '../../utils/getClassNames';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 */
export class LdCard {
  constructor() {
    /** Simulates card elevation by setting the size of the card box shadow. */
    this.shadow = 'stacked';
  }
  render() {
    const cl = getClassNames([
      'ld-card',
      this.size && `ld-card--${this.size}`,
      this.shadow && `ld-card--${this.shadow}`,
      this.shadowInteractive &&
        `ld-card--interactive-${this.shadowInteractive}`,
    ]);
    return (h(Host, { class: cl },
      h("slot", null)));
  }
  static get is() { return "ld-card"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-card.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-card.css"]
  }; }
  static get properties() { return {
    "shadow": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'active' | 'hover' | 'stacked' | 'sticky'",
        "resolved": "\"active\" | \"hover\" | \"stacked\" | \"sticky\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Simulates card elevation by setting the size of the card box shadow."
      },
      "attribute": "shadow",
      "reflect": false,
      "defaultValue": "'stacked'"
    },
    "shadowInteractive": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'active' | 'hover' | 'stacked' | 'sticky'",
        "resolved": "\"active\" | \"hover\" | \"stacked\" | \"sticky\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Adds hover and focus-within states using an elevation transition from\n`shadow` (see above) to `shadowInteractive`."
      },
      "attribute": "shadow-interactive",
      "reflect": false
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'sm'",
        "resolved": "\"sm\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The size prop effects the card padding only."
      },
      "attribute": "size",
      "reflect": false
    }
  }; }
}

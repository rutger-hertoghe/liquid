import { Component, Element, Event, h, Host, Listen, Prop, State, Watch, } from '@stencil/core';
import { closest } from '../../../utils/closest';
import { getClassNames } from '../../../utils/getClassNames';
import { toggleStackToTop } from '../utils/toggleStackToTop';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 */
export class LdSidenavAccordion {
  constructor() {
    this.transitionsEnabled = true;
    /**
     * Set to false to make the accordion collapse on sidenav collapse
     * or slide change.
     */
    this.preserveState = true;
    this.onTransitionEnd = (ev) => {
      // Emit transition end event to trigger scroll shadow update.
      if (ev.target === this.panelRef) {
        this.ldSidenavAccordionTransitionEnd.emit();
      }
    };
  }
  handleSidenavBreakpointChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    this.sidenavClosable = ev.detail;
    if (this.sidenavClosable) {
      toggleStackToTop(this.el, false);
    }
    else {
      toggleStackToTop(this.el, this.sidenav.narrow && this.sidenavCollapsed);
    }
  }
  handleSidenavSliderChange(ev) {
    // Collapse accordion on sidenav slide change.
    if (ev.target.closest('ld-sidenav') !==
      this.sidenav) {
      return;
    }
    if (!this.preserveState) {
      this.sectionRef.expanded = false;
      this.expanded = false;
    }
    this.transitionsEnabled = false;
    setTimeout(() => {
      this.transitionsEnabled = true;
    }, 200);
  }
  handleSidenavCollapsedChange(ev) {
    // Collapse or expand accordion on sidenav collapse or expansion.
    if (ev.target !== this.sidenav)
      return;
    this.sidenavCollapsed = ev.detail.collapsed;
    toggleStackToTop(this.el, this.sidenav.narrow && this.sidenavCollapsed);
    if (this.sidenavCollapsed) {
      if (this.preserveState) {
        this.expandOnSidenavExpansion = this.sectionRef.expanded;
      }
      this.sectionRef.expanded = false;
      this.expanded = false;
    }
    else {
      if (this.expandOnSidenavExpansion) {
        this.sectionRef.expanded = true;
        this.expanded = true;
      }
    }
  }
  handleExpandedChange(expanded) {
    this.sectionRef.expanded = expanded;
  }
  componentWillLoad() {
    this.inAccordion = this.el.parentElement.tagName === 'LD-SIDENAV-ACCORDION';
    this.rounded = !!this.el.querySelector('ld-sidenav-navitem[slot="toggle"][rounded]');
    this.noIcon = !!this.el.querySelector('ld-sidenav-navitem[slot="toggle"][mode="secondary"],ld-sidenav-navitem[slot="toggle"][mode="tertiary"]');
    this.sidenav = closest('ld-sidenav', this.el);
  }
  render() {
    const cl = getClassNames([
      'ld-sidenav-accordion',
      this.noIcon && 'ld-sidenav-accordion--no-icon',
      this.rounded && 'ld-sidenav-accordion--rounded',
      this.inAccordion && 'ld-sidenav-accordion--in-accordion',
      this.transitionsEnabled && 'ld-sidenav-accordion--transitions-enabled',
      this.sidenavCollapsed &&
        !this.sidenavClosable &&
        'ld-sidenav-accordion--collapsed',
      this.split && 'ld-sidenav-accordion--split',
    ]);
    return (h(Host, { class: cl },
      h("ld-accordion", { class: "ld-sidenav-accordion__accordion" },
        h("ld-accordion-section", { expanded: this.expanded, ref: (el) => (this.sectionRef = el), class: "ld-sidenav-accordion__accordion-section" },
          h("ld-accordion-toggle", { labelTag: "div", class: "ld-sidenav-accordion__accordion-toggle", split: this.split, "ld-tabindex": "-1" },
            h("slot", { name: "toggle" })),
          h("ld-accordion-panel", { ref: (el) => (this.panelRef = el), onTransitionEnd: this.onTransitionEnd, class: "ld-sidenav-accordion__accordion-panel" },
            h("slot", null))))));
  }
  static get is() { return "ld-sidenav-accordion"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-sidenav-accordion.shadow.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-sidenav-accordion.shadow.css"]
  }; }
  static get properties() { return {
    "expanded": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Indicates that the accordion section is expanded."
      },
      "attribute": "expanded",
      "reflect": false
    },
    "preserveState": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set to false to make the accordion collapse on sidenav collapse\nor slide change."
      },
      "attribute": "preserve-state",
      "reflect": false,
      "defaultValue": "true"
    },
    "split": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Split the accordion toggle in two parts with the second part containing\nthe caret icon and being responsible for expanding / collapsing\nthe accordion panel."
      },
      "attribute": "split",
      "reflect": false
    }
  }; }
  static get states() { return {
    "expandOnSidenavExpansion": {},
    "inAccordion": {},
    "noIcon": {},
    "rounded": {},
    "sidenavClosable": {},
    "sidenavCollapsed": {},
    "transitionsEnabled": {}
  }; }
  static get events() { return [{
      "method": "ldSidenavAccordionTransitionEnd",
      "name": "ldSidenavAccordionTransitionEnd",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted on accordion expand or collaps transition end."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "expanded",
      "methodName": "handleExpandedChange"
    }]; }
  static get listeners() { return [{
      "name": "ldSidenavBreakpointChange",
      "method": "handleSidenavBreakpointChange",
      "target": "window",
      "capture": false,
      "passive": true
    }, {
      "name": "ldSidenavSliderChange",
      "method": "handleSidenavSliderChange",
      "target": "window",
      "capture": false,
      "passive": true
    }, {
      "name": "ldSidenavCollapsedChange",
      "method": "handleSidenavCollapsedChange",
      "target": "window",
      "capture": false,
      "passive": true
    }]; }
}

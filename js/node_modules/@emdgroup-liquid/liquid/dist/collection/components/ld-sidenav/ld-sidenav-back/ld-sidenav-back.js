import { Component, Element, Event, h, Listen, Method, Prop, State, } from '@stencil/core';
import { getClassNames } from '../../../utils/getClassNames';
import { closest } from '../../../utils/closest';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 */
export class LdSidenavBack {
  constructor() {
    /** Used as aria-label for the back button */
    this.backLabel = 'Back';
    this.parentLabel = '';
    this.rounded = false;
    this.onClick = () => {
      this.ldSidenavBack.emit();
    };
    this.onKeyDown = (ev) => {
      if ([' ', 'Enter'].includes(ev.key)) {
        ev.preventDefault();
        this.ldSidenavBack.emit();
      }
    };
  }
  handleSidenavCollapsedChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    this.sidenavCollapsed = ev.detail.collapsed;
  }
  handleSidenavBreakpointChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    this.sidenavClosable = ev.detail;
  }
  /**
   * @internal
   * Updates the label of the back button.
   */
  async updateLabel(text) {
    this.parentLabel = text || '';
  }
  componentWillLoad() {
    this.sidenav = closest('ld-sidenav', this.el);
    this.rounded = !!this.el.querySelector('ld-sidenav-navitem[rounded]');
  }
  render() {
    const cl = getClassNames([
      'ld-sidenav-back',
      this.parentLabel && 'ld-sidenav-back--is-back',
      this.rounded && 'ld-sidenav-back--rounded',
      this.sidenavCollapsed &&
        !this.sidenavClosable &&
        'ld-sidenav-back--collapsed',
    ]);
    return (h("div", { tabIndex: this.parentLabel ? 0 : undefined, role: this.parentLabel ? 'button' : undefined, "aria-label": this.backLabel, class: cl, onClick: this.onClick, onKeyDown: this.onKeyDown, part: "back focusable" },
      h("div", { class: "ld-sidenav-back__btn-back", part: "btn-back" },
        h("div", { class: "ld-sidenav-back__bg", part: "bg" },
          h("div", { class: "ld-sidenav-back__bg-left" }),
          h("div", { class: "ld-sidenav-back__bg-center" }),
          h("div", { class: "ld-sidenav-back__bg-right" })),
        h("div", { class: "ld-sidenav-back__icon", part: "icon-container" },
          h("svg", { part: "icon", width: "12", height: "12", fill: "none" },
            h("path", { d: "M4.333 1.832 1 5.999l3.333 4.166M1 6h10", stroke: "#F8F8FC", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round" }))),
        h("span", { class: "ld-sidenav-back__btn-back-label", part: "label" }, this.parentLabel)),
      h("div", { class: "ld-sidenav-back__slot-container", part: "slot-container" },
        h("slot", null))));
  }
  static get is() { return "ld-sidenav-back"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-sidenav-back.shadow.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-sidenav-back.shadow.css"]
  }; }
  static get properties() { return {
    "backLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Used as aria-label for the back button"
      },
      "attribute": "back-label",
      "reflect": false,
      "defaultValue": "'Back'"
    }
  }; }
  static get states() { return {
    "parentLabel": {},
    "rounded": {},
    "sidenavCollapsed": {},
    "sidenavClosable": {}
  }; }
  static get events() { return [{
      "method": "ldSidenavBack",
      "name": "ldSidenavBack",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted on click."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "updateLabel": {
      "complexType": {
        "signature": "(text?: string) => Promise<void>",
        "parameters": [{
            "tags": [],
            "text": ""
          }],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "",
        "tags": [{
            "name": "internal",
            "text": "Updates the label of the back button."
          }]
      }
    }
  }; }
  static get elementRef() { return "el"; }
  static get listeners() { return [{
      "name": "ldSidenavCollapsedChange",
      "method": "handleSidenavCollapsedChange",
      "target": "window",
      "capture": false,
      "passive": true
    }, {
      "name": "ldSidenavBreakpointChange",
      "method": "handleSidenavBreakpointChange",
      "target": "window",
      "capture": false,
      "passive": true
    }]; }
}

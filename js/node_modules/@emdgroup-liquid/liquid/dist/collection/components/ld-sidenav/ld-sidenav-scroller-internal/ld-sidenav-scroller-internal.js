import { Component, Element, h, Host, Listen, Method, State, } from '@stencil/core';
import { getClassNames } from '../../../utils/getClassNames';
import { closest } from '../../../utils/closest';
/** @internal **/
export class LdSidenavScrollerInternal {
  constructor() {
    this.hasShadowBottom = false;
    this.hasShadowTop = false;
  }
  handleSidenavCollapsedChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    this.sidenavCollapsed = ev.detail.collapsed;
  }
  handleSidenavBreakpointChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    this.sidenavClosable = ev.detail;
  }
  /**
   * Makes shadows either appear or disappear on top and bottom of the
   * scroll container, depending on the current scroll position.
   */
  async updateShadows() {
    const scrollContainer = this.el;
    if (!scrollContainer)
      return;
    this.hasShadowBottom =
      scrollContainer.scrollTop <
        scrollContainer.scrollHeight - scrollContainer.clientHeight - 10;
    this.hasShadowTop = scrollContainer.scrollTop > 10;
  }
  /** Scrolls the scroll container to the top instantly. */
  async scrollToTop(smoothly = false) {
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    try {
      this.el.scrollTo({
        top: 0,
        behavior: smoothly && !prefersReducedMotion ? 'smooth' : 'auto',
      });
    }
    catch (err) {
      // js-dom seems to not know scrollTo - ignoring for now
    }
  }
  componentWillLoad() {
    this.sidenav = closest('ld-sidenav', this.el);
    if (!this.sidenav)
      return;
    this.needsHRTop = !!this.sidenav.querySelector('[slot="top"]');
    this.needsHRBottom = !!this.sidenav.querySelector('[slot="bottom"]');
    this.relative = !this.sidenav.querySelector('ld-sidenav-slider');
  }
  componentDidLoad() {
    setTimeout(() => {
      this.updateShadows();
    });
  }
  render() {
    const cl = getClassNames([
      'ld-sidenav-scroller-internal',
      this.relative && 'ld-sidenav-scroller-internal--relative',
      this.sidenavCollapsed &&
        !this.sidenavClosable &&
        'ld-sidenav-scroller-internal--collapsed',
    ]);
    return (h(Host, { class: cl, onScroll: this.updateShadows.bind(this), onLdSidenavAccordionTransitionEnd: this.updateShadows.bind(this), "data-needs-bottom": this.needsHRBottom, "data-needs-top": this.needsHRTop },
      h("div", { class: "ld-sidenav-scroller-internal__shadow-top", style: { opacity: this.hasShadowTop ? '1' : '0' }, part: "shadow-top" }),
      h("div", { class: "ld-sidenav-scroller-internal__shadow-bottom", style: { opacity: this.hasShadowBottom ? '1' : '0' }, part: "shadow-bottom" }),
      this.needsHRTop && (h("ld-sidenav-separator", { class: "ld-sidenav-scroller-internal__hr-top", style: { opacity: this.hasShadowTop ? '0' : '1' } })),
      this.needsHRBottom && (h("ld-sidenav-separator", { class: "ld-sidenav-scroller-internal__hr-bottom", style: { opacity: this.hasShadowBottom ? '0' : '1' } })),
      h("slot", null)));
  }
  static get is() { return "ld-sidenav-scroller-internal"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-sidenav-scroller-internal.shadow.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-sidenav-scroller-internal.shadow.css"]
  }; }
  static get states() { return {
    "hasShadowBottom": {},
    "hasShadowTop": {},
    "needsHRBottom": {},
    "needsHRTop": {},
    "relative": {},
    "sidenavClosable": {},
    "sidenavCollapsed": {}
  }; }
  static get methods() { return {
    "updateShadows": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Makes shadows either appear or disappear on top and bottom of the\nscroll container, depending on the current scroll position.",
        "tags": []
      }
    },
    "scrollToTop": {
      "complexType": {
        "signature": "(smoothly?: boolean) => Promise<void>",
        "parameters": [{
            "tags": [],
            "text": ""
          }],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Scrolls the scroll container to the top instantly.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "el"; }
  static get listeners() { return [{
      "name": "ldSidenavCollapsedChange",
      "method": "handleSidenavCollapsedChange",
      "target": "window",
      "capture": false,
      "passive": true
    }, {
      "name": "ldSidenavBreakpointChange",
      "method": "handleSidenavBreakpointChange",
      "target": "window",
      "capture": false,
      "passive": true
    }]; }
}

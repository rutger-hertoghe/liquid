import { Component, Element, h, Host, Listen, Method, Prop, State, } from '@stencil/core';
import { getClassNames } from '../../../utils/getClassNames';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 */
export class LdSidenavToggleOutside {
  constructor() {
    /** Label to be used for the toggle button when navigation is collapsed. */
    this.labelExpand = 'Expand side navigation';
    this.sidenavAlignement = 'left';
    this.toggleSidenavCollapsedState = () => {
      this.sidenav.toggle();
    };
  }
  /** Sets focus on the radio button. */
  async focusInner() {
    this.toggle.focus();
  }
  handleSidenavCollapsedChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    this.sidenavCollapsed = ev.detail.collapsed;
    this.sidenavCollapsedFully = ev.detail.collapsed && ev.detail.fully;
    this.tooltipRef.hideTooltip();
  }
  handleSidenavBreakpointChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    this.sidenavClosable = ev.detail;
    this.tooltipRef.hideTooltip();
  }
  componentWillLoad() {
    this.sidenav = this.el.nextElementSibling;
    if (!this.sidenav || this.sidenav.tagName !== 'LD-SIDENAV') {
      throw new Error(`The ld-sidenav-toggle-outside component is expecting to have an ld-sidenav component as its next element sibling, but instead there was: ${this.sidenav}`);
    }
    this.sidenavAlignement = this.sidenav.align;
  }
  render() {
    const cl = getClassNames([
      'ld-sidenav-toggle-outside',
      `ld-sidenav-toggle-outside--${this.sidenavAlignement}`,
      this.sidenavClosable && 'ld-sidenav-toggle-outside--closable',
      this.sidenavCollapsedFully &&
        'ld-sidenav-toggle-outside--collapsed-fully',
    ]);
    return (h(Host, { class: cl },
      h("ld-tooltip", { arrow: true, size: "sm", ref: (el) => (this.tooltipRef = el), "show-delay": "1000", position: this.sidenavAlignement === 'left' ? 'right middle' : 'left middle', tag: "span" },
        h("button", { slot: "trigger", role: "switch", "brand-color": true, "aria-checked": this.sidenavCollapsed ? 'false' : 'true', class: "ld-sidenav-toggle-outside__toggle", onClick: this.toggleSidenavCollapsedState, part: "toggle focusable", ref: (ref) => (this.toggle = ref), tabIndex: this.ldTabindex },
          h("ld-icon", { class: "ld-sidenav-toggle-outside__icon", name: "sidenav-right", part: "toggle-icon" }),
          h("ld-sr-only", null, this.labelExpand)),
        h("ld-typo", null, this.labelExpand))));
  }
  static get is() { return "ld-sidenav-toggle-outside"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-sidenav-toggle-outside.shadow.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-sidenav-toggle-outside.shadow.css"]
  }; }
  static get properties() { return {
    "labelExpand": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Label to be used for the toggle button when navigation is collapsed."
      },
      "attribute": "label-expand",
      "reflect": false,
      "defaultValue": "'Expand side navigation'"
    },
    "ldTabindex": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number | undefined",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Tab index of the toggle."
      },
      "attribute": "ld-tabindex",
      "reflect": false
    }
  }; }
  static get states() { return {
    "sidenavClosable": {},
    "sidenavCollapsed": {},
    "sidenavCollapsedFully": {},
    "sidenavCollapsible": {},
    "sidenavAlignement": {}
  }; }
  static get methods() { return {
    "focusInner": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets focus on the radio button.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "el"; }
  static get listeners() { return [{
      "name": "ldSidenavCollapsedChange",
      "method": "handleSidenavCollapsedChange",
      "target": "window",
      "capture": false,
      "passive": true
    }, {
      "name": "ldSidenavBreakpointChange",
      "method": "handleSidenavBreakpointChange",
      "target": "window",
      "capture": false,
      "passive": true
    }]; }
}

import { Component, Element, h, Host, Listen, Method, Prop, State, Watch, } from '@stencil/core';
import { getClassNames } from '../../../utils/getClassNames';
import { closest } from '../../../utils/closest';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 */
export class LdSidenavSubnav {
  constructor() {
    /**
     * @internal
     * Internal prop indicating that the subnav is about to become active which
     * may happen before a transition finishes after which it actually becomes active.
     */
    this.activeBeforeTransition = false;
    /**
     * @internal
     * Internal prop indicating that the subnav is either ancestor of the
     * currently visible subnav or the currently visible subnav itself.
     */
    this.active = false;
    /**
     * @internal
     * Internal prop indicating that the subnav is ancestor of the
     * currently visible subnav.
     */
    this.ancestor = false;
    this.toggleVisibilityOnHidableContent = (visible) => {
      Array.from(this.el.children).forEach((el) => {
        // To also hide one of the following elements,
        // it is possible to wrap it in a div with display contents.
        if (![
          'LD-SIDENAV-ACCORDION',
          'LD-SIDENAV-NAVITEM',
          'LD-SIDENAV-SEPARATOR',
          'LD-SIDENAV-SUBNAV',
        ].includes(el.tagName)) {
          el.classList.toggle('ld-sidenav-subnav__hidden', !visible);
        }
      });
    };
  }
  /** Scrolls the subnav scroll container to the top. */
  async scrollToTop(smoothly = false) {
    this.scrollerRef.scrollToTop(smoothly);
  }
  onActiveChange(active) {
    var _a;
    if (active) {
      (_a = this.scrollerRef) === null || _a === void 0 ? void 0 : _a.updateShadows();
    }
  }
  onActiveBeforeTransitionChange(activeBeforeTransition) {
    this.updateBackground(activeBeforeTransition);
  }
  updateBackground(activeBeforeTransition) {
    // HACK: Timeout is required to make the transition work on nav item click
    setTimeout(() => {
      this.bgRef.classList.toggle('ld-sidenav-subnav__background--active', activeBeforeTransition);
    }, 20);
  }
  handleSidenavCollapsedChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    if (ev.detail.collapsed) {
      this.scrollToTop(true);
      this.toggleVisibilityOnHidableContent(false);
    }
    else {
      this.toggleVisibilityOnHidableContent(true);
    }
  }
  handleSidenavBreakpointChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    const sidenavClosable = ev.detail;
    if (sidenavClosable) {
      this.toggleVisibilityOnHidableContent(true);
    }
    else {
      this.toggleVisibilityOnHidableContent(!this.sidenav.collapsed);
    }
  }
  componentWillLoad() {
    this.sidenav = closest('ld-sidenav', this.el);
    this.hasParentSubnav = this.el.parentElement.tagName === 'LD-SIDENAV-SUBNAV';
  }
  render() {
    const cl = getClassNames([
      'ld-sidenav-subnav',
      this.active && 'ld-sidenav-subnav--active',
      this.hasParentSubnav && 'ld-sidenav-subnav--has-parent-subnav',
    ]);
    return (h(Host, { class: cl },
      h("div", { ref: (el) => (this.bgRef = el), class: "ld-sidenav-subnav__background" }),
      h("ld-sidenav-scroller-internal", { style: {
          visibility: !this.active || this.ancestor ? 'hidden' : 'visible',
        }, part: "scroll-container", ref: (el) => (this.scrollerRef = el) },
        h("slot", null))));
  }
  static get is() { return "ld-sidenav-subnav"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-sidenav-subnav.shadow.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-sidenav-subnav.shadow.css"]
  }; }
  static get properties() { return {
    "activeBeforeTransition": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [{
            "name": "internal",
            "text": "Internal prop indicating that the subnav is about to become active which\nmay happen before a transition finishes after which it actually becomes active."
          }],
        "text": ""
      },
      "attribute": "active-before-transition",
      "reflect": false,
      "defaultValue": "false"
    },
    "active": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [{
            "name": "internal",
            "text": "Internal prop indicating that the subnav is either ancestor of the\ncurrently visible subnav or the currently visible subnav itself."
          }],
        "text": ""
      },
      "attribute": "active",
      "reflect": false,
      "defaultValue": "false"
    },
    "ancestor": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [{
            "name": "internal",
            "text": "Internal prop indicating that the subnav is ancestor of the\ncurrently visible subnav."
          }],
        "text": ""
      },
      "attribute": "ancestor",
      "reflect": false,
      "defaultValue": "false"
    },
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Used in the ld-sidenav-back component to display parent nav label."
      },
      "attribute": "label",
      "reflect": false
    }
  }; }
  static get states() { return {
    "hasParentSubnav": {}
  }; }
  static get methods() { return {
    "scrollToTop": {
      "complexType": {
        "signature": "(smoothly?: boolean) => Promise<void>",
        "parameters": [{
            "tags": [],
            "text": ""
          }],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Scrolls the subnav scroll container to the top.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "active",
      "methodName": "onActiveChange"
    }, {
      "propName": "activeBeforeTransition",
      "methodName": "onActiveBeforeTransitionChange"
    }]; }
  static get listeners() { return [{
      "name": "ldSidenavCollapsedChange",
      "method": "handleSidenavCollapsedChange",
      "target": "window",
      "capture": false,
      "passive": true
    }, {
      "name": "ldSidenavBreakpointChange",
      "method": "handleSidenavBreakpointChange",
      "target": "window",
      "capture": false,
      "passive": true
    }]; }
}

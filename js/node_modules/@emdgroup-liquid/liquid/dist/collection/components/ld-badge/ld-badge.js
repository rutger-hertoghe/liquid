import { Component, Element, h, Host, Prop, State } from '@stencil/core';
import { getClassNames } from 'src/liquid/utils/getClassNames';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 */
export class LdBadge {
  constructor() {
    this.hasCustomIcon = false;
    this.hasText = false;
    this.updateState = () => {
      this.hasCustomIcon = !!this.el.querySelector('[slot="icon"]');
      this.hasText = !!this.el.textContent.trim();
    };
  }
  componentWillLoad() {
    this.observer = new MutationObserver(this.updateState);
    this.observer.observe(this.el, {
      subtree: true,
      childList: true,
      attributes: false,
    });
    this.updateState();
  }
  disconnectedCallback() {
    if (this.observer)
      this.observer.disconnect();
  }
  render() {
    const cl = getClassNames([
      'ld-badge',
      this.size && `ld-badge--${this.size}`,
      this.hasText && 'ld-badge--with-text',
      this.brandColor && `ld-badge--brand-color`,
    ]);
    return (h(Host, { class: cl },
      (this.icon || this.hasCustomIcon) && (h("ld-icon", { class: "ld-badge__icon", part: "icon", name: this.icon },
        h("slot", { name: "icon" }))),
      h("slot", null)));
  }
  static get is() { return "ld-badge"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-badge.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-badge.css"]
  }; }
  static get assetsDirs() { return ["assets"]; }
  static get properties() { return {
    "brandColor": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Defines badge custom color"
      },
      "attribute": "brand-color",
      "reflect": false
    },
    "icon": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Icon name."
      },
      "attribute": "icon",
      "reflect": false
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'lg'",
        "resolved": "\"lg\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The size of the badge, translated in rem"
      },
      "attribute": "size",
      "reflect": false
    }
  }; }
  static get states() { return {
    "hasCustomIcon": {},
    "hasText": {}
  }; }
  static get elementRef() { return "el"; }
}

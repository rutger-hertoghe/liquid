import { Component, Host, h, Prop, Event, Watch, State, } from '@stencil/core';
import { getClassNames } from 'src/liquid/utils/getClassNames';
const BUFFER_SIZE = 20;
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part arrow - all arrow items (`ld-button` elements)
 * @part more-indicator - list-items containing more-indicator
 * @part end - arrow to jump to the last item (`ld-button` element)
 * @part item - all pagination items containing a number (`ld-button` elements)
 * @part items - list containing all slidable items and the marker
 * @part list-wrapper - list-item containing the `ul` element with slidable items
 * @part marker - marker highlighting the selected item
 * @part next - arrow to go to the next item (`ld-button` element)
 * @part prev - arrow to go to the previous item (`ld-button` element)
 * @part start - arrow to jump to the first item (`ld-button` element)
 * @part sticky - all sticky items (`ld-button` elements)
 * @part wrapper - list containing all pagination items
 */
export class LdPagination {
  constructor() {
    /** Hide the buttons to navigate forward/backward. */
    this.hidePrevNext = false;
    /** Hide the buttons to navigate to the first/last item. */
    this.hideStartEnd = false;
    /** Label to communicate the type of an item. */
    this.itemLabel = 'Page';
    /** The number of items/pages available for pagination (required to let the user jump to the last item/page). */
    this.length = Infinity;
    /** Items display mode, default as numbers. */
    this.mode = 'numbers';
    /** Number of next/previous items visible. */
    this.offset = 2;
    /** The currently selected item (an index of `-1` means nothing is selected). */
    this.selectedIndex = 0;
    /** Number of items permanently visible at the start/end. */
    this.sticky = 0;
    this.maxSliderColumns = 0;
    this.renderMoreIndicators = false;
    this.renderSticky = false;
    this.slidableItems = [];
    this.sliderContent = [];
    this.transitioning = false;
    this.visibleItemsInSlider = 0;
    this.handleTransitionEnd = () => {
      this.transitioning = false;
    };
    this.handleTransitionStart = () => {
      this.transitioning = true;
    };
    // pageNumber is 1-based
    this.renderItem = (itemNumber, showFrom, showTo) => {
      const isDots = this.mode === 'dots';
      const isHidden = (this.renderMoreIndicators || isDots) &&
        (itemNumber < showFrom || itemNumber > showTo);
      const isSelected = itemNumber === this.selectedIndex + 1;
      return (h("li", { "aria-hidden": isHidden ? 'true' : undefined, class: getClassNames([
          'ld-pagination__item',
          !isHidden && 'ld-pagination__item--visible',
          isSelected && 'ld-pagination__item--selected',
        ]), key: itemNumber, style: { '--ld-pagination-item-pos': `${itemNumber - 1}` } },
        h("ld-button", { "aria-current": isSelected ? 'true' : undefined, "aria-label": isHidden ? undefined : `${this.itemLabel} ${itemNumber}`, class: isDots ? 'ld-pagination__dot' : undefined, "ld-tabindex": isHidden ? -1 : undefined, mode: "ghost", onClick: () => {
            this.selectedIndex = itemNumber - 1;
          }, part: "item focusable", size: this.size }, !isDots && itemNumber)));
    };
    this.calculateSliderContent = () => {
      const directlyReachableFirstItems = this.maxSliderColumns + this.sticky - 1;
      const directlyReachableLastItems = this.length - this.maxSliderColumns - this.sticky + 1;
      this.sliderContent = this.slidableItems.filter((itemNumber) => (itemNumber > this.selectedIndex - BUFFER_SIZE &&
        itemNumber <= this.selectedIndex + BUFFER_SIZE) ||
        // render the first/last items in case the user can navigate there directly
        ((!this.hideStartEnd || this.sticky > 0) &&
          (itemNumber <= directlyReachableFirstItems ||
            itemNumber > directlyReachableLastItems)));
    };
  }
  handleSelectedIndex() {
    if (this.selectedIndex < -1) {
      this.selectedIndex = -1;
    }
    else if (this.selectedIndex >= this.length) {
      this.selectedIndex = this.length - 1;
    }
    else {
      this.ldchange.emit(this.selectedIndex);
    }
  }
  componentWillLoad() {
    this.visibleItemsInSlider = this.offset * 2 + 1;
    const maxVisibleItems = this.sticky * 2 + this.visibleItemsInSlider;
    this.maxSliderColumns = this.visibleItemsInSlider + 2;
    this.renderSticky = this.sticky > 0 && this.mode !== 'dots';
    this.renderMoreIndicators =
      this.mode !== 'dots' && this.length > maxVisibleItems + 2;
    this.slidableItems = Array.from({
      length: this.length === Infinity ? 9999 : this.length - this.sticky * 2,
    }).map((_, index) => index + this.sticky + 1);
    if (this.length < 1) {
      this.length = 1;
    }
    if (this.selectedIndex < -1) {
      this.selectedIndex = -1;
    }
    else if (this.selectedIndex >= this.length) {
      this.selectedIndex = this.length - 1;
    }
    this.calculateSliderContent();
  }
  componentDidLoad() {
    if (this.wrapperRef) {
      this.wrapperRef.addEventListener('transitionstart', this.handleTransitionStart);
      this.wrapperRef.addEventListener('transitionend', this.handleTransitionEnd);
    }
  }
  disconnectedCallback() {
    if (this.wrapperRef) {
      this.wrapperRef.removeEventListener('transitionstart', this.handleTransitionStart);
      this.wrapperRef.removeEventListener('transitionend', this.handleTransitionEnd);
    }
  }
  render() {
    const isDots = this.mode === 'dots';
    const styleDots = isDots && this.space
      ? {
        '--ld-pagination-dots-space': this.space === '0' ? '0px' : this.space,
      }
      : undefined;
    // +1 because it must be the index right to the centered item
    const showStartMoreIndicator = this.renderMoreIndicators &&
      this.selectedIndex > this.sticky + this.offset + 1;
    // -1 because it is 0-based and another -1 because it must be the index left to the centered item
    const showEndMoreIndicator = this.renderMoreIndicators &&
      this.selectedIndex < this.length - this.offset - this.sticky - 2;
    const showFrom = 
    // +1 because it is not 0-based
    Math.max(Math.min(this.selectedIndex -
      this.offset -
      // start hiding numbers
      (showStartMoreIndicator ? 0 : 1), this.length -
      this.visibleItemsInSlider -
      this.sticky -
      1 +
      (isDots ? -1 : 0)), this.sticky) + 1;
    // +1 because it is not 0-based
    const showTo = Math.min(Math.max(this.selectedIndex + (showEndMoreIndicator ? 0 : 1), this.offset + this.sticky + 1 + (isDots ? 1 : 0)) + this.offset, this.length - this.sticky) + 1;
    return (h(Host, { role: "navigation" },
      h("ul", { "aria-label": "Pagination", class: getClassNames([
          'ld-pagination',
          this.size && `ld-pagination--${this.size}`,
          isDots && `ld-pagination--dots`,
          this.brandColor && 'ld-pagination--brand-color',
        ]), part: "wrapper", style: styleDots },
        !this.hideStartEnd && (h("li", { class: "ld-pagination__arrow" },
          h("ld-button", { "aria-label": this.startLabel
              ? undefined
              : `First ${this.itemLabel.toLocaleLowerCase()}`, disabled: this.selectedIndex < 1 ? true : undefined, mode: "ghost", onClick: () => {
              this.selectedIndex = 0;
            }, part: "arrow start focusable", size: this.size }, this.startLabel ? (this.startLabel) : (h("ld-icon", { name: "arrow-double-left", size: this.size }))))),
        !this.hidePrevNext && (h("li", { class: "ld-pagination__arrow" },
          h("ld-button", { "aria-label": this.prevLabel
              ? undefined
              : `Previous ${this.itemLabel.toLocaleLowerCase()}`, disabled: this.selectedIndex < 1, mode: "ghost", onClick: () => {
              this.selectedIndex -= 1;
            }, part: "arrow prev focusable", size: this.size }, this.prevLabel ? (this.prevLabel) : (h("ld-icon", { name: "arrow-left", size: this.size }))))),
        this.renderSticky &&
          Array.from({ length: Math.min(this.sticky, this.length) }).map((_, index) => {
            return (h("li", { class: "ld-pagination__sticky" },
              h("ld-button", { "aria-label": `${this.itemLabel} ${index + 1}`, mode: "ghost", onClick: () => {
                  this.selectedIndex = index;
                }, part: "sticky item focusable", size: this.size }, index + 1)));
          }),
        this.renderMoreIndicators && (h("li", { class: getClassNames([
            'ld-pagination__more-indicator',
            showStartMoreIndicator &&
              'ld-pagination__more-indicator--visible',
          ]), part: "more-indicator" },
          h("span", null, ". . ."))),
        h("li", { class: getClassNames([
            'ld-pagination__slide-wrapper',
            this.transitioning &&
              'ld-pagination__slide-wrapper--transitioning',
          ]), part: "slide-wrapper", ref: (ref) => (this.wrapperRef = ref), style: {
            '--ld-pagination-slider-cols': `${Math.min(this.slidableItems.length, this.maxSliderColumns)}`,
          } },
          h("ul", { class: "ld-pagination__items", part: "items", style: {
              '--ld-pagination-slide-index': `${Math.max(Math.min(this.selectedIndex - this.offset - 1, 
              // -1 because of the "..." and another -1 because it is 0-based
              this.length - this.visibleItemsInSlider - this.sticky - 2), 
              // marker position in case of length < sticky
              Math.min(this.sticky, this.length), 0)}`,
            } },
            !isDots && (h("li", { class: getClassNames([
                'ld-pagination__marker',
                this.selectedIndex < 0 && 'ld-pagination__marker--hidden',
              ]), key: "marker", onTransitionEnd: this.calculateSliderContent, part: "marker", style: {
                '--ld-pagination-selected-index': `${Math.max(this.selectedIndex, 0)}`,
              } })),
            this.length > 0 &&
              this.sliderContent.map((itemNumber) => this.renderItem(itemNumber, showFrom, showTo)))),
        this.renderMoreIndicators && (h("li", { class: getClassNames([
            'ld-pagination__more-indicator ld-pagination__more-indicator--end',
            showEndMoreIndicator &&
              'ld-pagination__more-indicator--visible',
          ]), part: "more-indicator" },
          h("span", null, ". . ."))),
        this.renderSticky &&
          this.length < Infinity &&
          Array.from({ length: this.sticky })
            .map((_, index) => {
            const itemNumber = this.length - index;
            if (itemNumber <= this.sticky) {
              return null;
            }
            return (h("li", { class: "ld-pagination__sticky" },
              h("ld-button", { mode: "ghost", onClick: () => {
                  this.selectedIndex = itemNumber - 1;
                }, part: "sticky item focusable", size: this.size }, itemNumber)));
          })
            .reverse(),
        !this.hidePrevNext && (h("li", { class: "ld-pagination__arrow" },
          h("ld-button", { "aria-label": this.nextLabel
              ? undefined
              : `Next ${this.itemLabel.toLocaleLowerCase()}`, disabled: this.selectedIndex >= this.length - 1, mode: "ghost", onClick: () => {
              this.selectedIndex += 1;
            }, part: "arrow next focusable", size: this.size }, this.nextLabel ? (this.nextLabel) : (h("ld-icon", { name: "arrow-right", size: this.size }))))),
        this.length < Infinity && !this.hideStartEnd && (h("li", { class: "ld-pagination__arrow" },
          h("ld-button", { "aria-label": this.endLabel
              ? undefined
              : `Last ${this.itemLabel.toLocaleLowerCase()}`, disabled: this.selectedIndex >= this.length - 1, mode: "ghost", onClick: () => {
              this.selectedIndex = this.length - 1;
            }, part: "arrow end focusable", size: this.size }, this.endLabel ? (this.endLabel) : (h("ld-icon", { name: "arrow-double-right", size: this.size }))))))));
  }
  static get is() { return "ld-pagination"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-pagination.shadow.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-pagination.shadow.css"]
  }; }
  static get assetsDirs() { return ["assets"]; }
  static get properties() { return {
    "brandColor": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Switch colors for brand background."
      },
      "attribute": "brand-color",
      "reflect": false
    },
    "endLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Label text for the end button (replaces the icon)."
      },
      "attribute": "end-label",
      "reflect": false
    },
    "hidePrevNext": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Hide the buttons to navigate forward/backward."
      },
      "attribute": "hide-prev-next",
      "reflect": false,
      "defaultValue": "false"
    },
    "hideStartEnd": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Hide the buttons to navigate to the first/last item."
      },
      "attribute": "hide-start-end",
      "reflect": false,
      "defaultValue": "false"
    },
    "itemLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Label to communicate the type of an item."
      },
      "attribute": "item-label",
      "reflect": false,
      "defaultValue": "'Page'"
    },
    "length": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The number of items/pages available for pagination (required to let the user jump to the last item/page)."
      },
      "attribute": "length",
      "reflect": false,
      "defaultValue": "Infinity"
    },
    "mode": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'numbers' | 'dots'",
        "resolved": "\"dots\" | \"numbers\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Items display mode, default as numbers."
      },
      "attribute": "mode",
      "reflect": false,
      "defaultValue": "'numbers'"
    },
    "nextLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Label text for the forward button (replaces the icon)."
      },
      "attribute": "next-label",
      "reflect": false
    },
    "offset": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Number of next/previous items visible."
      },
      "attribute": "offset",
      "reflect": false,
      "defaultValue": "2"
    },
    "prevLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Label text for the backward button (replaces the icon)."
      },
      "attribute": "prev-label",
      "reflect": false
    },
    "selectedIndex": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The currently selected item (an index of `-1` means nothing is selected)."
      },
      "attribute": "selected-index",
      "reflect": false,
      "defaultValue": "0"
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'sm' | 'lg'",
        "resolved": "\"lg\" | \"sm\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Size of the pagination."
      },
      "attribute": "size",
      "reflect": false
    },
    "space": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Space between dots (dots mode only, default depending on `size` prop)."
      },
      "attribute": "space",
      "reflect": false
    },
    "startLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Label text for the start button (replaces the icon)."
      },
      "attribute": "start-label",
      "reflect": false
    },
    "sticky": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Number of items permanently visible at the start/end."
      },
      "attribute": "sticky",
      "reflect": false,
      "defaultValue": "0"
    }
  }; }
  static get states() { return {
    "maxSliderColumns": {},
    "renderMoreIndicators": {},
    "renderSticky": {},
    "slidableItems": {},
    "sliderContent": {},
    "transitioning": {},
    "visibleItemsInSlider": {}
  }; }
  static get events() { return [{
      "method": "ldchange",
      "name": "ldchange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Dispatched, if the selected index changes."
      },
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      }
    }]; }
  static get watchers() { return [{
      "propName": "selectedIndex",
      "methodName": "handleSelectedIndex"
    }, {
      "propName": "length",
      "methodName": "componentWillLoad"
    }, {
      "propName": "mode",
      "methodName": "componentWillLoad"
    }, {
      "propName": "offset",
      "methodName": "componentWillLoad"
    }, {
      "propName": "sticky",
      "methodName": "componentWillLoad"
    }]; }
}

import { Component, Element, Event, h, Host, Prop, State, Watch, } from '@stencil/core';
import { getClassNames } from '../../../utils/getClassNames';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 */
export class LdAccordionSection {
  constructor() {
    this.initialized = false;
  }
  updateExpandedState(newExpanded) {
    Array.from(this.el.children).forEach((child) => {
      child.setExpanded(newExpanded);
    });
    if (this.initialized) {
      this.ldaccordionchange.emit(newExpanded);
    }
  }
  handleToggleClick(ev) {
    if (ev.target.closest('ld-accordion-section') !== this.el) {
      return;
    }
    this.expanded = !this.expanded;
  }
  componentWillLoad() {
    this.updateExpandedState(this.expanded);
    this.initialized = true;
  }
  render() {
    const cl = getClassNames([
      'ld-accordion-section',
      this.expanded && 'ld-accordion-section--expanded',
    ]);
    return (h(Host, { class: cl, onLdaccordiontoggleclick: this.handleToggleClick.bind(this) },
      h("slot", null)));
  }
  static get is() { return "ld-accordion-section"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-accordion-section.shadow.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-accordion-section.shadow.css"]
  }; }
  static get properties() { return {
    "expanded": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Indicates that the accordion section is expanded."
      },
      "attribute": "expanded",
      "reflect": false
    }
  }; }
  static get states() { return {
    "initialized": {}
  }; }
  static get events() { return [{
      "method": "ldaccordionchange",
      "name": "ldaccordionchange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted on expansion and collapse."
      },
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      }
    }]; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "expanded",
      "methodName": "updateExpandedState"
    }]; }
}

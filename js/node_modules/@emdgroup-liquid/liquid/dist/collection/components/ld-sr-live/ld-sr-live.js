import { Component, h, Listen, State } from '@stencil/core';
/**
 * @virtualProp ref - reference to component
 */
export class LdSrLive {
  handleInfo(event) {
    // MAGIC: the second “pseudo-empty” string contains a zero width space, which is required
    // in order to repeat an alert message, without altering the printed message displayed on the screen.
    this.infoSuffix = this.infoSuffix ? '' : '​';
    this.info = event.detail + this.infoSuffix;
  }
  handleAlert(event) {
    // MAGIC: the second “pseudo-empty” string contains a zero width space, which is required
    // in order to repeat an alert message, without altering the printed message displayed on the screen.
    this.alertSuffix = this.alertSuffix ? '' : '​';
    this.alert = event.detail + this.alertSuffix;
  }
  render() {
    return (h("ld-sr-only", null,
      h("span", { role: "status", "aria-live": "polite", "aria-relevant": "all", "aria-atomic": "true" }, this.info),
      h("span", { role: "alert", "aria-live": "polite", "aria-relevant": "all", "aria-atomic": "true" }, this.alert)));
  }
  static get is() { return "ld-sr-live"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-sr-live.shadow.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-sr-live.shadow.css"]
  }; }
  static get states() { return {
    "info": {},
    "alert": {}
  }; }
  static get listeners() { return [{
      "name": "ldSrLiveInfo",
      "method": "handleInfo",
      "target": "window",
      "capture": false,
      "passive": true
    }, {
      "name": "ldSrLiveAlert",
      "method": "handleAlert",
      "target": "window",
      "capture": false,
      "passive": true
    }]; }
}

var __rest = (this && this.__rest) || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
import { Component, Element, Event, h, Host, Method, Prop, State, Watch, } from '@stencil/core';
import { cloneAttributes } from '../../utils/cloneAttributes';
import { getClassNames } from '../../utils/getClassNames';
import { registerAutofocus } from '../../utils/focus';
/**
 * The `ld-input` component. You can use it in conjunction with the `ld-label`
 * and the `ld-input-message` component. See examples in the docs for a better
 * understanding on how they can be used together.
 *
 * @slot start - The purpose of this slot is to add icons or buttons
 * to the input, __justifying the item to the end of the component__.
 * Styling for `ld-icon` and `ld-button` is provided within the `ld-input` component.
 * If you choose to place something different into the slot, you will probably
 * need to adjust some styles on the slotted item in order to make it fit right.
 * @slot end - The purpose of this slot is to add icons or buttons
 * to the input, __justifying the item to the start of the component__.
 * Styling for `ld-icon` and `ld-button` is provided within the `ld-input` component.
 * If you choose to place something different into the slot, you will probably
 * need to adjust some styles on the slotted item in order to make it fit right.
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part input - Actual input/textarea element
 * @part placeholder - Placeholder rendered for input type "file"
 */
export class LdInput {
  constructor() {
    /** Whether the multiline input is resizable, and if so, in which directions. */
    this.resize = 'both';
    this.handleChange = (ev) => {
      this.el.dispatchEvent(new InputEvent('change', ev));
      this.ldchange.emit(this.value);
    };
    this.handleInput = (ev) => {
      var _a;
      if (this.input.getAttribute('aria-disabled') === 'true') {
        ev.stopImmediatePropagation();
        this.input.value = (_a = this.value) !== null && _a !== void 0 ? _a : '';
        return;
      }
      this.value = this.input.value;
      this.ldinput.emit(this.value);
    };
    this.handleClick = (ev) => {
      const target = ev.target;
      if (this.el.hasAttribute('disabled') ||
        this.el.getAttribute('aria-disabled') === 'true') {
        ev.preventDefault();
        return;
      }
      if (target.closest('ld-button'))
        return;
      if (this.el.shadowRoot.activeElement !== this.input) {
        this.input.focus();
      }
      if (target === this.el) {
        this.input.dispatchEvent(new MouseEvent('click', { bubbles: false }));
      }
    };
    this.handleKeyDown = (ev) => {
      var _a;
      const outerForm = this.el.closest('form');
      const formToSubmit = this.form
        ? (_a = document.querySelector(`#${this.form}`)) !== null && _a !== void 0 ? _a : outerForm
        : outerForm;
      if (this.el.getAttribute('aria-disabled') === 'true' &&
        !['ArrowLeft', 'ArrowRight', 'Tab'].includes(ev.key)) {
        ev.preventDefault();
      }
      else if (!this.multiline && ev.key === 'Enter' && formToSubmit) {
        formToSubmit.requestSubmit();
      }
    };
  }
  /**
   * Sets focus on the input
   */
  async focusInner() {
    if (this.input !== undefined) {
      this.input.focus();
    }
  }
  updateHiddenInput() {
    const outerForm = this.el.closest('form');
    if (!this.hiddenInput && this.name && (outerForm || this.form)) {
      this.createHiddenInput();
    }
    if (this.hiddenInput) {
      if (this.dirname) {
        this.hiddenInput.dirName = this.dirname;
      }
      if (this.name) {
        this.hiddenInput.name = this.name;
      }
      else if (this.hiddenInput.name) {
        this.hiddenInput.remove();
        this.hiddenInput = undefined;
        return;
      }
      if (this.form) {
        this.hiddenInput.setAttribute('form', this.form);
      }
      else if (this.hiddenInput.getAttribute('form')) {
        if (outerForm) {
          this.hiddenInput.removeAttribute('form');
        }
        else {
          this.hiddenInput.remove();
          this.hiddenInput = undefined;
          return;
        }
      }
      if (this.value) {
        this.hiddenInput.value = this.value;
      }
      else if (this.hiddenInput.value) {
        this.hiddenInput.removeAttribute('value');
      }
    }
  }
  createHiddenInput() {
    this.hiddenInput = document.createElement('input');
    this.hiddenInput.type = 'hidden';
    this.el.appendChild(this.hiddenInput);
  }
  updateIconAndButtonSize() {
    this.el.querySelectorAll('ld-button').forEach((button) => {
      if (this.size !== undefined) {
        button.setAttribute('size', this.size);
      }
      else {
        button.removeAttribute('size');
      }
    });
    this.el.querySelectorAll('.ld-button').forEach((button) => {
      if (this.size === 'sm') {
        button.classList.remove('ld-button--lg');
        button.classList.add('ld-button--sm');
      }
      else if (this.size === 'lg') {
        button.classList.remove('ld-button--sm');
        button.classList.add('ld-button--lg');
      }
      else {
        button.classList.remove('ld-button--sm', 'ld-button--lg');
      }
    });
    this.el.querySelectorAll('ld-icon').forEach((icon) => {
      if (this.size !== undefined) {
        icon.setAttribute('size', this.size);
      }
      else {
        icon.removeAttribute('size');
      }
    });
    this.el.querySelectorAll('.ld-icon').forEach((icon) => {
      if (this.size === 'sm') {
        icon.classList.remove('ld-icon--lg');
        icon.classList.add('ld-icon--sm');
      }
      else if (this.size === 'lg') {
        icon.classList.remove('ld-icon--sm');
        icon.classList.add('ld-icon--lg');
      }
      else {
        icon.classList.remove('ld-icon--sm', 'ld-icon--lg');
      }
    });
  }
  componentWillLoad() {
    this.attributesObserver = cloneAttributes.call(this, [
      'multiline',
      'autocomplete',
    ]);
    const outerForm = this.el.closest('form');
    if (outerForm && !this.autocomplete) {
      this.autocomplete = outerForm.getAttribute('autocomplete');
    }
    if (this.name && (outerForm || this.form)) {
      this.createHiddenInput();
      this.hiddenInput.name = this.name;
      if (this.dirname) {
        this.hiddenInput.dirName = this.dirname;
      }
      if (this.form) {
        this.hiddenInput.setAttribute('form', this.form);
      }
      if (this.value) {
        this.hiddenInput.value = this.value;
      }
    }
    this.updateIconAndButtonSize();
    registerAutofocus(this.autofocus);
  }
  disconnectedCallback() {
    var _a;
    (_a = this.attributesObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  render() {
    var _a, _b;
    const cl = getClassNames([
      'ld-input',
      this.disabled && `ld-input--disabled`,
      this.size && `ld-input--${this.size}`,
      this.tone && `ld-input--${this.tone}`,
      this.invalid && 'ld-input--invalid',
      this.multiline && this.resize && `ld-input--resize-${this.resize}`,
    ]);
    if (this.multiline) {
      const _c = this.clonedAttributes, { type } = _c, clonedAttributesWithoutType = __rest(_c, ["type"]);
      return (h(Host, { class: cl, onClick: this.handleClick },
        h("textarea", Object.assign({}, clonedAttributesWithoutType, { onChange: this.handleChange, onInput: this.handleInput, part: "input focusable", ref: (el) => (this.input = el), tabIndex: this.ldTabindex, value: this.value })),
        type === 'file' && (h("span", { class: "ld-input__placeholder", part: "placeholder" }, ((_a = this.input) === null || _a === void 0 ? void 0 : _a.value) || this.placeholder))));
    }
    return (h(Host, { class: cl, onClick: this.handleClick },
      h("slot", { name: "start" }),
      h("input", Object.assign({}, this.clonedAttributes, { autocomplete: this.autocomplete, onChange: this.handleChange, onInput: this.handleInput, onKeyDown: this.handleKeyDown, part: "input focusable", ref: (el) => (this.input = el), tabIndex: this.ldTabindex, value: this.value || undefined })),
      this.type === 'file' && (h("span", { class: "ld-input__placeholder", part: "placeholder" }, ((_b = this.input) === null || _b === void 0 ? void 0 : _b.value) || this.placeholder)),
      h("slot", { name: "end" })));
  }
  static get is() { return "ld-input"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-input.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-input.css"]
  }; }
  static get properties() { return {
    "accept": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Hint for expected file type in file upload controls."
      },
      "attribute": "accept",
      "reflect": false
    },
    "autocomplete": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Hint for form autofill feature."
      },
      "attribute": "autocomplete",
      "reflect": true
    },
    "autofocus": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Automatically focus the form control when the page is loaded."
      },
      "attribute": "autofocus",
      "reflect": true
    },
    "capture": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Media capture input method in file upload controls."
      },
      "attribute": "capture",
      "reflect": false
    },
    "cols": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The number of columns."
      },
      "attribute": "cols",
      "reflect": false
    },
    "dirname": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Name of form field to use for sending the element's directionality in form submission."
      },
      "attribute": "dirname",
      "reflect": false
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Whether the form control is disabled."
      },
      "attribute": "disabled",
      "reflect": false
    },
    "form": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Associates the control with a form element."
      },
      "attribute": "form",
      "reflect": false
    },
    "invalid": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Set this property to `true` in order to mark the field visually as invalid."
      },
      "attribute": "invalid",
      "reflect": false
    },
    "ldTabindex": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number | undefined",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Tab index of the input."
      },
      "attribute": "ld-tabindex",
      "reflect": false
    },
    "list": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Value of the id attribute of the `<datalist>` of autocomplete options."
      },
      "attribute": "list",
      "reflect": false
    },
    "max": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "string | number",
        "resolved": "number | string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Maximum value."
      },
      "attribute": "max",
      "reflect": false
    },
    "maxlength": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Maximum length (number of characters) of `value`."
      },
      "attribute": "maxlength",
      "reflect": false
    },
    "min": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "string | number",
        "resolved": "number | string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Minimum value."
      },
      "attribute": "min",
      "reflect": false
    },
    "minlength": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Minimum length (number of characters) of `value`."
      },
      "attribute": "minlength",
      "reflect": false
    },
    "multiline": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Uses textarea instead of input internally. Setting this attribute to true\ndisables the attribute type and both slots."
      },
      "attribute": "multiline",
      "reflect": false
    },
    "multiple": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Boolean. Whether to allow multiple values."
      },
      "attribute": "multiple",
      "reflect": false
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Used to specify the name of the control."
      },
      "attribute": "name",
      "reflect": false
    },
    "pattern": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Pattern the `value` must match to be valid."
      },
      "attribute": "pattern",
      "reflect": false
    },
    "placeholder": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The input placeholder."
      },
      "attribute": "placeholder",
      "reflect": false
    },
    "readonly": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The value is not editable."
      },
      "attribute": "readonly",
      "reflect": false
    },
    "required": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "A value is required for the form to be submittable."
      },
      "attribute": "required",
      "reflect": false
    },
    "resize": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'none' | 'both' | 'horizontal' | 'vertical'",
        "resolved": "\"both\" | \"horizontal\" | \"none\" | \"vertical\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Whether the multiline input is resizable, and if so, in which directions."
      },
      "attribute": "resize",
      "reflect": false,
      "defaultValue": "'both'"
    },
    "rows": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The number of rows."
      },
      "attribute": "rows",
      "reflect": false
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'sm' | 'lg'",
        "resolved": "\"lg\" | \"sm\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Size of the input."
      },
      "attribute": "size",
      "reflect": false
    },
    "step": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Incremental values that are valid."
      },
      "attribute": "step",
      "reflect": false
    },
    "tone": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'dark'",
        "resolved": "\"dark\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Input tone. Use `'dark'` on white backgrounds. Default is a light tone."
      },
      "attribute": "tone",
      "reflect": false
    },
    "type": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The input type."
      },
      "attribute": "type",
      "reflect": false
    },
    "value": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The input value."
      },
      "attribute": "value",
      "reflect": false
    }
  }; }
  static get states() { return {
    "clonedAttributes": {}
  }; }
  static get events() { return [{
      "method": "ldchange",
      "name": "ldchange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted when the input value changed and the element loses focus."
      },
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      }
    }, {
      "method": "ldinput",
      "name": "ldinput",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted when the input value changed."
      },
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "focusInner": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets focus on the input",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "dirname",
      "methodName": "updateHiddenInput"
    }, {
      "propName": "form",
      "methodName": "updateHiddenInput"
    }, {
      "propName": "name",
      "methodName": "updateHiddenInput"
    }, {
      "propName": "value",
      "methodName": "updateHiddenInput"
    }, {
      "propName": "size",
      "methodName": "updateIconAndButtonSize"
    }]; }
}

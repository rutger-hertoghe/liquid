import { Component, Element, h, Method, Prop, State } from '@stencil/core';
import { getClassNames } from 'src/liquid/utils/getClassNames';
import { cloneAttributes } from '../../utils/cloneAttributes';
import { registerAutofocus } from '../../utils/focus';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part button - Actual button or anchor element
 * @part progress-bar - Progress bar
 */
export class LdButton {
  constructor() {
    /** Specifies the default behavior of the button. */
    this.type = 'submit';
    this.iconOnly = false;
    this.handleClick = (ev) => {
      const ariaDisabled = this.button.getAttribute('aria-disabled');
      if (this.disabled || (ariaDisabled && ariaDisabled !== 'false')) {
        ev.preventDefault();
        return;
      }
      if (!this.href && this.type !== 'button') {
        setTimeout(() => {
          if (!ev.defaultPrevented) {
            const form = this.el.closest('form');
            if (form || this.form) {
              this.clickHiddenButton();
            }
          }
        });
      }
    };
  }
  /**
   * Sets focus on the button
   */
  async focusInner() {
    if (this.button !== undefined) {
      this.button.focus();
    }
  }
  connectedCallback() {
    this.el.addEventListener('click', this.handleClick, {
      capture: true,
    });
  }
  disconnectedCallback() {
    var _a;
    this.el.removeEventListener('click', this.handleClick, {
      capture: true,
    });
    (_a = this.attributesObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  clickHiddenButton() {
    const button = document.createElement('button');
    button.style.pointerEvents = 'none';
    button.style.position = 'absolute';
    button.style.visibility = 'hidden';
    if (this.form)
      button.setAttribute('form', this.form);
    if (this.formaction !== undefined)
      button.formAction = this.formaction;
    if (this.formenctype !== undefined)
      button.formEnctype = this.formenctype;
    if (this.formmethod !== undefined)
      button.formMethod = this.formmethod;
    if (this.formnovalidate !== undefined)
      button.formNoValidate = this.formnovalidate;
    if (this.formtarget !== undefined)
      button.formTarget = this.formtarget;
    if (this.name !== undefined)
      button.name = this.name;
    if (this.type !== undefined)
      button.type = this.type;
    if (this.value !== undefined)
      button.value = this.value;
    this.el.parentNode.append(button);
    button.click();
    button.remove();
  }
  componentWillLoad() {
    this.attributesObserver = cloneAttributes.call(this, [
      'align-text',
      'brand-color',
      'justify-content',
      'ld-tabindex',
      'mode',
      'progress',
      'size',
      this.type === 'submit' ? 'type' : undefined, // submit is default
    ]);
    const textInButton = this.el.textContent.trim();
    if (!textInButton) {
      this.iconOnly = true;
    }
    registerAutofocus(this.autofocus);
  }
  render() {
    const cl = getClassNames([
      'ld-button',
      this.alignText && `ld-button--align-text-${this.alignText}`,
      this.brandColor && `ld-button--brand-color`,
      this.iconOnly && `ld-button--icon-only`,
      this.justifyContent && `ld-button--justify-${this.justifyContent}`,
      this.mode && `ld-button--${this.mode}`,
      this.size && `ld-button--${this.size}`,
    ]);
    const Tag = this.href ? 'a' : 'button';
    const hasProgress = this.progress !== undefined && this.progress !== null;
    const styleProgress = !isNaN(parseFloat(this.progress + ''))
      ? { '--ld-button-progress': this.progress + '' }
      : undefined;
    const clProgress = `ld-button__progress${this.progress === 'pending' ? ' ld-button__progress--pending' : ''}`;
    return (h(Tag, Object.assign({}, this.clonedAttributes, { href: this.href, "aria-busy": hasProgress ? 'true' : undefined, "aria-disabled": this.disabled || this.el.getAttribute('aria-disabled') === 'true'
        ? 'true'
        : undefined, "aria-live": "polite", class: cl, disabled: this.disabled, part: "button focusable", ref: (el) => (this.button = el), rel: this.target === '_blank' ? 'noreferrer noopener' : undefined, tabIndex: this.ldTabindex, value: this.value }),
      h("slot", null),
      hasProgress && (h("span", { class: clProgress, part: "progress-bar", style: styleProgress }))));
  }
  static get is() { return "ld-button"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-button.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-button.css"]
  }; }
  static get properties() { return {
    "alignText": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "'left' | 'right'",
        "resolved": "\"left\" | \"right\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Align text."
      },
      "attribute": "align-text",
      "reflect": false
    },
    "autofocus": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Automatically focus the form control when the page is loaded."
      },
      "attribute": "autofocus",
      "reflect": true
    },
    "brandColor": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Style the button so that it looks good on the current theme's primary color."
      },
      "attribute": "brand-color",
      "reflect": false
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Disabled state of the button."
      },
      "attribute": "disabled",
      "reflect": false
    },
    "form": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Associates the control with a form element."
      },
      "attribute": "form",
      "reflect": false
    },
    "formaction": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "| 'application/x-www-form-urlencoded'\n    | 'multipart/form-data'\n    | 'text/plain'",
        "resolved": "\"application/x-www-form-urlencoded\" | \"multipart/form-data\" | \"text/plain\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Overrides the `action` attribute of the button's form owner."
      },
      "attribute": "formaction",
      "reflect": false
    },
    "formenctype": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Overrides the `enctype` attribute of the button's form owner."
      },
      "attribute": "formenctype",
      "reflect": false
    },
    "formmethod": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'get' | 'post'",
        "resolved": "\"get\" | \"post\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Overrides the `method` attribute of the button's form owner."
      },
      "attribute": "formmethod",
      "reflect": false
    },
    "formnovalidate": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Overrides the `novalidate` attribute of the button's form owner."
      },
      "attribute": "formnovalidate",
      "reflect": false
    },
    "formtarget": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'_blank' | '_parent' | '_self' | '_top'",
        "resolved": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Overrides the `target` attribute of the button's form owner."
      },
      "attribute": "formtarget",
      "reflect": false
    },
    "href": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Transforms the button to an anchor element.\nSee [mdn docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href)\nfor more information on the `href` attribute."
      },
      "attribute": "href",
      "reflect": false
    },
    "justifyContent": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "'start' | 'end' | 'between'",
        "resolved": "\"between\" | \"end\" | \"start\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Justify content."
      },
      "attribute": "justify-content",
      "reflect": false
    },
    "ldTabindex": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number | undefined",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Tab index of the button."
      },
      "attribute": "ld-tabindex",
      "reflect": false
    },
    "mode": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "| 'highlight'\n    | 'secondary'\n    | 'ghost'\n    | 'danger'\n    | 'danger-secondary'",
        "resolved": "\"danger\" | \"danger-secondary\" | \"ghost\" | \"highlight\" | \"secondary\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Display mode."
      },
      "attribute": "mode",
      "reflect": false
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Used to specify the name of the control."
      },
      "attribute": "name",
      "reflect": false
    },
    "progress": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "'pending' | number",
        "resolved": "\"pending\" | number",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Displays a progress bar at the bottom of the button."
      },
      "attribute": "progress",
      "reflect": false
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'sm' | 'lg'",
        "resolved": "\"lg\" | \"sm\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Size of the button."
      },
      "attribute": "size",
      "reflect": false
    },
    "target": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'_blank' | '_self' | '_parent' | '_top'",
        "resolved": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The `target` attributed can be used in conjunction with the `href` attribute.\nSee [mdn docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)\nfor more information on the `target` attribute."
      },
      "attribute": "target",
      "reflect": false
    },
    "type": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'button' | 'reset' | 'submit'",
        "resolved": "\"button\" | \"reset\" | \"submit\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Specifies the default behavior of the button."
      },
      "attribute": "type",
      "reflect": false,
      "defaultValue": "'submit'"
    },
    "value": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Defines the value associated with the button\u2019s `name` when it\u2019s submitted with the form data."
      },
      "attribute": "value",
      "reflect": false
    }
  }; }
  static get states() { return {
    "clonedAttributes": {},
    "iconOnly": {}
  }; }
  static get methods() { return {
    "focusInner": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets focus on the button",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "el"; }
}

import { Component, h, Host, Prop, Element } from '@stencil/core';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 */
export class LdOption {
  constructor() {
    /** Set to true on filtering via select input. */
    this.hidden = false;
  }
  componentWillLoad() {
    // Setting selected via prop directly triggers the mutation observer to fire twice on attribute chage.
    // This is indeed only true for the selected attribute. The disabled attribute works fine when assigned directly.
    if (this.selected) {
      this.el.setAttribute('selected', '');
    }
  }
  render() {
    return (h(Host, { class: "ld-option" },
      h("slot", null)));
  }
  static get is() { return "ld-option"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-option.shadow.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-option.shadow.css"]
  }; }
  static get properties() { return {
    "value": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The content of this attribute represents the value to be submitted with the form,\nshould this option be selected. If this attribute is omitted, the value is taken\nfrom the text content of the option element."
      },
      "attribute": "value",
      "reflect": false
    },
    "selected": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "If present, this boolean attribute indicates that the option is selected."
      },
      "attribute": "selected",
      "reflect": false
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Disables the option."
      },
      "attribute": "disabled",
      "reflect": false
    },
    "hidden": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set to true on filtering via select input."
      },
      "attribute": "hidden",
      "reflect": true,
      "defaultValue": "false"
    }
  }; }
  static get elementRef() { return "el"; }
}

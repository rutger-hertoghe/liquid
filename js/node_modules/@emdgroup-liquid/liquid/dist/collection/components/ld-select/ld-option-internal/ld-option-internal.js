import { Component, h, Host, Prop, Element, Event, Listen, State, Method, } from '@stencil/core';
import { getClassNames } from '../../../utils/getClassNames';
/** @internal **/
export class LdOptionInternal {
  constructor() {
    /**
     * If present, this boolean attribute indicates that the option is selected.
     */
    this.selected = false;
    /**
     * Disables the option.
     */
    this.disabled = false;
    /** Set to true on filtering via select input. */
    this.hidden = false;
  }
  /**
   * Sets focus internally.
   */
  async focusOption() {
    this.optionRef.focus();
  }
  handleClick() {
    if (this.disabled)
      return;
    if (!this.preventDeselection ||
      !this.selected ||
      this.mode === 'checkbox') {
      this.selected = !this.selected;
    }
    if (this.mode !== 'checkbox') {
      this.hasFocus = false;
      this.hasHover = false;
    }
    this.ldoptionselect.emit(this.selected);
  }
  handleKeyDown(ev) {
    if (ev.key === ' ' || ev.key === 'Enter') {
      ev.preventDefault();
      ev.stopImmediatePropagation();
      this.handleClick();
    }
    if (ev.key === 'Escape') {
      this.hasFocus = false;
      this.hasHover = false;
    }
  }
  componentWillLoad() {
    if (typeof this.value === 'undefined') {
      requestAnimationFrame(() => {
        this.value = this.el.innerText;
      });
    }
  }
  render() {
    return (h(Host, { class: getClassNames([
        this.disabled && 'ld-option-internal--disabled',
        this.hasFocus && 'ld-option-internal--focus-within',
        this.hasHover && 'ld-option-internal--hover-within',
      ]) },
      h("div", { class: getClassNames([
          'ld-option-internal',
          this.size && `ld-option-internal--${this.size}`,
        ]), role: "option", ref: (el) => (this.optionRef = el), "aria-selected": this.selected ? 'true' : undefined, "aria-disabled": this.disabled ? 'true' : undefined, onClick: this.handleClick.bind(this), onFocus: () => (this.hasFocus = true), onBlur: () => (this.hasFocus = false), onMouseOver: () => (this.hasHover = true), onMouseOut: () => (this.hasHover = false), tabindex: "-1", part: "option focusable" },
        this.mode === 'checkbox' ? (h("div", { class: "ld-option-internal__checkbox-wrapper", role: "presentation", part: "checkbox-wrapper" },
          h("ld-checkbox", { class: "ld-option-internal__checkbox", checked: this.selected, disabled: this.disabled, part: "checkbox" }))) : (h("svg", { role: 'presentation', class: "ld-option-internal__check", width: "20", height: "20", viewBox: "0 0 20 20", fill: "none", part: "check" },
          h("path", { style: { visibility: this.selected ? 'inherit' : 'hidden' }, d: "M15 7L8.40795 13L5 9.63964", stroke: "currentColor", "stroke-width": "3", "stroke-linecap": "round", "stroke-linejoin": "round" }))),
        h("span", { class: "ld-option-internal__label", title: this.title, part: "label" },
          h("slot", null)))));
  }
  static get is() { return "ld-option-internal"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-option-internal.shadow.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-option-internal.shadow.css"]
  }; }
  static get properties() { return {
    "value": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The content of this attribute represents the value to be submitted with the form,\nshould this option be selected. If this attribute is omitted, the value is taken\nfrom the text content of the option element."
      },
      "attribute": "value",
      "reflect": true
    },
    "selected": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "If present, this boolean attribute indicates that the option is selected."
      },
      "attribute": "selected",
      "reflect": true,
      "defaultValue": "false"
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Disables the option."
      },
      "attribute": "disabled",
      "reflect": false,
      "defaultValue": "false"
    },
    "preventDeselection": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Prevents deselection of a selected options when the selected option\nis clicked in single select mode."
      },
      "attribute": "prevent-deselection",
      "reflect": false
    },
    "mode": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'checkbox' | undefined",
        "resolved": "\"checkbox\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Display mode."
      },
      "attribute": "mode",
      "reflect": false
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'sm' | 'lg'",
        "resolved": "\"lg\" | \"sm\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Size of the select trigger button for applying according paddings."
      },
      "attribute": "size",
      "reflect": false
    },
    "hidden": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set to true on filtering via select input."
      },
      "attribute": "hidden",
      "reflect": true,
      "defaultValue": "false"
    }
  }; }
  static get states() { return {
    "title": {},
    "hasFocus": {},
    "hasHover": {}
  }; }
  static get events() { return [{
      "method": "ldoptionselect",
      "name": "ldoptionselect",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted on either selection or de-selection of the option."
      },
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "focusOption": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets focus internally.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "el"; }
  static get listeners() { return [{
      "name": "keydown",
      "method": "handleKeyDown",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}

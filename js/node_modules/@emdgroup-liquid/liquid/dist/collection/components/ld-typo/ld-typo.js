import { Component, Element, h, Prop, State } from '@stencil/core';
import { cloneAttributes } from '../../utils/cloneAttributes';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part tag - Actual tag
 */
export class LdTypo {
  constructor() {
    /** The font style. Every variant has a default tag that it renders with. */
    this.variant = 'body-m';
    this.getDefaultTag = () => {
      var _a;
      return ((_a = {
        'cap-m': 'span',
        'cap-l': 'span',
        'label-s': 'span',
        'label-m': 'span',
        h1: 'h1',
        h2: 'h2',
        h3: 'h3',
        h4: 'h4',
        h5: 'h5',
        h6: 'h6',
        b1: 'h1',
        b2: 'h2',
        b3: 'h3',
        b4: 'h4',
        b5: 'h5',
        b6: 'h6',
        xb1: 'h1',
        xb2: 'h2',
        xb3: 'h3',
        xh1: 'h1',
        xh2: 'h2',
        xh3: 'h3',
        xh4: 'h4',
        xh5: 'h5',
        xh6: 'h6',
      }[this.variant]) !== null && _a !== void 0 ? _a : 'p');
    };
  }
  applyAriaLabel() {
    const isUppercase = [
      'cap-m',
      'cap-l',
      'b1',
      'b2',
      'b3',
      'b4',
      'b5',
      'b6',
      'xb1',
      'xb2',
      'xb3',
    ].includes(this.variant);
    if (isUppercase) {
      this.root.setAttribute('aria-label', this.ariaLabel || this.el.innerHTML.trim());
    }
  }
  componentWillLoad() {
    this.attributesObserver = cloneAttributes.call(this, ['tag', 'variant']);
  }
  componentDidRender() {
    this.applyAriaLabel();
  }
  disconnectedCallback() {
    var _a;
    (_a = this.attributesObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  render() {
    const HTag = this.tag || this.getDefaultTag();
    return (h(HTag, Object.assign({}, this.clonedAttributes, { class: `ld-typo ld-typo--${this.variant}`, part: "tag", ref: (ref) => (this.root = ref) }),
      h("slot", null)));
  }
  static get is() { return "ld-typo"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-typo.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-typo.css"]
  }; }
  static get properties() { return {
    "tag": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The rendered HTML tag. Overrides tag inferred from the variant."
      },
      "attribute": "tag",
      "reflect": false
    },
    "variant": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "| 'body-xs'\n    | 'body-s'\n    | 'body-m'\n    | 'body-l'\n    | 'body-xl'\n    | 'cap-m'\n    | 'cap-l'\n    | 'label-s'\n    | 'label-m'\n    | 'h1'\n    | 'h2'\n    | 'h3'\n    | 'h4'\n    | 'h5'\n    | 'h6'\n    | 'b1'\n    | 'b2'\n    | 'b3'\n    | 'b4'\n    | 'b5'\n    | 'b6'\n    | 'xb1'\n    | 'xb2'\n    | 'xb3'\n    | 'xh1'\n    | 'xh2'\n    | 'xh3'\n    | 'xh4'\n    | 'xh5'\n    | 'xh6'",
        "resolved": "\"body-xs\" | \"body-s\" | \"body-m\" | \"body-l\" | \"body-xl\" | \"cap-m\" | \"cap-l\" | \"label-s\" | \"label-m\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"b1\" | \"b2\" | \"b3\" | \"b4\" | \"b5\" | \"b6\" | \"xb1\" | \"xb2\" | \"xb3\" | \"xh1\" | \"xh2\" | \"xh3\" | \"xh4\" | \"xh5\" | \"xh6\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The font style. Every variant has a default tag that it renders with."
      },
      "attribute": "variant",
      "reflect": false,
      "defaultValue": "'body-m'"
    },
    "ariaLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Since b* and xb* variants are uppercase, screen readers need to be served a\n(non-uppercase) aria-label (otherwise they will read out the heading letter by letter).\nIf you're using a b* or xb* variant, an aria-label will be\nset automatically on the element. The component will use the inner HTML for the\nlabel implicitly. If you want to set an aria-label explicitly (such as when you have\ninner HTML that should not be part of the label), you can use this property."
      },
      "attribute": "aria-label",
      "reflect": false
    }
  }; }
  static get states() { return {
    "clonedAttributes": {}
  }; }
  static get elementRef() { return "el"; }
}

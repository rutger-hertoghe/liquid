import { Component, h, Element } from '@stencil/core';
/**
 * @part list - Breadcrumbs list
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 */
export class LdBreadcrumbs {
  constructor() {
    this.updateCurrent = () => {
      const crumbs = this.el.querySelectorAll('ld-crumb');
      crumbs.forEach((crumb) => {
        crumb.current = undefined;
      });
      crumbs[crumbs.length - 1].current = true;
    };
  }
  componentDidLoad() {
    this.observer = new MutationObserver(this.updateCurrent);
    this.observer.observe(this.el, {
      subtree: true,
      childList: true,
      attributes: false,
    });
    this.updateCurrent();
  }
  disconnectedCallback() {
    if (this.observer)
      this.observer.disconnect();
  }
  render() {
    return (h("nav", { "aria-label": "Breadcrumbs", class: "ld-breadcrumbs" },
      h("ol", { class: "ld-breadcrumbs__list", part: "list" },
        h("slot", null))));
  }
  static get is() { return "ld-breadcrumbs"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-breadcrumbs.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-breadcrumbs.css"]
  }; }
  static get elementRef() { return "el"; }
}

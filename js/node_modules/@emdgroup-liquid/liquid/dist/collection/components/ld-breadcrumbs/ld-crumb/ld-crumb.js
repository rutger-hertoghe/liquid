import { Component, h, Prop } from '@stencil/core';
import { getClassNames } from '../../../utils/getClassNames';
/**
 * @part link - Breadcrumb link
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 */
export class LdCrumb {
  render() {
    return (h("li", { class: "ld-crumb" },
      h("ld-link", { href: this.href, class: getClassNames([
          'ld-crumb__link',
          this.current && 'ld-crumb__link--current',
        ]), part: "link", "aria-current": this.current ? 'page' : undefined, chevron: this.current ? undefined : 'end' },
        h("slot", null))));
  }
  static get is() { return "ld-crumb"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-crumb.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-crumb.css"]
  }; }
  static get properties() { return {
    "current": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [{
            "name": "internal",
            "text": undefined
          }],
        "text": ""
      },
      "attribute": "current",
      "reflect": false
    },
    "href": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The URL that the hyperlink points to."
      },
      "attribute": "href",
      "reflect": false
    }
  }; }
}

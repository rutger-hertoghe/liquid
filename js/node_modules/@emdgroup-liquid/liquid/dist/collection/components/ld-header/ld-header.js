import { Component, Host, h, Prop, Element, Watch } from '@stencil/core';
import { getClassNames } from 'src/liquid/utils/getClassNames';
/**
 * @slot end - Items on the right side of the header.
 * @slot logo - Custom logo.
 * @slot start - Items on the left side of the header.
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part container - Actual header element that limits the width of the header content
 * @part logo - The default logo
 * @part logo-wrapper - The element wrapping the logo slot (div or anchor, if linked)
 * @part site-name - `ld-typo` element containing the site name
 * @part spacer - Element adding the space between the default slot and the end slot
 */
export class LdHeader {
  constructor() {
    /** Hides header. */
    this.hidden = false;
    /** Hide the header when the user scrolls down and show it again, when the user scrolls up. */
    this.hideOnScroll = false;
    /** Make the header sticky. */
    this.sticky = false;
    this.updateScrollDirection = () => {
      var _a;
      const offset = (_a = window.pageYOffset) !== null && _a !== void 0 ? _a : document.documentElement.scrollTop;
      if (window.innerHeight + offset >= document.body.offsetHeight) {
        this.hidden = false;
      }
      else if (offset > this.lastOffset && offset > this.currentHeight) {
        this.hidden = true;
      }
      else {
        this.hidden = false;
      }
      // For mobile or negative scrolling
      this.lastOffset = offset < 0 ? 0 : offset;
    };
  }
  connectedCallback() {
    if (this.hideOnScroll) {
      this.lastOffset = window.pageYOffset || document.documentElement.scrollTop;
      window.addEventListener('scroll', this.updateScrollDirection, {
        passive: true,
      });
    }
    else {
      this.disconnectedCallback();
    }
  }
  disconnectedCallback() {
    window.removeEventListener('scroll', this.updateScrollDirection);
  }
  componentDidLoad() {
    this.currentHeight = this.el.getBoundingClientRect().height;
    this.el
      .querySelectorAll('ld-header > ld-button')
      .forEach((ldButton) => {
      ldButton.size = 'sm';
      ldButton.brandColor = true;
    });
    this.el
      .querySelectorAll('ld-header > .ld-button')
      .forEach((cssButton) => {
      cssButton.classList.add('ld-button--brand-color');
      cssButton.classList.add('ld-button--sm');
      cssButton.classList.remove('ld-button--lg');
    });
  }
  render() {
    const cl = getClassNames([
      'ld-header',
      this.hidden && 'ld-header--hidden',
      this.sticky && 'ld-header--sticky',
    ]);
    return (h(Host, { class: cl, role: "banner" },
      h("header", { class: "ld-header__container", part: "container" },
        h("slot", { name: "start" }),
        this.logoUrl ? (h("a", { "aria-label": this.logoTitle, class: "ld-header__logo-wrapper", href: this.logoUrl, part: "logo-wrapper" },
          h("slot", { name: "logo" },
            h("ld-icon", { "aria-label": this.logoTitle
                ? undefined
                : 'Merck KGaA, Darmstadt, Germany', class: "ld-header__logo", name: "initial-m", part: "logo" })))) : (h("div", { "aria-label": this.logoTitle, class: "ld-header__logo-wrapper", part: "logo-wrapper" },
          h("slot", { name: "logo" },
            h("ld-icon", { "aria-label": this.logoTitle
                ? undefined
                : 'Merck KGaA, Darmstadt, Germany', class: "ld-header__logo", name: "initial-m", part: "logo" })))),
        this.siteName && (h("ld-typo", { class: "ld-header_site-name", part: "site-name", tag: "div", variant: "h5" }, this.siteName)),
        h("slot", null),
        h("div", { class: "ld-header__grow", part: "spacer" }),
        h("slot", { name: "end" }))));
  }
  static get is() { return "ld-header"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-header.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-header.css"]
  }; }
  static get assetsDirs() { return ["assets"]; }
  static get properties() { return {
    "hidden": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Hides header."
      },
      "attribute": "hidden",
      "reflect": false,
      "defaultValue": "false"
    },
    "hideOnScroll": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Hide the header when the user scrolls down and show it again, when the user scrolls up."
      },
      "attribute": "hide-on-scroll",
      "reflect": false,
      "defaultValue": "false"
    },
    "logoTitle": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Title attribute of the logo link."
      },
      "attribute": "logo-title",
      "reflect": false
    },
    "logoUrl": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "URL that the logo links to."
      },
      "attribute": "logo-url",
      "reflect": false
    },
    "sticky": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Make the header sticky."
      },
      "attribute": "sticky",
      "reflect": false,
      "defaultValue": "false"
    },
    "siteName": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Name shown on the right side of the logo."
      },
      "attribute": "site-name",
      "reflect": false
    }
  }; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "hideOnScroll",
      "methodName": "connectedCallback"
    }]; }
}

import { Component, Element, h, Method, Prop, State } from '@stencil/core';
import { getClassNames } from 'src/liquid/utils/getClassNames';
import { cloneAttributes } from '../../utils/cloneAttributes';
/**
 * @part anchor - the link anchor
 * @virtualProp href - the URL that the hyperlink points to
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 */
export class LdLink {
  constructor() {
    this.handleClick = (ev) => {
      if (this.disabled || this.el.ariaDisabled) {
        ev.preventDefault();
        return;
      }
    };
  }
  /** Sets focus on the anchor. */
  async focusInner() {
    this.anchor.focus();
  }
  componentWillLoad() {
    this.attributesObserver = cloneAttributes.call(this, [
      'iconStart',
      'iconEnd',
    ]);
  }
  connectedCallback() {
    this.el.addEventListener('click', this.handleClick, {
      capture: true,
    });
  }
  disconnectedCallback() {
    var _a;
    this.el.removeEventListener('click', this.handleClick, {
      capture: true,
    });
    (_a = this.attributesObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  render() {
    const cl = getClassNames([
      'ld-link',
      this.chevron && `ld-link--chevron-${this.chevron}`,
      this.disabled && `ld-link--disabled`,
    ]);
    return (h("a", Object.assign({}, this.clonedAttributes, { onClick: this.handleClick, class: cl, "aria-disabled": this.disabled || this.el.ariaDisabled ? 'true' : undefined, ref: (ref) => (this.anchor = ref), rel: this.target === '_blank' ? 'noreferrer noopener' : undefined, disabled: this.disabled, part: "anchor focusable", tabIndex: this.ldTabindex }),
      h("slot", null)));
  }
  static get is() { return "ld-link"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-link.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-link.css"]
  }; }
  static get properties() { return {
    "chevron": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'start' | 'end'",
        "resolved": "\"end\" | \"start\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Displays chevron icon."
      },
      "attribute": "chevron",
      "reflect": false
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The disabled attribute sets `aria-disabled=\"true\"`\non the rendered anchor element."
      },
      "attribute": "disabled",
      "reflect": false
    },
    "ldTabindex": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number | undefined",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Tab index of the input."
      },
      "attribute": "ld-tabindex",
      "reflect": false
    },
    "target": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'_blank' | '_self' | '_parent' | '_top'",
        "resolved": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The `target` attributed can be used in conjunction with the `href` attribute.\nSee [mdn docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)\nfor more information on the `target` attribute."
      },
      "attribute": "target",
      "reflect": false
    }
  }; }
  static get states() { return {
    "clonedAttributes": {}
  }; }
  static get methods() { return {
    "focusInner": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets focus on the anchor.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "el"; }
}

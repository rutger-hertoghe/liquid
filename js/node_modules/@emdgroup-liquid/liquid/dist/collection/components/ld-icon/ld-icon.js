import { Build, Component, Host, h, Prop, Watch, Element } from '@stencil/core';
import { getClassNames } from '../../utils/getClassNames';
import { fetchIcon } from './fetchIcon';
/**
 * @slot - (optional) Custom SVG icon (only valid without name prop).
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part icon - Actual SVG element
 */
export class LdIcon {
  constructor() {
    /** The icon name. */
    this.name = null;
  }
  async loadIconPathData() {
    if ((!Build.isBrowser && !Build.isTesting) || !this.name) {
      return;
    }
    const div = document.createElement('div');
    const iconString = await fetchIcon(this.name);
    div.innerHTML = iconString.replace('<svg', '<svg class="ld-icon__svg" part="icon"');
    Array.from(this.element.shadowRoot.children).forEach((child) => {
      if (child.tagName !== 'STYLE') {
        this.element.shadowRoot.removeChild(child);
      }
    });
    this.element.shadowRoot.appendChild(div.firstChild);
  }
  async componentWillLoad() {
    this.loadIconPathData();
  }
  render() {
    return (h(Host, { class: getClassNames(['ld-icon', this.size && `ld-icon--${this.size}`]), role: "presentation" }, !this.name && h("slot", null)));
  }
  static get is() { return "ld-icon"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-icon.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-icon.css"]
  }; }
  static get assetsDirs() { return ["assets"]; }
  static get properties() { return {
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The icon name."
      },
      "attribute": "name",
      "reflect": false,
      "defaultValue": "null"
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'sm' | 'lg'",
        "resolved": "\"lg\" | \"sm\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Size of the icon."
      },
      "attribute": "size",
      "reflect": false
    }
  }; }
  static get elementRef() { return "element"; }
  static get watchers() { return [{
      "propName": "name",
      "methodName": "loadIconPathData"
    }]; }
}

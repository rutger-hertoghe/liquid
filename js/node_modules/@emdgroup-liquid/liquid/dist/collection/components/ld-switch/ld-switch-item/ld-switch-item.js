import { Component, Element, Event, Method, h, Host, Prop, State, Watch, } from '@stencil/core';
import { cloneAttributes } from '../../../utils/cloneAttributes';
import { getClassNames } from '../../../utils/getClassNames';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part label-element - wrapping label element
 * @part input - the form input element
 * @part content - content container element
 * @part label - text label container containing the main slot
 */
export class LdSwitchItem {
  constructor() {
    /** Indicates whether the switch item is selected. */
    this.checked = false;
    this.handleKeyDown = (ev) => {
      switch (ev.key) {
        case 'ArrowUp':
        case 'ArrowLeft':
          ev.preventDefault();
          this.focusAndSelect('prev');
          return;
        case 'ArrowDown':
        case 'ArrowRight':
          ev.preventDefault();
          this.focusAndSelect('next');
      }
    };
    this.handleClick = (ev) => {
      if (this.checked || this.disabled || this.ariaDisabled || this.readonly) {
        ev.preventDefault();
        return;
      }
      // Uncheck siblings.
      Array.from(this.el.parentElement.querySelectorAll('ld-switch-item')).forEach((ldSwitchItem) => {
        ldSwitchItem.checked = false;
      });
      this.checked = true;
      this.el.dispatchEvent(new InputEvent('change', { bubbles: true }));
      this.ldswitchitemchange.emit(this.el.value);
    };
    this.handleFocus = () => {
      this.ldswitchitemfocus.emit();
    };
  }
  /** Sets focus on the switch item. */
  async focusInner() {
    this.input.focus();
  }
  updateHiddenInput() {
    const outerForm = this.el.closest('form');
    if (!this.hiddenInput && this.name && (outerForm || this.form)) {
      this.createHiddenInput();
    }
    if (this.hiddenInput) {
      if (!this.name) {
        this.hiddenInput.remove();
        this.hiddenInput = undefined;
        return;
      }
      this.hiddenInput.name = this.name;
      this.hiddenInput.checked = this.checked;
      if (this.value) {
        this.hiddenInput.value = this.value;
      }
      else {
        this.hiddenInput.removeAttribute('value');
      }
      if (this.form) {
        this.hiddenInput.setAttribute('form', this.form);
      }
      else if (this.hiddenInput.getAttribute('form')) {
        if (outerForm) {
          this.hiddenInput.removeAttribute('form');
        }
        else {
          this.hiddenInput.remove();
          this.hiddenInput = undefined;
        }
      }
    }
  }
  createHiddenInput() {
    this.hiddenInput = document.createElement('input');
    this.hiddenInput.type = 'radio';
    this.hiddenInput.style.visibility = 'hidden';
    this.hiddenInput.style.position = 'absolute';
    this.hiddenInput.style.pointerEvents = 'none';
    this.el.appendChild(this.hiddenInput);
  }
  focusAndSelect(dir) {
    const sibling = (dir === 'next'
      ? this.el.nextElementSibling
      : this.el.previousElementSibling);
    if (sibling) {
      sibling.focusInner();
      sibling.click();
    }
  }
  componentWillLoad() {
    this.hasLabel = Array.from(this.el.childNodes).some((el) => {
      var _a;
      return el.tagName !== 'LD-ICON' &&
        !((_a = el.classList) === null || _a === void 0 ? void 0 : _a.contains('ld-icon')) &&
        el.textContent.trim();
    });
    this.attributesObserver = cloneAttributes.call(this);
  }
  // istanbul ignore next
  disconnectedCallback() {
    var _a;
    (_a = this.attributesObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  render() {
    const cl = getClassNames([
      'ld-switch-item',
      this.hasLabel && 'ld-switch-item--has-label',
    ]);
    return (h(Host, { onClick: this.handleClick, class: cl },
      h("label", { part: "label-element" },
        h("input", Object.assign({ type: "radio" }, this.clonedAttributes, { part: "input focusable", onKeyDown: this.handleKeyDown, onFocus: this.handleFocus, ref: (ref) => (this.input = ref), required: this.required, disabled: this.disabled, checked: this.checked, tabIndex: this.checked ? this.ldTabindex : -1 })),
        h("span", { part: "content", class: "ld-switch-item__content" },
          h("slot", { name: "icon-start" }),
          h("span", { part: "label", class: "ld-switch-item__label" },
            h("slot", null)),
          h("slot", { name: "icon-end" })))));
  }
  static get is() { return "ld-switch-item"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-switch-item.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-switch-item.css"]
  }; }
  static get properties() { return {
    "ariaDisabled": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Alternative disabled state that keeps element focusable"
      },
      "attribute": "aria-disabled",
      "reflect": true
    },
    "checked": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Indicates whether the switch item is selected."
      },
      "attribute": "checked",
      "reflect": false,
      "defaultValue": "false"
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Disabled state of the switch item."
      },
      "attribute": "disabled",
      "reflect": false
    },
    "form": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [{
            "name": "internal",
            "text": "Associates the control with a form element."
          }],
        "text": ""
      },
      "attribute": "form",
      "reflect": false
    },
    "ldTabindex": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number | undefined",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [{
            "name": "internal",
            "text": "Tab index of the input."
          }],
        "text": ""
      },
      "attribute": "ld-tabindex",
      "reflect": false
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [{
            "name": "internal",
            "text": "A string specifying a name for the input control. This name is submitted\nalong with the control's value when the form data is submitted."
          }],
        "text": ""
      },
      "attribute": "name",
      "reflect": false
    },
    "readonly": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [{
            "name": "internal",
            "text": "The value is not editable."
          }],
        "text": ""
      },
      "attribute": "readonly",
      "reflect": true
    },
    "required": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [{
            "name": "internal",
            "text": "Set by the outer switch component marking input element as required."
          }],
        "text": ""
      },
      "attribute": "required",
      "reflect": false
    },
    "value": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The input value."
      },
      "attribute": "value",
      "reflect": false
    }
  }; }
  static get states() { return {
    "clonedAttributes": {},
    "hasLabel": {}
  }; }
  static get events() { return [{
      "method": "ldswitchitemchange",
      "name": "ldswitchitemchange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [{
            "name": "internal",
            "text": "Emitted when the input value changed and the element loses focus."
          }],
        "text": ""
      },
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      }
    }, {
      "method": "ldswitchitemfocus",
      "name": "ldswitchitemfocus",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [{
            "name": "internal",
            "text": "Emitted when the input receives focus."
          }],
        "text": ""
      },
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "focusInner": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets focus on the switch item.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "checked",
      "methodName": "updateHiddenInput"
    }, {
      "propName": "form",
      "methodName": "updateHiddenInput"
    }, {
      "propName": "name",
      "methodName": "updateHiddenInput"
    }, {
      "propName": "value",
      "methodName": "updateHiddenInput"
    }]; }
}

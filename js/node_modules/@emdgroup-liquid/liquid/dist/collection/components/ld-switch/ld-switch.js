import { Component, Element, Event, h, Host, Listen, Method, Prop, State, Watch, } from '@stencil/core';
import { getClassNames } from '../../utils/getClassNames';
import { registerAutofocus } from '../../utils/focus';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part fieldset - Container wrapping the legent element and the slot
 * @part legend - The legend element
 */
export class LdSwitch {
  constructor() {
    /** Make each switch item take up as little space as its content requires. */
    this.fitContent = false;
    this.hasFocus = false;
    this.handleItemFocus = () => {
      this.hasFocus = true;
    };
    this.handleFocus = () => {
      this.focusInner();
    };
    this.handleFocusout = () => {
      this.hasFocus = false;
    };
  }
  handleLdSwitchItemChange(ev) {
    ev.stopImmediatePropagation();
    const currentLdSwitchItem = ev.target;
    this.ldswitchchange.emit(currentLdSwitchItem.value);
  }
  /** Sets focus on the radio button. */
  async focusInner() {
    const ldSwitchItems = Array.from(this.el.querySelectorAll('ld-switch-item')).filter((ldSwitchItem) => !ldSwitchItem.disabled);
    const checkedItem = ldSwitchItems.find((ldSwitchItem) => ldSwitchItem.checked);
    if (checkedItem) {
      checkedItem.focusInner();
    }
    else {
      ldSwitchItems[0].focusInner();
    }
  }
  updateSwitchItemProps() {
    const ldSwitchItems = this.el.querySelectorAll('ld-switch-item');
    ldSwitchItems.forEach((ldSwitchItem) => {
      if (this.ariaDisabled) {
        ldSwitchItem.ariaDisabled = this.ariaDisabled;
      }
      if (this.disabled) {
        ldSwitchItem.disabled = this.disabled;
      }
      ldSwitchItem.form = this.form;
      ldSwitchItem.ldTabindex = this.ldTabindex;
      ldSwitchItem.name = this.name;
      ldSwitchItem.readonly = this.readonly;
      ldSwitchItem.required = this.required;
    });
  }
  componentWillLoad() {
    this.updateSwitchItemProps();
    registerAutofocus(this.autofocus);
  }
  render() {
    return (h(Host, { class: getClassNames([
        'ld-switch',
        this.brandColor && `ld-switch--brand-color`,
        this.fitContent && `ld-switch--fit-content`,
        this.size && `ld-switch--${this.size}`,
      ]), onLdswitchitemfocus: this.handleItemFocus, onFocus: this.handleFocus, onFocusout: this.handleFocusout, tabIndex: this.disabled || this.ariaDisabled
        ? this.ldTabindex
        : this.hasFocus
          ? -1
          : this.ldTabindex || 0 },
      h("fieldset", { part: "fieldset" },
        this.legend && h("legend", { part: "legend" }, this.legend),
        h("slot", null))));
  }
  static get is() { return "ld-switch"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-switch.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-switch.css"]
  }; }
  static get properties() { return {
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'sm' | 'md' | 'lg'",
        "resolved": "\"lg\" | \"md\" | \"sm\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Size of the switch."
      },
      "attribute": "size",
      "reflect": false
    },
    "brandColor": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Defines switch custom color"
      },
      "attribute": "brand-color",
      "reflect": false
    },
    "legend": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Defines a description of the contents of the switch component."
      },
      "attribute": "legend",
      "reflect": false
    },
    "autofocus": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Automatically focus the form control when the page is loaded."
      },
      "attribute": "autofocus",
      "reflect": true
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Disabled state of the switch."
      },
      "attribute": "disabled",
      "reflect": false
    },
    "fitContent": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Make each switch item take up as little space as its content requires."
      },
      "attribute": "fit-content",
      "reflect": false,
      "defaultValue": "false"
    },
    "form": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Associates the control with a form element."
      },
      "attribute": "form",
      "reflect": false
    },
    "ariaDisabled": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Alternative disabled state that keeps element focusable"
      },
      "attribute": "aria-disabled",
      "reflect": false
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Used to specify the name of the control."
      },
      "attribute": "name",
      "reflect": false
    },
    "readonly": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The value is not editable."
      },
      "attribute": "readonly",
      "reflect": false
    },
    "required": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set this property to `true` in order to mark the switch as required."
      },
      "attribute": "required",
      "reflect": false
    },
    "ldTabindex": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number | undefined",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Tab index of the input."
      },
      "attribute": "ld-tabindex",
      "reflect": false
    }
  }; }
  static get states() { return {
    "hasFocus": {}
  }; }
  static get events() { return [{
      "method": "ldswitchchange",
      "name": "ldswitchchange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted with the value of the selected switch item."
      },
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "focusInner": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets focus on the radio button.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "ariaDisabled",
      "methodName": "updateSwitchItemProps"
    }, {
      "propName": "disabled",
      "methodName": "updateSwitchItemProps"
    }, {
      "propName": "form",
      "methodName": "updateSwitchItemProps"
    }, {
      "propName": "ldTabindex",
      "methodName": "updateSwitchItemProps"
    }, {
      "propName": "name",
      "methodName": "updateSwitchItemProps"
    }, {
      "propName": "readonly",
      "methodName": "updateSwitchItemProps"
    }, {
      "propName": "required",
      "methodName": "updateSwitchItemProps"
    }]; }
  static get listeners() { return [{
      "name": "ldswitchitemchange",
      "method": "handleLdSwitchItemChange",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}

import { Component, Element, Event, h, Host, Method, Prop, State, Watch, } from '@stencil/core';
import { cloneAttributes } from '../../utils/cloneAttributes';
import { getClassNames } from '../../utils/getClassNames';
import { registerAutofocus } from '../../utils/focus';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part input - Actual input element
 */
export class LdCheckbox {
  constructor() {
    /** Indicates whether the checkbox is checked. */
    this.checked = false;
    this.handleChange = (ev) => {
      this.el.dispatchEvent(new InputEvent('change', ev));
      this.ldchange.emit(this.checked);
    };
    this.handleClick = (ev) => {
      if (this.disabled || this.el.getAttribute('aria-disabled') === 'true') {
        ev.preventDefault();
        return;
      }
      this.checked = !this.checked;
      if (!ev.isTrusted) {
        // This happens, when a click event is dispatched on the host element
        // from the outside i.e. on click on a parent ld-label element.
        this.el.dispatchEvent(new InputEvent('input', { bubbles: true, composed: true }));
        this.handleInput();
        this.el.dispatchEvent(new InputEvent('change', { bubbles: true }));
        this.ldchange.emit(this.checked);
      }
    };
    this.handleInput = () => {
      this.ldinput.emit(this.checked);
    };
  }
  /** Sets focus on the checkbox. */
  async focusInner() {
    if (this.input !== undefined) {
      this.input.focus();
    }
  }
  updateIndeterminate() {
    this.indeterminate = undefined;
  }
  updateHiddenInput() {
    const outerForm = this.el.closest('form');
    if (!this.hiddenInput && this.name && (outerForm || this.form)) {
      this.createHiddenInput();
    }
    if (this.hiddenInput) {
      if (!this.name) {
        this.hiddenInput.remove();
        this.hiddenInput = undefined;
        return;
      }
      this.hiddenInput.name = this.name;
      this.hiddenInput.checked = this.checked;
      if (this.value) {
        this.hiddenInput.value = this.value;
      }
      else {
        this.hiddenInput.removeAttribute('value');
      }
      if (this.form) {
        this.hiddenInput.setAttribute('form', this.form);
      }
      else if (this.hiddenInput.getAttribute('form')) {
        if (outerForm) {
          this.hiddenInput.removeAttribute('form');
        }
        else {
          this.hiddenInput.remove();
          this.hiddenInput = undefined;
        }
      }
    }
  }
  createHiddenInput() {
    this.hiddenInput = document.createElement('input');
    this.hiddenInput.type = 'checkbox';
    this.hiddenInput.style.visibility = 'hidden';
    this.hiddenInput.style.position = 'absolute';
    this.hiddenInput.style.pointerEvents = 'none';
    this.el.appendChild(this.hiddenInput);
  }
  componentWillLoad() {
    this.attributesObserver = cloneAttributes.call(this, ['tone', 'mode']);
    const outerForm = this.el.closest('form');
    if (this.name && (outerForm || this.form)) {
      this.createHiddenInput();
      this.hiddenInput.checked = this.checked;
      this.hiddenInput.name = this.name;
      if (this.form) {
        this.hiddenInput.setAttribute('form', this.form);
      }
      if (this.value) {
        this.hiddenInput.value = this.value;
      }
    }
    registerAutofocus(this.autofocus);
  }
  disconnectedCallback() {
    var _a;
    (_a = this.attributesObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  render() {
    const cl = [
      'ld-checkbox',
      this.mode && `ld-checkbox--${this.mode}`,
      this.tone && `ld-checkbox--${this.tone}`,
      this.invalid && 'ld-checkbox--invalid',
    ];
    return (h(Host, { part: "root", class: getClassNames(cl), onClick: this.handleClick },
      h("input", Object.assign({ type: "checkbox" }, this.clonedAttributes, { checked: this.checked, disabled: this.disabled, onChange: this.handleChange, onInput: this.handleInput, part: "input focusable", ref: (ref) => (this.input = ref), tabIndex: this.ldTabindex, value: this.value })),
      h("svg", { class: "ld-checkbox__check", part: "check", width: "14", height: "14", fill: "none", viewBox: "0 0 14 14" },
        h("path", { d: "M12 4L5.40795 10L2 6.63964", stroke: "currentColor", "stroke-width": "3", "stroke-linecap": "round", "stroke-linejoin": "round" })),
      h("div", { class: "ld-checkbox__box", part: "box" })));
  }
  static get is() { return "ld-checkbox"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-checkbox.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-checkbox.css"]
  }; }
  static get properties() { return {
    "autofocus": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Automatically focus the form control when the page is loaded."
      },
      "attribute": "autofocus",
      "reflect": true
    },
    "checked": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Indicates whether the checkbox is checked."
      },
      "attribute": "checked",
      "reflect": false,
      "defaultValue": "false"
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Disabled state of the checkbox."
      },
      "attribute": "disabled",
      "reflect": false
    },
    "form": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Associates the control with a form element."
      },
      "attribute": "form",
      "reflect": false
    },
    "indeterminate": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Set this property to `true` to indicate that the checkbox's value is neither true nor false.\nThe prop is removed automatically as soon as the checkbox is clicked (if not disabled)."
      },
      "attribute": "indeterminate",
      "reflect": false
    },
    "invalid": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set this property to `true` in order to mark the checkbox visually as invalid."
      },
      "attribute": "invalid",
      "reflect": false
    },
    "ldTabindex": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number | undefined",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Tab index of the input."
      },
      "attribute": "ld-tabindex",
      "reflect": false
    },
    "mode": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'highlight' | 'danger'",
        "resolved": "\"danger\" | \"highlight\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Display mode."
      },
      "attribute": "mode",
      "reflect": false
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Used to specify the name of the control."
      },
      "attribute": "name",
      "reflect": false
    },
    "readonly": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The value is not editable."
      },
      "attribute": "readonly",
      "reflect": false
    },
    "required": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set this property to `true` in order to mark the checkbox as required."
      },
      "attribute": "required",
      "reflect": false
    },
    "tone": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'dark'",
        "resolved": "\"dark\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Checkbox tone. Use `'dark'` on white backgrounds. Default is a light tone."
      },
      "attribute": "tone",
      "reflect": false
    },
    "value": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The input value."
      },
      "attribute": "value",
      "reflect": false
    }
  }; }
  static get states() { return {
    "clonedAttributes": {}
  }; }
  static get events() { return [{
      "method": "ldchange",
      "name": "ldchange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted when the input value changed and the element loses focus."
      },
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      }
    }, {
      "method": "ldinput",
      "name": "ldinput",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted when the input value changed."
      },
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "focusInner": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets focus on the checkbox.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "checked",
      "methodName": "updateIndeterminate"
    }, {
      "propName": "checked",
      "methodName": "updateHiddenInput"
    }, {
      "propName": "form",
      "methodName": "updateHiddenInput"
    }, {
      "propName": "name",
      "methodName": "updateHiddenInput"
    }, {
      "propName": "value",
      "methodName": "updateHiddenInput"
    }]; }
}

import { Component, Element, h, Prop, State } from '@stencil/core';
import { cloneAttributes } from '../../utils/cloneAttributes';
import { getClassNames } from 'src/liquid/utils/getClassNames';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part tag - Actual label element
 */
export class LdLabel {
  constructor() {
    this.handleClick = async (event) => {
      const inputElement = this.el.querySelector('ld-input, ld-textarea, ld-toggle, ld-select, ld-button, ld-checkbox, ld-radio, input, textarea, button, select');
      const clickedInsideInputElement = event.target === inputElement ||
        inputElement.contains(event.target);
      if (inputElement &&
        !clickedInsideInputElement &&
        !inputElement['disabled']) {
        if ('focusInner' in inputElement) {
          await inputElement.focusInner();
        }
        else {
          inputElement.focus();
        }
        inputElement.click();
      }
    };
  }
  componentWillLoad() {
    this.attributesObserver = cloneAttributes.call(this, [
      'align-message',
      'position',
      'size',
    ]);
  }
  disconnectedCallback() {
    var _a;
    (_a = this.attributesObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  render() {
    const cl = getClassNames([
      'ld-label',
      this.alignMessage && 'ld-label--align-message',
      this.position && `ld-label--${this.position}`,
      this.size && `ld-label--${this.size}`,
    ]);
    return (h("label", Object.assign({}, this.clonedAttributes, { class: cl, onClick: this.handleClick, part: "tag" }),
      h("slot", null)));
  }
  static get is() { return "ld-label"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-label.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-label.css"]
  }; }
  static get properties() { return {
    "alignMessage": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Align input message with input position."
      },
      "attribute": "align-message",
      "reflect": false
    },
    "position": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'left' | 'right'",
        "resolved": "\"left\" | \"right\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Relative position to labeled element. Default is top."
      },
      "attribute": "position",
      "reflect": false
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'m'",
        "resolved": "\"m\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Size of the label. Default is small."
      },
      "attribute": "size",
      "reflect": false
    }
  }; }
  static get states() { return {
    "clonedAttributes": {}
  }; }
  static get elementRef() { return "el"; }
}

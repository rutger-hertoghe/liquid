import { Component, Element, Event, h, Method, Prop, Watch, } from '@stencil/core';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part button - Actual button element
 * @part content - Element wrapping the slot
 * @part spacer - Both spacer elements
 * @part spacer-left - Left spacer element
 * @part spacer-right - Right spacer element
 */
export class LdTab {
  /**
   * Focuses the tab
   */
  async focusInner() {
    this.btnRef.focus({ preventScroll: true });
  }
  handleTabClick(event) {
    event.preventDefault();
    this.select();
  }
  emitEvent(newSelected, oldSelected) {
    if (!newSelected || newSelected === oldSelected)
      return;
    this.ldtabselect.emit();
  }
  /** Set selected tab to a certain index */
  async select() {
    if (this.disabled)
      return;
    if (this.btnRef.getAttribute('aria-selected'))
      return;
    this.selected = true;
  }
  render() {
    return (h("button", { "aria-disabled": this.disabled ? 'true' : undefined, "aria-selected": this.selected ? 'true' : undefined, class: "ld-tab", onClick: this.handleTabClick.bind(this), part: "button focusable", ref: (el) => (this.btnRef = el), role: "tab", tabindex: this.selected ? this.ldTabindex : '-1' },
      h("span", { class: "ld-tab__spacer", part: "spacer spacer-left" }),
      h("span", { class: "ld-tab__content", part: "content" },
        h("slot", null)),
      h("span", { class: "ld-tab__spacer", part: "spacer spacer-right" })));
  }
  static get is() { return "ld-tab"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-tab.shadow.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-tab.shadow.css"]
  }; }
  static get properties() { return {
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Disables the tab."
      },
      "attribute": "disabled",
      "reflect": false
    },
    "ldTabindex": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number | undefined",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Tab index of the tab."
      },
      "attribute": "ld-tabindex",
      "reflect": false
    },
    "selected": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "If present, this boolean attribute indicates that the tab is selected."
      },
      "attribute": "selected",
      "reflect": true
    }
  }; }
  static get events() { return [{
      "method": "ldtabselect",
      "name": "ldtabselect",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted with the id of the selected tab."
      },
      "complexType": {
        "original": "undefined",
        "resolved": "undefined",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "focusInner": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Focuses the tab",
        "tags": []
      }
    },
    "select": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Set selected tab to a certain index",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "selected",
      "methodName": "emitEvent"
    }]; }
}

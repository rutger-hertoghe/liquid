import { Component, h, Host, Prop } from '@stencil/core';
import { getClassNames } from '../../utils/getClassNames';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 */
export class LdProgress {
  constructor() {
    /**
     * Set to a decimal value representing the maximum value, and greater
     * than aria-valuemin. If not present, the default value is 100.
     */
    this.ariaValuemax = 100;
    /**
     * Set to a decimal value representing the minimum value, and less
     * than aria-valuemax. If not present, the default value is 0.
     */
    this.ariaValuemin = 0;
  }
  render() {
    const cl = getClassNames([
      'ld-progress',
      this.ariaValuenow === undefined && 'ld-progress--indeterminate',
      this.brandColor && 'ld-progress--brand-color',
      this.pending && 'ld-progress--pending',
      this.steps && 'ld-progress--steps',
    ]);
    return (h(Host, { class: cl, role: "progressbar", style: Object.assign(Object.assign(Object.assign({}, (this.ariaValuemax !== undefined && {
        '--ld-progress-valuemax': this.ariaValuemax + '',
      })), (this.ariaValuemin !== undefined && {
        '--ld-progress-valuemin': this.ariaValuemin + '',
      })), (this.ariaValuenow !== undefined && {
        '--ld-progress-valuenow': this.ariaValuenow + '',
      })) }));
  }
  static get is() { return "ld-progress"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-progress.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-progress.css"]
  }; }
  static get properties() { return {
    "ariaLabeledby": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Defines the string value or identifies the element (or elements)\nthat label the progressbar element providing an accessible name."
      },
      "attribute": "aria-labeledby",
      "reflect": true
    },
    "ariaValuemax": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set to a decimal value representing the maximum value, and greater\nthan aria-valuemin. If not present, the default value is 100."
      },
      "attribute": "aria-valuemax",
      "reflect": true,
      "defaultValue": "100"
    },
    "ariaValuemin": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set to a decimal value representing the minimum value, and less\nthan aria-valuemax. If not present, the default value is 0."
      },
      "attribute": "aria-valuemin",
      "reflect": true,
      "defaultValue": "0"
    },
    "ariaValuenow": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Only present and required if the value is not indeterminate.\nSet to a decimal value between 0, or valuemin if present,\nand aria-valuemax indicating the current value of the progress bar."
      },
      "attribute": "aria-valuenow",
      "reflect": true
    },
    "ariaValuetext": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Assistive technologies often present the value of aria-valuenow\nas a percentage. If this would not be accurate use this property\nto make the progress bar value understandable."
      },
      "attribute": "aria-valuetext",
      "reflect": true
    },
    "brandColor": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Styles the progress bar in a way that it looks good on the\nprimary color of the current theme."
      },
      "attribute": "brand-color",
      "reflect": false
    },
    "pending": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Used to show indeterminate or pending progress state."
      },
      "attribute": "pending",
      "reflect": false
    },
    "steps": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Devides progress bar in multiple progress steps."
      },
      "attribute": "steps",
      "reflect": false
    }
  }; }
}

import { Component, Element, Host, h, Prop, State, Watch } from '@stencil/core';
import { getClassNames } from 'src/liquid/utils/getClassNames';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part list - `ol` element wrapping the slot
 * @part label - `ld-sr-only` element containing the label
 */
export class LdStepper {
  constructor() {
    /** Switch colors for brand background. */
    this.brandColor = false;
    /** Indicates whether the steps should be evenly distributed or fit to their content */
    this.fitContent = false;
    /** Template for the screen-reader label, containing the label of the current step and the steps summary */
    this.labelTemplate = '$1, $2';
    /** Step summary template for the screen-reader label, containing the index of the current step and the overall number of steps */
    this.labelSummaryTemplate = 'step $1 of $2';
    /** Vertical layout */
    this.vertical = false;
    this.updateCurrent = (event) => {
      this.currentIndex = event.detail.index;
      this.currentLabel = event.detail.label;
    };
  }
  getLabel() {
    const summary = this.labelSummaryTemplate
      .replace('$1', String(this.currentIndex + 1))
      .replace('$2', String(this.steps.length));
    return this.currentLabel
      ? this.labelTemplate
        .replace('$1', this.currentLabel)
        .replace('$2', summary)
      : summary;
  }
  propagateProps() {
    this.steps.forEach((ldStep) => {
      ldStep.brandColor = this.brandColor;
      ldStep.size = this.size;
      ldStep.vertical = this.vertical;
    });
  }
  componentWillLoad() {
    this.steps = this.el.querySelectorAll('ld-step');
    this.propagateProps();
  }
  render() {
    return (h(Host, { class: getClassNames([
        'ld-stepper',
        this.fitContent && 'ld-stepper--fit-content',
        this.size && `ld-stepper--${this.size}`,
        this.vertical && 'ld-stepper--vertical',
      ]), role: "navigation", onLdstepselected: this.updateCurrent },
      h("ld-sr-only", null, this.getLabel()),
      h("ol", { part: "list" },
        h("slot", null))));
  }
  static get is() { return "ld-stepper"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-stepper.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-stepper.css"]
  }; }
  static get properties() { return {
    "brandColor": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Switch colors for brand background."
      },
      "attribute": "brand-color",
      "reflect": false,
      "defaultValue": "false"
    },
    "fitContent": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Indicates whether the steps should be evenly distributed or fit to their content"
      },
      "attribute": "fit-content",
      "reflect": false,
      "defaultValue": "false"
    },
    "labelTemplate": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Template for the screen-reader label, containing the label of the current step and the steps summary"
      },
      "attribute": "label-template",
      "reflect": false,
      "defaultValue": "'$1, $2'"
    },
    "labelSummaryTemplate": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Step summary template for the screen-reader label, containing the index of the current step and the overall number of steps"
      },
      "attribute": "label-summary-template",
      "reflect": false,
      "defaultValue": "'step $1 of $2'"
    },
    "size": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "HTMLLdStepElement['size']",
        "resolved": "HTMLLdStepElement",
        "references": {
          "HTMLLdStepElement": {
            "location": "global"
          }
        }
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Step size"
      },
      "attribute": "size",
      "reflect": false
    },
    "vertical": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Vertical layout"
      },
      "attribute": "vertical",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get states() { return {
    "currentLabel": {},
    "currentIndex": {},
    "steps": {}
  }; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "brandColor",
      "methodName": "propagateProps"
    }, {
      "propName": "size",
      "methodName": "propagateProps"
    }, {
      "propName": "vertical",
      "methodName": "propagateProps"
    }]; }
}

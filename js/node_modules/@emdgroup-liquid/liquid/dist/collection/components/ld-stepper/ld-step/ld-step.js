import { Component, Host, h, Prop, Element, Event, Method, State, } from '@stencil/core';
import { cloneAttributes } from '../../../utils/cloneAttributes';
import { getClassNames } from '../../../utils/getClassNames';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part a - actual `a` element
 * @part button - actual `button` element
 * @part description - `span` element wrapping the description text
 * @part focusable - focusable `a` or `button` element, depending on `href` prop
 * @part li - actual `li` element
 */
export class LdStep {
  constructor() {
    /** Switch colors for brand background */
    this.brandColor = false;
    /** Step is the current step */
    this.current = false;
    /** Step is not clickable */
    this.disabled = false;
    /** Step is done */
    this.done = false;
    /** Label for current step (scree-reader only) */
    this.labelCurrent = 'Current';
    /** Label for step that is done (scree-reader only) */
    this.labelDone = 'Done';
    /** Label for step that is optional (scree-reader only) */
    this.labelOptional = 'Optional';
    /** Label for step that was skipped (scree-reader only) */
    this.labelSkipped = 'Skipped';
    /** Additional hint in label for step that is done and was optional (scree-reader only) */
    this.labelWasOptional = 'was optional';
    /** Indicates that the next step is not active */
    this.lastActive = false;
    /** Step can be processed next */
    this.next = false;
    /** Step may be skipped */
    this.optional = false;
    /** Step was skipped */
    this.skipped = false;
    /** Vertical layout */
    this.vertical = false;
    this.handleClick = () => {
      this.ldstepselected.emit({
        index: Array.from(this.el.parentElement.children).findIndex((child) => child === this.el),
        label: this.el.textContent,
      });
    };
  }
  /** Sets focus on the step */
  async focusInner() {
    var _a;
    (_a = this.focusableElement) === null || _a === void 0 ? void 0 : _a.focus();
  }
  componentWillLoad() {
    this.attributesObserver = cloneAttributes.call(this, [
      'aria-current',
      'aria-disabled',
      'brand-color',
      'current',
      'description',
      'disabled',
      'done',
      'href',
      'icon',
      'label-current',
      'label-done',
      'label-optional',
      'label-skipped',
      'label-was-optional',
      'last-active',
      'ld-tabindex',
      'next',
      'optional',
      'size',
      'skipped',
      'tabindex',
      'type',
      'vertical',
    ]);
  }
  componentDidLoad() {
    if (this.current) {
      this.handleClick();
    }
  }
  disconnectedCallback() {
    var _a;
    (_a = this.attributesObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  render() {
    const FocusableElement = this.href ? 'a' : 'button';
    return (h(Host, null,
      h("li", { class: getClassNames([
          'ld-step',
          this.brandColor && 'ld-step--brand-color',
          this.current && 'ld-step--current',
          this.done && 'ld-step--done',
          this.icon && 'ld-step--custom-icon',
          (this.done || this.icon) && 'ld-step--with-icon',
          this.lastActive && 'ld-step--last-active',
          this.next && 'ld-step--next',
          this.optional && 'ld-step--optional',
          this.size && `ld-step--${this.size}`,
          this.skipped && 'ld-step--skipped',
          this.vertical && 'ld-step--vertical',
        ]), part: "li", role: "listitem" },
        !this.current && this.done && (h("ld-sr-only", null,
          this.labelDone,
          this.optional ? ` (${this.labelWasOptional})` : '',
          ":",
          ' ')),
        !this.current && this.optional && !this.done && !this.skipped && (h("ld-sr-only", null,
          this.labelOptional,
          ": ")),
        !this.current && this.skipped && (h("ld-sr-only", null,
          this.labelSkipped,
          ": ")),
        this.current && (h("ld-sr-only", null,
          this.labelCurrent,
          this.optional ? ` (${this.labelOptional})` : '',
          ":",
          ' ')),
        h(FocusableElement, Object.assign({}, this.clonedAttributes, { "aria-current": this.current ? 'step' : undefined, "aria-disabled": this.disabled ? 'true' : undefined, class: "ld-step__focusable-element", href: !this.disabled && !this.current ? this.href : undefined, onClick: !this.disabled && !this.current ? this.handleClick : undefined, part: `${FocusableElement} focusable`, ref: (ref) => (this.focusableElement = ref), tabIndex: this.ldTabindex, type: FocusableElement === 'button' ? 'button' : undefined }),
          h("slot", null)),
        (this.done || this.icon) && (h("ld-icon", { name: this.icon || 'checkmark' })),
        this.description && this.vertical && (h("span", { class: "ld-step__description", part: "description" }, this.description)))));
  }
  static get is() { return "ld-step"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-step.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-step.css"]
  }; }
  static get properties() { return {
    "brandColor": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Switch colors for brand background"
      },
      "attribute": "brand-color",
      "reflect": false,
      "defaultValue": "false"
    },
    "current": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Step is the current step"
      },
      "attribute": "current",
      "reflect": false,
      "defaultValue": "false"
    },
    "description": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Description text to display below the step name (vertical mode only)"
      },
      "attribute": "description",
      "reflect": false
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Step is not clickable"
      },
      "attribute": "disabled",
      "reflect": false,
      "defaultValue": "false"
    },
    "done": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Step is done"
      },
      "attribute": "done",
      "reflect": false,
      "defaultValue": "false"
    },
    "href": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Link to the step (makes the step an anchor instead of a button)"
      },
      "attribute": "href",
      "reflect": false
    },
    "icon": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "HTMLLdIconElement['name']",
        "resolved": "HTMLLdIconElement",
        "references": {
          "HTMLLdIconElement": {
            "location": "global"
          }
        }
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Permanently show a custom icon inside the dot"
      },
      "attribute": "icon",
      "reflect": false
    },
    "labelCurrent": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Label for current step (scree-reader only)"
      },
      "attribute": "label-current",
      "reflect": false,
      "defaultValue": "'Current'"
    },
    "labelDone": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Label for step that is done (scree-reader only)"
      },
      "attribute": "label-done",
      "reflect": false,
      "defaultValue": "'Done'"
    },
    "labelOptional": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Label for step that is optional (scree-reader only)"
      },
      "attribute": "label-optional",
      "reflect": false,
      "defaultValue": "'Optional'"
    },
    "labelSkipped": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Label for step that was skipped (scree-reader only)"
      },
      "attribute": "label-skipped",
      "reflect": false,
      "defaultValue": "'Skipped'"
    },
    "labelWasOptional": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Additional hint in label for step that is done and was optional (scree-reader only)"
      },
      "attribute": "label-was-optional",
      "reflect": false,
      "defaultValue": "'was optional'"
    },
    "lastActive": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Indicates that the next step is not active"
      },
      "attribute": "last-active",
      "reflect": false,
      "defaultValue": "false"
    },
    "ldTabindex": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number | undefined",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Tab index of the step"
      },
      "attribute": "ld-tabindex",
      "reflect": false
    },
    "next": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Step can be processed next"
      },
      "attribute": "next",
      "reflect": false,
      "defaultValue": "false"
    },
    "optional": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Step may be skipped"
      },
      "attribute": "optional",
      "reflect": false,
      "defaultValue": "false"
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'sm' | 'lg'",
        "resolved": "\"lg\" | \"sm\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Step size"
      },
      "attribute": "size",
      "reflect": false
    },
    "skipped": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Step was skipped"
      },
      "attribute": "skipped",
      "reflect": false,
      "defaultValue": "false"
    },
    "vertical": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Vertical layout"
      },
      "attribute": "vertical",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get states() { return {
    "clonedAttributes": {}
  }; }
  static get events() { return [{
      "method": "ldstepselected",
      "name": "ldstepselected",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted when the focusable element is clicked and step is neither current nor disabled"
      },
      "complexType": {
        "original": "SelectedDetail",
        "resolved": "{ index: number; label: string; }",
        "references": {
          "SelectedDetail": {
            "location": "local"
          }
        }
      }
    }]; }
  static get methods() { return {
    "focusInner": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets focus on the step",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "el"; }
}

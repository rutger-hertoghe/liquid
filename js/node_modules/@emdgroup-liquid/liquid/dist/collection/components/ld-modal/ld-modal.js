import { Component, Element, Event, h, Host, Listen, Method, Prop, Watch, } from '@stencil/core';
import { getClassNames } from '../../utils/getClassNames';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part dialog - Actual `dialog` element
 * @part content - `div` element wrapping the default slot
 * @part footer - `footer` element
 * @part header - `header` element
 */
export class LdModal {
  constructor() {
    /** The modal is cancelable by default. However, you can change this using this prop. */
    this.cancelable = true;
    /** Use a blurry backdrop. */
    this.blurryBackdrop = false;
    this.handleClose = () => {
      // When the dialog is closed with the Esc key we need to
      // update the open prop explicitly.
      this.open = false;
    };
    this.handleCancel = (ev) => {
      if (!this.cancelable) {
        ev.preventDefault();
      }
    };
    this.handleClick = (ev) => {
      if (this.cancelable && ev.target.tagName === 'DIALOG') {
        this.close();
      }
    };
    this.handleTransitionEnd = () => {
      if (this.open) {
        this.ldmodalopened.emit();
      }
      else {
        this.ldmodalclosed.emit();
      }
    };
  }
  /** Opens the modal dialog. */
  async showModal() {
    this.open = true;
  }
  /** Closes the modal dialog. */
  async close() {
    this.open = false;
  }
  handleKeyDown(ev) {
    if (ev.key === 'Escape' && this.cancelable) {
      this.open = false;
    }
  }
  onOpenChange(open) {
    // Calling the showModal and close methods on the dialog element here
    // is super important, because these make the native focus trap and
    // the backdrop feature work.
    // TODO: Remove @ts-ignore comments as soon as TS types get updated.
    if (open) {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      this.dialogRef.showModal();
      this.ldmodalopening.emit();
    }
    else {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      this.dialogRef.close();
      this.ldmodalclosing.emit();
    }
  }
  componentDidLoad() {
    this.dialogRef.addEventListener('cancel', this.handleCancel);
  }
  disconnectedCallback() {
    this.dialogRef.removeEventListener('cancel', this.handleCancel);
  }
  render() {
    const cl = getClassNames([
      'ld-modal',
      this.blurryBackdrop && 'ld-modal--blurry-backdrop',
    ]);
    return (h(Host, { class: cl },
      h("dialog", { onClick: this.handleClick, onClose: this.handleClose, onTransitionEnd: this.handleTransitionEnd, open: this.open, part: "dialog", ref: (el) => (this.dialogRef = el) },
        h("header", { class: "ld-modal__header", part: "header" },
          h("slot", { name: "header" }),
          this.cancelable && (h("button", { class: "ld-modal__x", "aria-label": "Dismiss", onClick: this.close.bind(this) }))),
        h("div", { class: "ld-modal__content", part: "content" },
          h("slot", null)),
        h("footer", { class: "ld-modal__footer", part: "footer" },
          h("slot", { name: "footer" })))));
  }
  static get is() { return "ld-modal"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-modal.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-modal.css"]
  }; }
  static get properties() { return {
    "cancelable": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The modal is cancelable by default. However, you can change this using this prop."
      },
      "attribute": "cancelable",
      "reflect": false,
      "defaultValue": "true"
    },
    "open": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Indicates that the modal dialog is active and can be interacted with."
      },
      "attribute": "open",
      "reflect": true
    },
    "blurryBackdrop": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Use a blurry backdrop."
      },
      "attribute": "blurry-backdrop",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get events() { return [{
      "method": "ldmodalopening",
      "name": "ldmodalopening",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted when modal is opening (before transition)."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "ldmodalopened",
      "name": "ldmodalopened",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted when modal has opened (after transition)."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "ldmodalclosing",
      "name": "ldmodalclosing",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted when modal is closing (before transition)."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "ldmodalclosed",
      "name": "ldmodalclosed",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted when modal has closed (after transition)."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "showModal": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Opens the modal dialog.",
        "tags": []
      }
    },
    "close": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Closes the modal dialog.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "open",
      "methodName": "onOpenChange"
    }]; }
  static get listeners() { return [{
      "name": "keydown",
      "method": "handleKeyDown",
      "target": "window",
      "capture": false,
      "passive": true
    }]; }
}

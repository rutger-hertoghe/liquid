import { Component, h, Host, Prop } from '@stencil/core';
import { getClassNames } from '../../utils/getClassNames';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 */
export class LdLoading {
  constructor() {
    /** Used as svg title element content. */
    this.label = 'Loading';
  }
  render() {
    const cl = getClassNames([
      'ld-loading',
      this.neutral && 'ld-loading--neutral',
      this.paused && 'ld-loading--paused',
    ]);
    return (h(Host, { class: cl },
      h("svg", { viewBox: "0 0 100 100", preserveAspectRatio: "xMidYMid meet" },
        h("title", null, this.label),
        h("circle", { cx: "50", cy: "50", r: "50" }),
        h("g", null,
          h("circle", { cx: "50", cy: "50", r: "50" }),
          h("circle", { cx: "50", cy: "50", r: "50" }),
          h("circle", { cx: "50", cy: "50", r: "50" }),
          !this.paused && (
          // When zooming in safari CSS transforms get messed up.
          // That is why we need to use an SVG animation here.
          h("animateTransform", { attributeName: "transform", attributeType: "XML", type: "rotate", from: "0 50 50", to: "360 50 50", dur: "0.9s", repeatCount: "indefinite" }))))));
  }
  static get is() { return "ld-loading"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-loading.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-loading.css"]
  }; }
  static get properties() { return {
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Used as svg title element content."
      },
      "attribute": "label",
      "reflect": false,
      "defaultValue": "'Loading'"
    },
    "neutral": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Uses neutral colors."
      },
      "attribute": "neutral",
      "reflect": false
    },
    "paused": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Pauses all animations."
      },
      "attribute": "paused",
      "reflect": false
    }
  }; }
}

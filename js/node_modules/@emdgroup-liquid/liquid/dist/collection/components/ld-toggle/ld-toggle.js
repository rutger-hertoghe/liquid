import { Component, Element, Event, h, Host, Method, Prop, State, Watch, } from '@stencil/core';
import { getClassNames } from '../../utils/getClassNames';
import { cloneAttributes } from '../../utils/cloneAttributes';
import { registerAutofocus } from '../../utils/focus';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part input - Actual input element
 * @part knob - Toggle knob
 * @part icon-wrapper - Both wrappers of icons
 * @part icon-wrapper-start - Wrapper of the start icon
 * @part icon-wrapper-end - Wrapper of the end icon
 */
export class LdToggle {
  constructor() {
    /** Indicates whether the toggle is "on". */
    this.checked = false;
    this.handleChange = (event) => {
      this.el.dispatchEvent(new InputEvent('change', event));
      this.ldchange.emit(this.checked);
    };
    this.handleClick = (event) => {
      if (this.ariaDisabled) {
        event.preventDefault();
        return;
      }
      this.checked = !this.checked;
      if (!event.isTrusted) {
        // This happens, when a click event is dispatched on the host element
        // from the outside i.e. on click on a parent ld-label element.
        this.el.dispatchEvent(new InputEvent('input', { bubbles: true, composed: true }));
        this.handleInput();
        this.el.dispatchEvent(new InputEvent('change', { bubbles: true }));
        this.ldchange.emit(this.checked);
      }
    };
    this.handleInput = () => {
      this.ldinput.emit(this.checked);
    };
  }
  /** Sets focus on the toggle. */
  async focusInner() {
    if (this.input !== undefined) {
      this.input.focus();
    }
  }
  updateHiddenInput() {
    const outerForm = this.el.closest('form');
    if (!this.hiddenInput && this.name && (outerForm || this.form)) {
      this.createHiddenInput();
    }
    if (this.hiddenInput) {
      if (!this.name) {
        this.hiddenInput.remove();
        this.hiddenInput = undefined;
        return;
      }
      this.hiddenInput.name = this.name;
      this.hiddenInput.checked = this.checked;
      if (this.value) {
        this.hiddenInput.value = this.value;
      }
      else {
        this.hiddenInput.removeAttribute('value');
      }
      if (this.form) {
        this.hiddenInput.setAttribute('form', this.form);
      }
      else if (this.hiddenInput.getAttribute('form')) {
        if (outerForm) {
          this.hiddenInput.removeAttribute('form');
        }
        else {
          this.hiddenInput.remove();
          this.hiddenInput = undefined;
        }
      }
    }
  }
  createHiddenInput() {
    this.hiddenInput = document.createElement('input');
    this.hiddenInput.type = 'checkbox';
    this.hiddenInput.style.visibility = 'hidden';
    this.hiddenInput.style.position = 'absolute';
    this.hiddenInput.style.pointerEvents = 'none';
    this.el.appendChild(this.hiddenInput);
  }
  componentWillLoad() {
    this.attributesObserver = cloneAttributes.call(this, ['size']);
    this.hasIcons =
      !!this.el.querySelector('[slot="icon-start"]') ||
        !!this.el.querySelector('[slot="icon-end"]');
    const outerForm = this.el.closest('form');
    if (this.name && (outerForm || this.form)) {
      this.createHiddenInput();
      this.hiddenInput.checked = this.checked;
      this.hiddenInput.name = this.name;
      if (this.form) {
        this.hiddenInput.setAttribute('form', this.form);
      }
      if (this.value) {
        this.hiddenInput.value = this.value;
      }
    }
    registerAutofocus(this.autofocus);
  }
  disconnectedCallback() {
    var _a;
    (_a = this.attributesObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  render() {
    return (h(Host, { class: getClassNames([
        'ld-toggle',
        this.size === 'lg' && 'ld-toggle--lg',
        this.hasIcons && 'ld-toggle--with-icons',
      ]), onClick: this.handleClick },
      h("input", Object.assign({}, this.clonedAttributes, { "aria-disabled": this.ariaDisabled, checked: this.checked, disabled: this.disabled, onChange: this.handleChange, onInput: this.handleInput, part: "input focusable", ref: (ref) => (this.input = ref), required: this.required, tabIndex: this.ldTabindex, type: "checkbox", value: this.value })),
      h("span", { class: "ld-toggle__knob", part: "knob" }),
      this.hasIcons && (h("div", { class: "ld-toggle__icon-start", part: "icon-wrapper icon-wrapper-start" },
        h("slot", { name: "icon-start" }))),
      this.hasIcons && (h("div", { class: "ld-toggle__icon-end", part: "icon-wrapper icon-wrapper-end" },
        h("slot", { name: "icon-end" })))));
  }
  static get is() { return "ld-toggle"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-toggle.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-toggle.css"]
  }; }
  static get properties() { return {
    "ariaDisabled": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Alternative disabled state that keeps element focusable"
      },
      "attribute": "aria-disabled",
      "reflect": false
    },
    "autofocus": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Automatically focus the form control when the page is loaded."
      },
      "attribute": "autofocus",
      "reflect": true
    },
    "checked": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Indicates whether the toggle is \"on\"."
      },
      "attribute": "checked",
      "reflect": false,
      "defaultValue": "false"
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Disabled state of the checkbox."
      },
      "attribute": "disabled",
      "reflect": false
    },
    "form": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Associates the control with a form element."
      },
      "attribute": "form",
      "reflect": false
    },
    "invalid": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set this property to `true` in order to mark the checkbox visually as invalid."
      },
      "attribute": "invalid",
      "reflect": false
    },
    "ldTabindex": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number | undefined",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Tab index of the input."
      },
      "attribute": "ld-tabindex",
      "reflect": false
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Used to specify the name of the control."
      },
      "attribute": "name",
      "reflect": false
    },
    "readonly": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The value is not editable."
      },
      "attribute": "readonly",
      "reflect": false
    },
    "required": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set this property to `true` in order to mark the checkbox as required."
      },
      "attribute": "required",
      "reflect": false
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'sm' | 'lg'",
        "resolved": "\"lg\" | \"sm\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Size of the toggle."
      },
      "attribute": "size",
      "reflect": false
    },
    "value": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The input value."
      },
      "attribute": "value",
      "reflect": false
    }
  }; }
  static get states() { return {
    "clonedAttributes": {}
  }; }
  static get events() { return [{
      "method": "ldchange",
      "name": "ldchange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted when the input value changed and the element loses focus."
      },
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      }
    }, {
      "method": "ldinput",
      "name": "ldinput",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted when the input value changed."
      },
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "focusInner": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets focus on the toggle.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "checked",
      "methodName": "updateHiddenInput"
    }, {
      "propName": "name",
      "methodName": "updateHiddenInput"
    }, {
      "propName": "value",
      "methodName": "updateHiddenInput"
    }]; }
}

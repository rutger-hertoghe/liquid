import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-51c17921.js';
import { g as getClassNames } from './getClassNames-3dd92841.js';
import { r as registerAutofocus } from './focus-316917b8.js';

const ldSwitchCss = ".ld-switch,:host{--ld-switch-item-icon-size:1.25rem;--ld-switch-item-icon-size-sm:1rem;--ld-switch-item-icon-size-lg:1.5rem;--ld-switch-item-icon-margin-x:-0.25rem;--ld-switch-item-icon-margin-x-sm:-0.125rem;--ld-switch-item-icon-margin-x-lg:-0.5rem;--ld-switch-item-justify-content:center;--ld-switch-item-padding-x:0.875rem;--ld-switch-item-padding-y:0.625rem;--ld-switch-item-padding-x-sm:0.625rem;--ld-switch-item-padding-y-sm:0.4375rem;--ld-switch-item-padding-x-lg:1.3125rem;--ld-switch-item-padding-y-lg:0.85rem;--ld-switch-item-gap:0.875rem;--ld-switch-item-gap-sm:0.625rem;--ld-switch-item-gap-lg:1.1875rem;--ld-switch-font:var(--ld-typo-body-m);--ld-switch-font-sm:var(--ld-typo-body-s);--ld-switch-font-lg:var(--ld-typo-body-l);--ld-switch-bg-col:var(--ld-thm-primary-alpha-low);--ld-switch-bg-col-hover:var(--ld-thm-primary-hover);--ld-switch-bg-col-active:var(--ld-thm-primary-active);--ld-switch-bg-col-focus:var(--ld-thm-primary-focus);--ld-switch-item-col:var(--ld-thm-primary-hover);--ld-switch-item-label-bg-col:var(--ld-col-wht);--ld-switch-selected-col:var(--ld-col-wht);--ld-switch-selected-bg-col:var(--ld-thm-primary)}.ld-switch legend,:host legend{clip:rect(0,0,0,0);border-width:0;height:var(--ld-sp-1);padding:0;position:absolute;width:var(--ld-sp-1)}.ld-switch,:host fieldset{border:0;border-radius:var(--ld-br-m);display:inline-grid;grid-auto-columns:minmax(min-content,1fr);grid-auto-flow:column;margin:0;min-width:auto;overflow:hidden;padding:0;position:relative}.ld-switch--fit-content,:host(.ld-switch--fit-content) fieldset{--ld-switch-item-justify-content:flex-start;grid-auto-columns:minmax(0,auto)}:host fieldset{width:100%}.ld-switch--sm,:host(.ld-switch--sm){--ld-switch-font:var(--ld-switch-font-sm);--ld-switch-item-gap:var(--ld-switch-item-gap-sm);--ld-switch-item-icon-margin-x:var(--ld-switch-item-icon-margin-x-sm);--ld-switch-item-icon-size:var(--ld-switch-item-icon-size-sm);--ld-switch-item-padding-x:var(--ld-switch-item-padding-x-sm);--ld-switch-item-padding-y:var(--ld-switch-item-padding-y-sm)}.ld-switch--lg,:host(.ld-switch--lg){--ld-switch-font:var(--ld-switch-font-lg);--ld-switch-item-gap:var(--ld-switch-item-gap-lg);--ld-switch-item-icon-margin-x:var(--ld-switch-item-icon-margin-x-lg);--ld-switch-item-icon-size:var(--ld-switch-item-icon-size-lg);--ld-switch-item-padding-x:var(--ld-switch-item-padding-x-lg);--ld-switch-item-padding-y:var(--ld-switch-item-padding-y-lg)}.ld-switch--brand-color,:host(.ld-switch--brand-color){--ld-switch-item-col:var(--ld-col-wht);--ld-switch-item-bg-col:var(--ld-col-wht-alpha-low);--ld-switch-item-label-bg-col:var(--ld-thm-primary);--ld-switch-item-bg-col-hover:var(--ld-col-wht-alpha-high);--ld-switch-item-bg-col-active:var(--ld-col-wht-alpha-medium);--ld-switch-item-bg-col-focus:var(--ld-col-wht-alpha-high);--ld-switch-item-bg-col-selected:var(--ld-col-wht);--ld-switch-item-col-selected:var(--ld-thm-primary);--ld-switch-item-col-active:var(--ld-switch-item-col-selected)}";

const LdSwitch = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.ldswitchchange = createEvent(this, "ldswitchchange", 7);
    /** Make each switch item take up as little space as its content requires. */
    this.fitContent = false;
    this.hasFocus = false;
    this.handleItemFocus = () => {
      this.hasFocus = true;
    };
    this.handleFocus = () => {
      this.focusInner();
    };
    this.handleFocusout = () => {
      this.hasFocus = false;
    };
  }
  handleLdSwitchItemChange(ev) {
    ev.stopImmediatePropagation();
    const currentLdSwitchItem = ev.target;
    this.ldswitchchange.emit(currentLdSwitchItem.value);
  }
  /** Sets focus on the radio button. */
  async focusInner() {
    const ldSwitchItems = Array.from(this.el.querySelectorAll('ld-switch-item')).filter((ldSwitchItem) => !ldSwitchItem.disabled);
    const checkedItem = ldSwitchItems.find((ldSwitchItem) => ldSwitchItem.checked);
    if (checkedItem) {
      checkedItem.focusInner();
    }
    else {
      ldSwitchItems[0].focusInner();
    }
  }
  updateSwitchItemProps() {
    const ldSwitchItems = this.el.querySelectorAll('ld-switch-item');
    ldSwitchItems.forEach((ldSwitchItem) => {
      if (this.ariaDisabled) {
        ldSwitchItem.ariaDisabled = this.ariaDisabled;
      }
      if (this.disabled) {
        ldSwitchItem.disabled = this.disabled;
      }
      ldSwitchItem.form = this.form;
      ldSwitchItem.ldTabindex = this.ldTabindex;
      ldSwitchItem.name = this.name;
      ldSwitchItem.readonly = this.readonly;
      ldSwitchItem.required = this.required;
    });
  }
  componentWillLoad() {
    this.updateSwitchItemProps();
    registerAutofocus(this.autofocus);
  }
  render() {
    return (h(Host, { class: getClassNames([
        'ld-switch',
        this.brandColor && `ld-switch--brand-color`,
        this.fitContent && `ld-switch--fit-content`,
        this.size && `ld-switch--${this.size}`,
      ]), onLdswitchitemfocus: this.handleItemFocus, onFocus: this.handleFocus, onFocusout: this.handleFocusout, tabIndex: this.disabled || this.ariaDisabled
        ? this.ldTabindex
        : this.hasFocus
          ? -1
          : this.ldTabindex || 0 }, h("fieldset", { part: "fieldset" }, this.legend && h("legend", { part: "legend" }, this.legend), h("slot", null))));
  }
  get el() { return getElement(this); }
  static get watchers() { return {
    "ariaDisabled": ["updateSwitchItemProps"],
    "disabled": ["updateSwitchItemProps"],
    "form": ["updateSwitchItemProps"],
    "ldTabindex": ["updateSwitchItemProps"],
    "name": ["updateSwitchItemProps"],
    "readonly": ["updateSwitchItemProps"],
    "required": ["updateSwitchItemProps"]
  }; }
};
LdSwitch.style = ldSwitchCss;

export { LdSwitch as ld_switch };

import { r as registerInstance, h, H as Host, g as getElement } from './index-51c17921.js';
import { g as getClassNames } from './getClassNames-3dd92841.js';

const ldSidenavToggleOutsideShadowCss = ":host{--ld-sidenav-toggle-outside-height:3.125rem;--ld-sidenav-toggle-outside-col:var(--ld-col-wht);--ld-sidenav-toggle-outside-bg-col:var(--ld-thm-primary);--ld-sidenav-toggle-outside-bg-col-hover:var(--ld-thm-primary-hover);--ld-sidenav-toggle-outside-bg-col-focus:var(--ld-thm-primary-focus);--ld-sidenav-toggle-outside-bg-col-active:var(--ld-thm-primary-active)}@media (prefers-reduced-motion:no-preference){:host{--ld-sidenav-transition-duration-collapse-expand:0.2s}}:host{align-items:center;align-self:flex-start;display:flex;height:var(--ld-sidenav-toggle-outside-height);justify-content:center;position:var(--ld-sidenav-toggle-outside-position,fixed)}:host(.ld-sidenav-toggle-outside--left){left:0}:host(.ld-sidenav-toggle-outside--right){right:0}.ld-sidenav-toggle-outside__toggle{-webkit-touch-callout:none;aspect-ratio:1;background-color:initial;border:0;border-radius:var(--ld-br-l);color:var(--ld-sidenav-toggle-outside-col);cursor:pointer;display:grid;margin:var(--ld-sp-2) var(--ld-sp-16) auto;outline:none;padding-bottom:0;padding-top:0;place-content:center;touch-action:manipulation;transition:visibility 0s calc(var(--ld-sidenav-transition-duration-collapse-expand)*2) linear,transform var(--ld-sidenav-transition-duration-collapse-expand) ease;visibility:hidden;will-change:transform}.ld-sidenav-toggle-outside__toggle:before{background-color:var(--ld-sidenav-toggle-outside-bg-col);border-radius:inherit;box-shadow:var(--ld-shadow-stacked);content:\"\";display:block;inset:0;position:absolute}.ld-sidenav-toggle-outside__toggle:after{border-radius:inherit;content:\"\";display:block;inset:calc(var(--ld-sp-6)*-1);position:absolute}.ld-sidenav-toggle-outside__toggle:where(:focus:focus-visible){--ld-sidenav-toggle-outside-bg-col:var(\n      --ld-sidenav-toggle-outside-bg-col-focus\n    )}@media (hover:hover){.ld-sidenav-toggle-outside__toggle:where(:hover){--ld-sidenav-toggle-outside-bg-col:var(\n        --ld-sidenav-toggle-outside-bg-col-hover\n      )}}.ld-sidenav-toggle-outside__toggle:where(:active),.ld-sidenav-toggle-outside__toggle:where(:active:focus-visible){--ld-sidenav-toggle-outside-bg-col:var(\n      --ld-sidenav-toggle-outside-bg-col-active\n    )}:host(.ld-sidenav-toggle-outside--closable) .ld-sidenav-toggle-outside__toggle,:host(.ld-sidenav-toggle-outside--collapsed-fully) .ld-sidenav-toggle-outside__toggle{transition:transform var(--ld-sidenav-transition-duration-collapse-expand) ease;visibility:inherit}:host(.ld-sidenav-toggle-outside--collapsed) .ld-sidenav-toggle-outside__toggle{transform:none}:host(.ld-sidenav-toggle-outside--collapsed.ld-sidenav-toggle-outside--right) .ld-sidenav-toggle-outside__toggle{transform:translateX(calc((var(--ld-sidenav-width) - var(--ld-sidenav-width-collapsed))*-1))}.ld-sidenav-toggle-outside__icon{position:relative}:host(.ld-sidenav-toggle-outside--right:not(.ld-sidenav-toggle-outside--collapsed)) .ld-sidenav-toggle-outside__icon{transform:scaleX(-100%)}";

const LdSidenavToggleOutside = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** Label to be used for the toggle button when navigation is collapsed. */
    this.labelExpand = 'Expand side navigation';
    this.sidenavAlignement = 'left';
    this.toggleSidenavCollapsedState = () => {
      this.sidenav.toggle();
    };
  }
  /** Sets focus on the radio button. */
  async focusInner() {
    this.toggle.focus();
  }
  handleSidenavCollapsedChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    this.sidenavCollapsed = ev.detail.collapsed;
    this.sidenavCollapsedFully = ev.detail.collapsed && ev.detail.fully;
    this.tooltipRef.hideTooltip();
  }
  handleSidenavBreakpointChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    this.sidenavClosable = ev.detail;
    this.tooltipRef.hideTooltip();
  }
  componentWillLoad() {
    this.sidenav = this.el.nextElementSibling;
    if (!this.sidenav || this.sidenav.tagName !== 'LD-SIDENAV') {
      throw new Error(`The ld-sidenav-toggle-outside component is expecting to have an ld-sidenav component as its next element sibling, but instead there was: ${this.sidenav}`);
    }
    this.sidenavAlignement = this.sidenav.align;
  }
  render() {
    const cl = getClassNames([
      'ld-sidenav-toggle-outside',
      `ld-sidenav-toggle-outside--${this.sidenavAlignement}`,
      this.sidenavClosable && 'ld-sidenav-toggle-outside--closable',
      this.sidenavCollapsedFully &&
        'ld-sidenav-toggle-outside--collapsed-fully',
    ]);
    return (h(Host, { class: cl }, h("ld-tooltip", { arrow: true, size: "sm", ref: (el) => (this.tooltipRef = el), "show-delay": "1000", position: this.sidenavAlignement === 'left' ? 'right middle' : 'left middle', tag: "span" }, h("button", { slot: "trigger", role: "switch", "brand-color": true, "aria-checked": this.sidenavCollapsed ? 'false' : 'true', class: "ld-sidenav-toggle-outside__toggle", onClick: this.toggleSidenavCollapsedState, part: "toggle focusable", ref: (ref) => (this.toggle = ref), tabIndex: this.ldTabindex }, h("ld-icon", { class: "ld-sidenav-toggle-outside__icon", name: "sidenav-right", part: "toggle-icon" }), h("ld-sr-only", null, this.labelExpand)), h("ld-typo", null, this.labelExpand))));
  }
  get el() { return getElement(this); }
};
LdSidenavToggleOutside.style = ldSidenavToggleOutsideShadowCss;

export { LdSidenavToggleOutside as ld_sidenav_toggle_outside };

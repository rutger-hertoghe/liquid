import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { g as getClassNames } from './getClassNames.js';
import { c as closest } from './closest.js';
import { d as defineCustomElement$1 } from './ld-sidenav-separator2.js';

const ldSidenavScrollerInternalShadowCss = ":host{--ld-scroll-shadow-height:1.5rem;--ld-scroll-shadow-intensity:0.1;display:flex;flex-direction:column;height:100%;overflow-x:hidden;overflow-y:auto;overflow:hidden auto;overscroll-behavior:none;padding-right:var(--ld-sp-32);scrollbar-width:none;width:100%}:host::-webkit-scrollbar,:host::-webkit-scrollbar-thumb{display:none}:host ::slotted(ld-sidenav-heading:first-child),:host ::slotted(ld-sidenav-navitem:first-child){margin-top:var(--ld-sidenav-padding-y)}:host ::slotted(ld-sidenav-navitem){margin-bottom:var(--ld-sidenav-padding-y);will-change:opacity}:host(.ld-sidenav-scroller-internal--relative){position:relative}:host(.ld-sidenav-scroller-internal--relative) .ld-sidenav-scroller-internal__hr-bottom,:host(.ld-sidenav-scroller-internal--relative) .ld-sidenav-scroller-internal__hr-top{position:sticky}:host(.ld-sidenav-scroller-internal--collapsed) .ld-sidenav-scroller-internal__shadow-bottom,:host(.ld-sidenav-scroller-internal--collapsed) .ld-sidenav-scroller-internal__shadow-top{transform:translateX(calc(var(--ld-sidenav-translate-x-direction)*(50% - var(--ld-sidenav-width-collapsed)*0.5)))}.ld-sidenav-scroller-internal__shadow-bottom,.ld-sidenav-scroller-internal__shadow-top{height:0;left:0;opacity:0;pointer-events:none;position:sticky;transition:opacity var(--ld-sidenav-transition-duration) linear,transform var(--ld-sidenav-transition-duration) ease;width:100%;z-index:1}.ld-sidenav-scroller-internal__shadow-bottom:after,.ld-sidenav-scroller-internal__shadow-top:after{content:\"\";display:block;height:var(--ld-scroll-shadow-height);width:100%}.ld-sidenav-scroller-internal__shadow-top{top:0}.ld-sidenav-scroller-internal__shadow-top:after{background:radial-gradient(farthest-side at 50% 0,rgb(0,0,0,var(--ld-scroll-shadow-intensity)),#0000) 0 100% no-repeat}.ld-sidenav-scroller-internal__shadow-bottom{top:100%}.ld-sidenav-scroller-internal__shadow-bottom:after{background:radial-gradient(farthest-side at 50% 100%,rgb(0,0,0,var(--ld-scroll-shadow-intensity)),#0000) 0 100% no-repeat;transform:translateY(-100%)}.ld-sidenav-scroller-internal__hr-bottom,.ld-sidenav-scroller-internal__hr-top{margin-bottom:0;margin-top:0;position:absolute;width:calc(100% - var(--ld-sidenav-padding-y)*2)}.ld-sidenav-scroller-internal__hr-top{top:0}.ld-sidenav-scroller-internal__hr-bottom{top:calc(100% - var(--ld-sp-1)*1.5)}";

const LdSidenavScrollerInternal = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.hasShadowBottom = false;
    this.hasShadowTop = false;
  }
  handleSidenavCollapsedChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    this.sidenavCollapsed = ev.detail.collapsed;
  }
  handleSidenavBreakpointChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    this.sidenavClosable = ev.detail;
  }
  /**
   * Makes shadows either appear or disappear on top and bottom of the
   * scroll container, depending on the current scroll position.
   */
  async updateShadows() {
    const scrollContainer = this.el;
    if (!scrollContainer)
      return;
    this.hasShadowBottom =
      scrollContainer.scrollTop <
        scrollContainer.scrollHeight - scrollContainer.clientHeight - 10;
    this.hasShadowTop = scrollContainer.scrollTop > 10;
  }
  /** Scrolls the scroll container to the top instantly. */
  async scrollToTop(smoothly = false) {
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    try {
      this.el.scrollTo({
        top: 0,
        behavior: smoothly && !prefersReducedMotion ? 'smooth' : 'auto',
      });
    }
    catch (err) {
      // js-dom seems to not know scrollTo - ignoring for now
    }
  }
  componentWillLoad() {
    this.sidenav = closest('ld-sidenav', this.el);
    if (!this.sidenav)
      return;
    this.needsHRTop = !!this.sidenav.querySelector('[slot="top"]');
    this.needsHRBottom = !!this.sidenav.querySelector('[slot="bottom"]');
    this.relative = !this.sidenav.querySelector('ld-sidenav-slider');
  }
  componentDidLoad() {
    setTimeout(() => {
      this.updateShadows();
    });
  }
  render() {
    const cl = getClassNames([
      'ld-sidenav-scroller-internal',
      this.relative && 'ld-sidenav-scroller-internal--relative',
      this.sidenavCollapsed &&
        !this.sidenavClosable &&
        'ld-sidenav-scroller-internal--collapsed',
    ]);
    return (h(Host, { class: cl, onScroll: this.updateShadows.bind(this), onLdSidenavAccordionTransitionEnd: this.updateShadows.bind(this), "data-needs-bottom": this.needsHRBottom, "data-needs-top": this.needsHRTop }, h("div", { class: "ld-sidenav-scroller-internal__shadow-top", style: { opacity: this.hasShadowTop ? '1' : '0' }, part: "shadow-top" }), h("div", { class: "ld-sidenav-scroller-internal__shadow-bottom", style: { opacity: this.hasShadowBottom ? '1' : '0' }, part: "shadow-bottom" }), this.needsHRTop && (h("ld-sidenav-separator", { class: "ld-sidenav-scroller-internal__hr-top", style: { opacity: this.hasShadowTop ? '0' : '1' } })), this.needsHRBottom && (h("ld-sidenav-separator", { class: "ld-sidenav-scroller-internal__hr-bottom", style: { opacity: this.hasShadowBottom ? '0' : '1' } })), h("slot", null)));
  }
  get el() { return this; }
  static get style() { return ldSidenavScrollerInternalShadowCss; }
}, [1, "ld-sidenav-scroller-internal", {
    "hasShadowBottom": [32],
    "hasShadowTop": [32],
    "needsHRBottom": [32],
    "needsHRTop": [32],
    "relative": [32],
    "sidenavClosable": [32],
    "sidenavCollapsed": [32],
    "updateShadows": [64],
    "scrollToTop": [64]
  }, [[9, "ldSidenavCollapsedChange", "handleSidenavCollapsedChange"], [9, "ldSidenavBreakpointChange", "handleSidenavBreakpointChange"]]]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["ld-sidenav-scroller-internal", "ld-sidenav-separator"];
  components.forEach(tagName => { switch (tagName) {
    case "ld-sidenav-scroller-internal":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, LdSidenavScrollerInternal);
      }
      break;
    case "ld-sidenav-separator":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}
defineCustomElement();

export { LdSidenavScrollerInternal as L, defineCustomElement as d };

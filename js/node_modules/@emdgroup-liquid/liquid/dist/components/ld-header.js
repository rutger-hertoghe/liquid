import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { g as getClassNames } from './getClassNames.js';
import { d as defineCustomElement$3 } from './ld-icon2.js';
import { d as defineCustomElement$2 } from './ld-typo2.js';

const ldHeaderCss = ".ld-header,:host(.ld-header){--ld-header-height:3.125rem;--ld-header-max-width:90rem;--ld-header-col:var(--ld-col-wht);--ld-header-bg-col:var(--ld-thm-primary);--ld-header-box-shadow:var(--ld-shadow-stacked);background-color:var(--ld-header-bg-col);box-shadow:var(--ld-header-box-shadow);color:var(--ld-header-col);display:flex;justify-content:center;transition:transform .1s ease-in-out;width:100%}.ld-header.ld-header--sticky,:host(.ld-header.ld-header--sticky){position:sticky;top:0;z-index:1}.ld-header.ld-header--hidden,:host(.ld-header.ld-header--hidden){transform:translateY(-100%)}.ld-header__container{align-items:center;box-sizing:border-box;display:flex;height:var(--ld-header-height);max-width:var(--ld-header-max-width);padding-left:var(--ld-sp-16);width:100%}.ld-header__container>:not([mode=ghost]):not(.ld-button--ghost):not(.ld-header__logo):not(.ld-header__logo-wrapper),::slotted(:not([mode=ghost]):not(.ld-button--ghost):not(.ld-header__logo):not(.ld-header__logo-wrapper)){margin-right:var(--ld-sp-16)}.ld-header__container>.ld-button--ghost,.ld-header__container>[mode=ghost],::slotted(.ld-button--ghost),::slotted([mode=ghost]){margin:0 var(--ld-sp-12) 0 calc(var(--ld-sp-4)*-1)}.ld-header__logo-wrapper{color:inherit;display:flex}.ld-header__logo-wrapper ::slotted(*){margin:0}.ld-header__logo{--ld-icon-size-md:2.4rem;color:var(--ld-thm-warning);display:block;margin:-.2rem;margin-right:calc(var(--ld-sp-16) - .2rem)}.ld-header_site-name{white-space:nowrap}.ld-header__grow{flex:1 0 auto}:host .ld-header__grow{margin:0}";

const LdHeader$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    /** Hides header. */
    this.hidden = false;
    /** Hide the header when the user scrolls down and show it again, when the user scrolls up. */
    this.hideOnScroll = false;
    /** Make the header sticky. */
    this.sticky = false;
    this.updateScrollDirection = () => {
      var _a;
      const offset = (_a = window.pageYOffset) !== null && _a !== void 0 ? _a : document.documentElement.scrollTop;
      if (window.innerHeight + offset >= document.body.offsetHeight) {
        this.hidden = false;
      }
      else if (offset > this.lastOffset && offset > this.currentHeight) {
        this.hidden = true;
      }
      else {
        this.hidden = false;
      }
      // For mobile or negative scrolling
      this.lastOffset = offset < 0 ? 0 : offset;
    };
  }
  connectedCallback() {
    if (this.hideOnScroll) {
      this.lastOffset = window.pageYOffset || document.documentElement.scrollTop;
      window.addEventListener('scroll', this.updateScrollDirection, {
        passive: true,
      });
    }
    else {
      this.disconnectedCallback();
    }
  }
  disconnectedCallback() {
    window.removeEventListener('scroll', this.updateScrollDirection);
  }
  componentDidLoad() {
    this.currentHeight = this.el.getBoundingClientRect().height;
    this.el
      .querySelectorAll('ld-header > ld-button')
      .forEach((ldButton) => {
      ldButton.size = 'sm';
      ldButton.brandColor = true;
    });
    this.el
      .querySelectorAll('ld-header > .ld-button')
      .forEach((cssButton) => {
      cssButton.classList.add('ld-button--brand-color');
      cssButton.classList.add('ld-button--sm');
      cssButton.classList.remove('ld-button--lg');
    });
  }
  render() {
    const cl = getClassNames([
      'ld-header',
      this.hidden && 'ld-header--hidden',
      this.sticky && 'ld-header--sticky',
    ]);
    return (h(Host, { class: cl, role: "banner" }, h("header", { class: "ld-header__container", part: "container" }, h("slot", { name: "start" }), this.logoUrl ? (h("a", { "aria-label": this.logoTitle, class: "ld-header__logo-wrapper", href: this.logoUrl, part: "logo-wrapper" }, h("slot", { name: "logo" }, h("ld-icon", { "aria-label": this.logoTitle
        ? undefined
        : 'Merck KGaA, Darmstadt, Germany', class: "ld-header__logo", name: "initial-m", part: "logo" })))) : (h("div", { "aria-label": this.logoTitle, class: "ld-header__logo-wrapper", part: "logo-wrapper" }, h("slot", { name: "logo" }, h("ld-icon", { "aria-label": this.logoTitle
        ? undefined
        : 'Merck KGaA, Darmstadt, Germany', class: "ld-header__logo", name: "initial-m", part: "logo" })))), this.siteName && (h("ld-typo", { class: "ld-header_site-name", part: "site-name", tag: "div", variant: "h5" }, this.siteName)), h("slot", null), h("div", { class: "ld-header__grow", part: "spacer" }), h("slot", { name: "end" }))));
  }
  static get assetsDirs() { return ["assets"]; }
  get el() { return this; }
  static get watchers() { return {
    "hideOnScroll": ["connectedCallback"]
  }; }
  static get style() { return ldHeaderCss; }
}, [1, "ld-header", {
    "hidden": [1028],
    "hideOnScroll": [4, "hide-on-scroll"],
    "logoTitle": [1, "logo-title"],
    "logoUrl": [1, "logo-url"],
    "sticky": [4],
    "siteName": [1, "site-name"]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["ld-header", "ld-icon", "ld-typo"];
  components.forEach(tagName => { switch (tagName) {
    case "ld-header":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, LdHeader$1);
      }
      break;
    case "ld-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "ld-typo":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}
defineCustomElement$1();

const LdHeader = LdHeader$1;
const defineCustomElement = defineCustomElement$1;

export { LdHeader, defineCustomElement };

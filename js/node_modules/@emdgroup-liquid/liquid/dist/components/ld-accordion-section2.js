import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { g as getClassNames } from './getClassNames.js';

const ldAccordionSectionShadowCss = ":host{display:block}";

const LdAccordionSection = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.ldaccordionchange = createEvent(this, "ldaccordionchange", 7);
    this.initialized = false;
  }
  updateExpandedState(newExpanded) {
    Array.from(this.el.children).forEach((child) => {
      child.setExpanded(newExpanded);
    });
    if (this.initialized) {
      this.ldaccordionchange.emit(newExpanded);
    }
  }
  handleToggleClick(ev) {
    if (ev.target.closest('ld-accordion-section') !== this.el) {
      return;
    }
    this.expanded = !this.expanded;
  }
  componentWillLoad() {
    this.updateExpandedState(this.expanded);
    this.initialized = true;
  }
  render() {
    const cl = getClassNames([
      'ld-accordion-section',
      this.expanded && 'ld-accordion-section--expanded',
    ]);
    return (h(Host, { class: cl, onLdaccordiontoggleclick: this.handleToggleClick.bind(this) }, h("slot", null)));
  }
  get el() { return this; }
  static get watchers() { return {
    "expanded": ["updateExpandedState"]
  }; }
  static get style() { return ldAccordionSectionShadowCss; }
}, [1, "ld-accordion-section", {
    "expanded": [1028],
    "initialized": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["ld-accordion-section"];
  components.forEach(tagName => { switch (tagName) {
    case "ld-accordion-section":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, LdAccordionSection);
      }
      break;
  } });
}
defineCustomElement();

export { LdAccordionSection as L, defineCustomElement as d };

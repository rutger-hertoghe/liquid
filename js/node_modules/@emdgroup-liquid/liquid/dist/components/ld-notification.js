import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';

const ldNotificationShadowCss = ":host{--ld-notification-min-height:var(--ld-sp-40);--ld-notification-border-radius:var(--ld-br-m);--ld-notification-inset-y:var(--ld-sp-32);--ld-notification-col:var(--ld-col-wht);--ld-notification-warn-col:var(--ld-col-neutral-900);--ld-notification-alert-col:var(--ld-col-wht);--ld-notification-bg-col:var(--ld-thm-primary);--ld-notification-warn-bg-col:var(--ld-thm-warning);--ld-notification-alert-bg-col:var(--ld-thm-error);bottom:0;display:flex;font:var(--ld-typo-body-m);justify-content:center;left:0;min-width:20rem;pointer-events:none;position:fixed;right:0;top:0;z-index:2147483647}@keyframes ld-notification-fade-in{0%{opacity:0}to{opacity:1}}@keyframes ld-notification-fade-out{0%{opacity:1;transform:none}to{opacity:0;transform:none}}.ld-notification__item{border-radius:var(--ld-notification-border-radius);box-shadow:var(--ld-shadow-sticky);display:flex;justify-content:space-between;max-height:80vh;max-width:calc(90% - 1rem);min-height:var(--ld-notification-min-height);min-width:19rem;overflow-y:auto;pointer-events:auto;position:absolute;transform-origin:center;transition:transform .2s ease,opacity .2s linear;width:-moz-fit-content;width:fit-content}.ld-notification__item:where(:not(.ld-notification__item--dismissed)){animation:ld-notification-fade-in .2s linear}.ld-notification__item:nth-last-of-type(n+2) .ld-notification__btn-dismiss,.ld-notification__item:nth-last-of-type(n+2) .ld-notification__item-content,.ld-notification__item:nth-last-of-type(n+5){opacity:0}.ld-notification__item:nth-last-of-type(2){opacity:.75}.ld-notification__item:nth-last-of-type(3){opacity:.5}.ld-notification__item:nth-last-of-type(4){opacity:.25}.ld-notification__item.ld-notification__item--dismissed{animation:ld-notification-fade-out .2s linear forwards;opacity:0}:host(.ld-notification--bottom) .ld-notification__item{bottom:var(--ld-notification-inset-y)}:host(.ld-notification--bottom) .ld-notification__item:nth-last-of-type(2){transform:scale(.975) translateY(25%)}:host(.ld-notification--bottom) .ld-notification__item:nth-last-of-type(3){transform:scale(.95) translateY(50%)}:host(.ld-notification--bottom) .ld-notification__item:nth-last-of-type(4){transform:scale(.925) translateY(75%)}:host(.ld-notification--top) .ld-notification__item{top:var(--ld-notification-inset-y)}:host(.ld-notification--top) .ld-notification__item:nth-last-of-type(2){transform:scale(.975) translateY(-25%)}:host(.ld-notification--top) .ld-notification__item:nth-last-of-type(3){transform:scale(.95) translateY(-50%)}:host(.ld-notification--top) .ld-notification__item:nth-last-of-type(4){transform:scale(.925) translateY(-75%)}.ld-notification__item--info{background-color:var(--ld-notification-bg-col);color:var(--ld-notification-col)}.ld-notification__item--warn{background-color:var(--ld-notification-warn-bg-col);color:var(--ld-notification-warn-col)}.ld-notification__item--alert{background-color:var(--ld-notification-alert-bg-col);color:var(--ld-notification-alert-col)}.ld-notification__btn-dismiss,.ld-notification__item-content{transition:opacity .2s linear}.ld-notification__item-content{align-items:baseline;display:grid;gap:var(--ld-sp-12);grid-auto-flow:column;padding:var(--ld-sp-6) var(--ld-sp-12)}.ld-notification__item-content>*{align-self:center}.ld-notification__btn-dismiss{-webkit-touch-callout:none;align-self:center;background-color:initial;border:0;border-radius:var(--ld-br-full);color:inherit;cursor:pointer;display:inline-grid;flex-shrink:0;height:var(--ld-sp-40);margin-left:var(--ld-sp-16);padding:0;place-items:center;touch-action:manipulation;-webkit-user-select:none;user-select:none;width:var(--ld-sp-40)}";

const DEFAULT_NOTIFICATION_TIMEOUT = 6000;
const FADE_TRANSITION_DURATION = 200;
const LdNotification$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    /**
     * Notification placement within the screen.
     */
    this.placement = 'top';
    this.queue = [];
    this.queueDismissed = [];
    this.fadeoutTimeouts = [];
  }
  updateDismissTimeout() {
    clearTimeout(this.dismissTimeout);
    if (!this.currentNotification)
      return;
    if (this.currentNotification.type === 'alert')
      return;
    if (this.currentNotification.timeout === 0)
      return;
    this.dismissTimeout = setTimeout(() => {
      this.handleNotificationDismiss();
    }, this.currentNotification.timeout || DEFAULT_NOTIFICATION_TIMEOUT);
  }
  handleNotification(ev) {
    ev.stopImmediatePropagation();
    const newNotification = ev.detail;
    // If the same notification is already in queue (same content, same type), ignore this notification.
    const inQueue = this.queue.some((notification) => notification.content === newNotification.content &&
      notification.type === newNotification.type);
    if (inQueue)
      return;
    // Insert by relevance, whith error notifications being more relevant than non-error notifications.
    if (newNotification.type === 'alert') {
      this.queue = [...this.queue, newNotification];
      this.currentNotification = newNotification;
      return;
    }
    const firstErrorNotificationIndex = this.queue.findIndex((notification) => notification.type === 'alert');
    if (firstErrorNotificationIndex === -1) {
      this.queue = [...this.queue, newNotification];
      this.currentNotification = newNotification;
      return;
    }
    this.queue.splice(firstErrorNotificationIndex, 0, newNotification);
    this.queue = [...this.queue];
  }
  handleNotificationDismiss() {
    if (!this.currentNotification)
      return;
    this.queueDismissed.unshift(this.queue.pop());
    this.queueDismissed = [...this.queueDismissed];
    this.queue = [...this.queue];
    this.currentNotification = this.queue[this.queue.length - 1];
    this.fadeoutTimeouts.push(setTimeout(() => {
      this.queueDismissed = this.queueDismissed.slice(0, -1);
    }, FADE_TRANSITION_DURATION));
  }
  handleNotificationClear() {
    this.queueDismissed = [...this.queue];
    this.queue = [];
    this.currentNotification = undefined;
    this.fadeoutTimeouts.forEach(clearTimeout);
    this.fadeoutTimeouts.push(setTimeout(() => {
      this.queueDismissed = [];
    }, FADE_TRANSITION_DURATION));
  }
  renderNotification(notification, dismissed = false) {
    let cl = `ld-notification__item ld-notification__item--${notification.type}`;
    if (dismissed)
      cl += ' ld-notification__item--dismissed';
    return (h("div", { class: cl, key: notification.type + notification.content, part: "item" }, h("div", { class: "ld-notification__item-content", innerHTML: notification.content, role: notification.type === 'alert' ? 'alert' : 'status', part: "content" }), h("button", { class: "ld-notification__btn-dismiss", onClick: dismissed ? undefined : this.handleNotificationDismiss.bind(this), part: "btn-dismiss focusable" }, h("svg", { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", part: "btn-dismiss-icon" }, h("title", null, "Dismiss"), h("path", { d: "M6 6L18 18", stroke: "currentColor", "stroke-width": "3", "stroke-linecap": "round", "stroke-linejoin": "round" }), h("path", { d: "M6 18L18 6", stroke: "currentColor", "stroke-width": "3", "stroke-linecap": "round", "stroke-linejoin": "round" })))));
  }
  disconnectedCallback() {
    clearTimeout(this.dismissTimeout);
    this.fadeoutTimeouts.forEach(clearTimeout);
  }
  render() {
    const cl = `ld-notification ld-notification--${this.placement}`;
    return (h(Host, { class: cl, role: "region", "aria-label": "Notifications" }, this.queue.map((notification) => this.renderNotification.call(this, notification)), this.queueDismissed.map((notification) => this.renderNotification.call(this, notification, true))));
  }
  static get watchers() { return {
    "currentNotification": ["updateDismissTimeout"]
  }; }
  static get style() { return ldNotificationShadowCss; }
}, [1, "ld-notification", {
    "placement": [1],
    "queue": [32],
    "queueDismissed": [32],
    "dismissTimeout": [32],
    "fadeoutTimeouts": [32],
    "currentNotification": [32]
  }, [[9, "ldNotificationAdd", "handleNotification"], [9, "ldNotificationDismiss", "handleNotificationDismiss"], [9, "ldNotificationClear", "handleNotificationClear"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["ld-notification"];
  components.forEach(tagName => { switch (tagName) {
    case "ld-notification":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, LdNotification$1);
      }
      break;
  } });
}
defineCustomElement$1();

const LdNotification = LdNotification$1;
const defineCustomElement = defineCustomElement$1;

export { LdNotification, defineCustomElement };

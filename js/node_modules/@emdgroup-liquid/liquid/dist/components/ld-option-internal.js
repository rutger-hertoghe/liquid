import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { g as getClassNames } from './getClassNames.js';
import { d as defineCustomElement$2 } from './ld-checkbox2.js';

const ldOptionInternalShadowCss = ":host(:not(:last-of-type)) .ld-option-internal{border-bottom:solid var(--ld-option-border-col) var(--ld-sp-1)}.ld-option-internal{--ld-option-padding-left-sm:0.625rem;--ld-option-padding-left-lg:0.875rem;--ld-option-bg-col:var(--ld-col-wht);--ld-option-border-col:var(--ld-col-neutral-100);--ld-option-disabled-text-col:var(--ld-col-neutral-100);--ld-option-text-col:var(--ld-col-neutral-900);--ld-option-thm-col:var(--ld-thm-primary);--ld-option-thm-col-hover:var(--ld-thm-primary-hover);--ld-option-thm-col-focus:var(--ld-thm-primary-focus);--ld-option-thm-col-active:var(--ld-thm-primary-active);--ld-option-thm-bg-col-hover:var(--ld-thm-primary-highlight);--ld-option-thm-bg-col-focus:var(--ld-thm-primary-highlight);--ld-option-thm-bg-col-active:var(--ld-thm-primary-highlight);-webkit-touch-callout:none;background-color:var(--ld-option-bg-col);border:0;box-sizing:border-box;color:var(--ld-option-text-col);display:flex;font:var(--ld-typo-label-m);min-height:2.5rem;outline:none;padding:var(--ld-sp-8) var(--ld-sp-12);position:relative;touch-action:manipulation;-webkit-user-select:none;user-select:none;white-space:nowrap}.ld-option-internal--sm{padding-left:var(--ld-option-padding-left-sm)}.ld-option-internal--lg{padding-left:var(--ld-option-padding-left-lg)}.ld-option-internal *,.ld-option-internal :after,.ld-option-internal :before{box-sizing:inherit}[data-popper-placement*=bottom] .ld-option-internal:last-of-type{border-bottom-left-radius:var(--ld-br-m);border-bottom-right-radius:var(--ld-br-m)}[data-popper-placement*=top] .ld-option-internal:first-of-type{border-top-left-radius:var(--ld-br-m);border-top-right-radius:var(--ld-br-m)}.ld-option-internal:not([aria-disabled=true]){cursor:pointer}.ld-option-internal[aria-disabled=true]{color:var(--ld-option-disabled-text-col)}.ld-option-internal:before{border-radius:var(--ld-br-m);bottom:0;content:\"\";left:0;pointer-events:none;position:absolute;right:0;top:0}.ld-option-internal:where(:focus):before,.ld-option-internal:where(:focus:focus-visible):before{box-shadow:inset 0 0 0 var(--ld-sp-2) var(--ld-option-thm-col)}.ld-option-internal:where(:focus:not(:focus-visible)):before{box-shadow:none}.ld-option-internal:where(:not(.ld-option-internal--disabled):not([aria-disabled=true])) :where(.ld-option-internal__check){color:var(--ld-option-thm-col)}.ld-option-internal:where(:not(.ld-option-internal--disabled):not([aria-disabled=true])):where(:focus),.ld-option-internal:where(:not(.ld-option-internal--disabled):not([aria-disabled=true])):where(:focus:focus-visible){background-color:var(--ld-option-thm-bg-col-focus)}.ld-option-internal:where(:not(.ld-option-internal--disabled):not([aria-disabled=true])):where(:focus) :where(.ld-option-internal__check),.ld-option-internal:where(:not(.ld-option-internal--disabled):not([aria-disabled=true])):where(:focus:focus-visible) :where(.ld-option-internal__check){color:var(--ld-option-thm-col-focus)}.ld-option-internal:where(:not(.ld-option-internal--disabled):not([aria-disabled=true])):where(:focus:not(:focus-visible)){background-color:var(--ld-option-bg-col)}.ld-option-internal:where(:not(.ld-option-internal--disabled):not([aria-disabled=true])):where(:focus:not(:focus-visible)) :where(.ld-option-internal__check){color:var(--ld-option-thm-col)}@media (hover:hover){.ld-option-internal:where(:not(.ld-option-internal--disabled):not([aria-disabled=true])):where(:hover){background-color:var(--ld-option-thm-bg-col-hover)}.ld-option-internal:where(:not(.ld-option-internal--disabled):not([aria-disabled=true])):where(:hover) :where(.ld-option-internal__check){color:var(--ld-option-thm-col-hover)}}.ld-option-internal:where(:not(.ld-option-internal--disabled):not([aria-disabled=true])):where(:active),.ld-option-internal:where(:not(.ld-option-internal--disabled):not([aria-disabled=true])):where(:active:focus-visible){background-color:var(--ld-option-thm-bg-col-active)}.ld-option-internal:where(:not(.ld-option-internal--disabled):not([aria-disabled=true])):where(:active) :where(.ld-option-internal__check),.ld-option-internal:where(:not(.ld-option-internal--disabled):not([aria-disabled=true])):where(:active:focus-visible) :where(.ld-option-internal__check){color:var(--ld-option-thm-col-active)}.ld-option-internal__checkbox-wrapper{display:inline-flex;flex-shrink:0}.ld-option-internal__check,.ld-option-internal__checkbox{align-self:center;flex-shrink:0;transform:translateX(calc(var(--ld-sp-2)*-1))}.ld-option-internal__check{margin-right:var(--ld-sp-4)}.ld-option-internal__checkbox{margin-left:var(--ld-sp-2);margin-right:var(--ld-sp-6)}.ld-option-internal__label{overflow:hidden;text-overflow:ellipsis}";

const LdOptionInternal$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.ldoptionselect = createEvent(this, "ldoptionselect", 7);
    /**
     * If present, this boolean attribute indicates that the option is selected.
     */
    this.selected = false;
    /**
     * Disables the option.
     */
    this.disabled = false;
    /** Set to true on filtering via select input. */
    this.hidden = false;
  }
  /**
   * Sets focus internally.
   */
  async focusOption() {
    this.optionRef.focus();
  }
  handleClick() {
    if (this.disabled)
      return;
    if (!this.preventDeselection ||
      !this.selected ||
      this.mode === 'checkbox') {
      this.selected = !this.selected;
    }
    if (this.mode !== 'checkbox') {
      this.hasFocus = false;
      this.hasHover = false;
    }
    this.ldoptionselect.emit(this.selected);
  }
  handleKeyDown(ev) {
    if (ev.key === ' ' || ev.key === 'Enter') {
      ev.preventDefault();
      ev.stopImmediatePropagation();
      this.handleClick();
    }
    if (ev.key === 'Escape') {
      this.hasFocus = false;
      this.hasHover = false;
    }
  }
  componentWillLoad() {
    if (typeof this.value === 'undefined') {
      requestAnimationFrame(() => {
        this.value = this.el.innerText;
      });
    }
  }
  render() {
    return (h(Host, { class: getClassNames([
        this.disabled && 'ld-option-internal--disabled',
        this.hasFocus && 'ld-option-internal--focus-within',
        this.hasHover && 'ld-option-internal--hover-within',
      ]) }, h("div", { class: getClassNames([
        'ld-option-internal',
        this.size && `ld-option-internal--${this.size}`,
      ]), role: "option", ref: (el) => (this.optionRef = el), "aria-selected": this.selected ? 'true' : undefined, "aria-disabled": this.disabled ? 'true' : undefined, onClick: this.handleClick.bind(this), onFocus: () => (this.hasFocus = true), onBlur: () => (this.hasFocus = false), onMouseOver: () => (this.hasHover = true), onMouseOut: () => (this.hasHover = false), tabindex: "-1", part: "option focusable" }, this.mode === 'checkbox' ? (h("div", { class: "ld-option-internal__checkbox-wrapper", role: "presentation", part: "checkbox-wrapper" }, h("ld-checkbox", { class: "ld-option-internal__checkbox", checked: this.selected, disabled: this.disabled, part: "checkbox" }))) : (h("svg", { role: 'presentation', class: "ld-option-internal__check", width: "20", height: "20", viewBox: "0 0 20 20", fill: "none", part: "check" }, h("path", { style: { visibility: this.selected ? 'inherit' : 'hidden' }, d: "M15 7L8.40795 13L5 9.63964", stroke: "currentColor", "stroke-width": "3", "stroke-linecap": "round", "stroke-linejoin": "round" }))), h("span", { class: "ld-option-internal__label", title: this.title, part: "label" }, h("slot", null)))));
  }
  get el() { return this; }
  static get style() { return ldOptionInternalShadowCss; }
}, [1, "ld-option-internal", {
    "value": [1537],
    "selected": [1540],
    "disabled": [4],
    "preventDeselection": [4, "prevent-deselection"],
    "mode": [1],
    "size": [1],
    "hidden": [516],
    "title": [32],
    "hasFocus": [32],
    "hasHover": [32],
    "focusOption": [64]
  }, [[0, "keydown", "handleKeyDown"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["ld-option-internal", "ld-checkbox"];
  components.forEach(tagName => { switch (tagName) {
    case "ld-option-internal":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, LdOptionInternal$1);
      }
      break;
    case "ld-checkbox":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}
defineCustomElement$1();

const LdOptionInternal = LdOptionInternal$1;
const defineCustomElement = defineCustomElement$1;

export { LdOptionInternal, defineCustomElement };

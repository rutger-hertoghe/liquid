import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { g as getClassNames } from './getClassNames.js';

const ldTooltipPopperShadowCss = "@keyframes ld-tooltip-show{0%{opacity:0}to{opacity:1}}@keyframes ld-tooltip-hide{to{visibility:hidden}}:host(.ld-tooltip){--ld-zi-max:2147483647;--ld-tooltip-animation-duration:0s;--ld-tooltip-distance-from-trigger:var(--ld-sp-8);--ld-tooltip-max-width:20rem;--ld-tooltip-offset-x:0px;--ld-tooltip-offset-y:0px;--ld-tooltip-padding:var(--ld-sp-16);--ld-tooltip-sm-padding:var(--ld-sp-6) var(--ld-sp-8);--tooltip-col:var(--ld-col-neutral-900);--tooltip-bg-col:var(--ld-col-wht);animation:ld-tooltip-hide 0s ease var(--ld-tooltip-animation-duration);animation-fill-mode:forwards;background-color:var(--tooltip-bg-col);border-radius:var(--ld-br-m);color:var(--tooltip-col);filter:var(--ld-drop-shadow-hover);margin-left:var(--ld-tooltip-offset-x);margin-top:var(--ld-tooltip-offset-y);max-width:var(--ld-tooltip-max-width);opacity:0;padding:var(--ld-tooltip-padding);pointer-events:none;position:relative;transition:opacity var(--ld-tooltip-animation-duration) ease-in;z-index:var(--ld-zi-max)}@media (prefers-reduced-motion:no-preference){:host(.ld-tooltip--initialized){--ld-tooltip-animation-duration:0.2s}}:host(.ld-tooltip--sm){--ld-tooltip-padding:var(--ld-tooltip-sm-padding)}:host(.ld-tooltip--with-arrow){--ld-tooltip-arrow-size:0.5rem;--ld-tooltip-arrow-offset:var(--ld-sp-16);--ld-tooltip-distance-from-trigger:calc(var(--ld-tooltip-arrow-size) + var(--ld-sp-8))}:host(.ld-tooltip--interactive){pointer-events:auto}:host(.ld-tooltip.ld-tether-enabled){animation:ld-tooltip-show var(--ld-tooltip-animation-duration) ease-out;opacity:1}:host(.ld-tooltip.ld-tether-element-attached-bottom) .ld-tooltip__arrow{bottom:var(--ld-tooltip-arrow-offset)}:host(.ld-tooltip.ld-tether-element-attached-bottom.ld-tether-target-attached-top){margin-top:calc(var(--ld-tooltip-distance-from-trigger)*-1 - var(--ld-tooltip-offset-y))}:host(.ld-tooltip.ld-tether-element-attached-bottom.ld-tether-target-attached-top) .ld-tooltip__arrow{border-top-color:var(--tooltip-bg-col);top:100%}:host(.ld-tooltip.ld-tether-element-attached-center) .ld-tooltip__arrow{left:calc(50% - var(--ld-tooltip-arrow-size))}:host(.ld-tooltip.ld-tether-element-attached-left.ld-tether-target-attached-right){margin-left:calc(var(--ld-tooltip-offset-x) + var(--ld-tooltip-distance-from-trigger))}:host(.ld-tooltip.ld-tether-element-attached-left.ld-tether-target-attached-right) .ld-tooltip__arrow{border-right-color:var(--tooltip-bg-col);right:100%}:host(.ld-tooltip.ld-tether-element-attached-middle) .ld-tooltip__arrow{top:calc(50% - var(--ld-tooltip-arrow-size))}:host(.ld-tooltip.ld-tether-element-attached-right) .ld-tooltip__arrow{right:var(--ld-tooltip-arrow-offset)}:host(.ld-tooltip.ld-tether-element-attached-right.ld-tether-target-attached-left){margin-left:calc(var(--ld-tooltip-distance-from-trigger)*-1 - var(--ld-tooltip-offset-x))}:host(.ld-tooltip.ld-tether-element-attached-right.ld-tether-target-attached-left) .ld-tooltip__arrow{border-left-color:var(--tooltip-bg-col);left:100%}:host(.ld-tooltip.ld-tether-element-attached-top.ld-tether-target-attached-bottom){margin-top:calc(var(--ld-tooltip-distance-from-trigger) + var(--ld-tooltip-offset-y))}:host(.ld-tooltip.ld-tether-element-attached-top.ld-tether-target-attached-bottom) .ld-tooltip__arrow{border-bottom-color:var(--tooltip-bg-col);bottom:100%}:host(.ld-tooltip--with-default-trigger:where(.ld-tooltip--with-arrow):where(.ld-tether-element-attached-bottom.ld-tether-target-attached-top):where(.ld-tether-element-attached-right)),:host(.ld-tooltip--with-default-trigger:where(.ld-tooltip--with-arrow):where(.ld-tether-element-attached-top.ld-tether-target-attached-bottom):where(.ld-tether-element-attached-right)){--ld-tooltip-offset-x:1rem}:host(.ld-tooltip--with-default-trigger:where(.ld-tooltip--with-arrow):where(.ld-tether-element-attached-bottom.ld-tether-target-attached-top):where(.ld-tether-element-attached-left)),:host(.ld-tooltip--with-default-trigger:where(.ld-tooltip--with-arrow):where(.ld-tether-element-attached-top.ld-tether-target-attached-bottom):where(.ld-tether-element-attached-left)){--ld-tooltip-offset-x:-1rem}:host(.ld-tooltip--with-default-trigger:where(.ld-tooltip--with-arrow):where(.ld-tether-element-attached-left.ld-tether-target-attached-right):where(.ld-tether-element-attached-bottom)),:host(.ld-tooltip--with-default-trigger:where(.ld-tooltip--with-arrow):where(.ld-tether-element-attached-right.ld-tether-target-attached-left):where(.ld-tether-element-attached-bottom)){--ld-tooltip-offset-y:1rem}:host(.ld-tooltip--with-default-trigger:where(.ld-tooltip--with-arrow):where(.ld-tether-element-attached-left.ld-tether-target-attached-right):where(.ld-tether-element-attached-top)),:host(.ld-tooltip--with-default-trigger:where(.ld-tooltip--with-arrow):where(.ld-tether-element-attached-right.ld-tether-target-attached-left):where(.ld-tether-element-attached-top)){--ld-tooltip-offset-y:-1rem}.ld-tooltip__arrow{border:var(--ld-tooltip-arrow-size) solid #0000;position:absolute}";

const LdTooltipPopper = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.initialized = false;
    /** Event type that triggers the tooltip */
    this.triggerType = 'hover';
  }
  componentDidLoad() {
    setTimeout(() => {
      this.initialized = true;
    });
  }
  render() {
    return (h(Host, { class: getClassNames([
        'ld-tooltip',
        this.arrow && 'ld-tooltip--with-arrow',
        this.hasDefaultTrigger && 'ld-tooltip--with-default-trigger',
        this.initialized && 'ld-tooltip--initialized',
        this.size && `ld-tooltip--${this.size}`,
        this.triggerType === 'click' && 'ld-tooltip--interactive',
      ]), role: "tooltip" }, this.arrow && h("span", { class: "ld-tooltip__arrow" }), h("slot", null)));
  }
  get element() { return this; }
  static get style() { return ldTooltipPopperShadowCss; }
}, [1, "ld-tooltip-popper", {
    "arrow": [4],
    "size": [1],
    "triggerType": [1, "trigger-type"],
    "hasDefaultTrigger": [4, "has-default-trigger"],
    "initialized": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["ld-tooltip-popper"];
  components.forEach(tagName => { switch (tagName) {
    case "ld-tooltip-popper":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, LdTooltipPopper);
      }
      break;
  } });
}
defineCustomElement();

export { LdTooltipPopper as L, defineCustomElement as d };

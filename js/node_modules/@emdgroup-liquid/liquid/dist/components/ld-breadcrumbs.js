import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';

const ldBreadcrumbsCss = ".ld-breadcrumbs,:host{--ld-crumb-icon-gap:0.5em;--ld-crumb-gap:0.6em;line-height:1.5}.ld-breadcrumbs>ol{display:flex;flex-wrap:wrap;list-style:none;margin:0;padding:0}";

const LdBreadcrumbs$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.updateCurrent = () => {
      const crumbs = this.el.querySelectorAll('ld-crumb');
      crumbs.forEach((crumb) => {
        crumb.current = undefined;
      });
      crumbs[crumbs.length - 1].current = true;
    };
  }
  componentDidLoad() {
    this.observer = new MutationObserver(this.updateCurrent);
    this.observer.observe(this.el, {
      subtree: true,
      childList: true,
      attributes: false,
    });
    this.updateCurrent();
  }
  disconnectedCallback() {
    if (this.observer)
      this.observer.disconnect();
  }
  render() {
    return (h("nav", { "aria-label": "Breadcrumbs", class: "ld-breadcrumbs" }, h("ol", { class: "ld-breadcrumbs__list", part: "list" }, h("slot", null))));
  }
  get el() { return this; }
  static get style() { return ldBreadcrumbsCss; }
}, [1, "ld-breadcrumbs"]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["ld-breadcrumbs"];
  components.forEach(tagName => { switch (tagName) {
    case "ld-breadcrumbs":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, LdBreadcrumbs$1);
      }
      break;
  } });
}
defineCustomElement$1();

const LdBreadcrumbs = LdBreadcrumbs$1;
const defineCustomElement = defineCustomElement$1;

export { LdBreadcrumbs, defineCustomElement };

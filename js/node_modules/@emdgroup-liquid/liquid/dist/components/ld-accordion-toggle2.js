import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { g as getClassNames } from './getClassNames.js';
import { d as defineCustomElement$1 } from './ld-icon2.js';

const ldAccordionToggleShadowCss = ":host{border-radius:var(--ld-accordion-border-radius);display:block;position:relative;z-index:1}.ld-accordion-toggle__button,.ld-accordion-toggle__label,.ld-accordion-toggle__trigger{-webkit-touch-callout:none;border:0;box-sizing:border-box;margin:0;text-align:left;touch-action:manipulation;-webkit-user-select:none;user-select:none;width:100%}.ld-accordion-toggle__button{align-items:center;background-color:var(--ld-accordion-bg-col);border-radius:inherit;color:var(--ld-accordion-col);direction:var(--ld-accordion-grid-dir);display:grid;font:var(--ld-typo-body-m);grid-template-columns:1fr var(--ld-accordion-toggle-size);padding:0;position:relative}.ld-accordion-toggle__button[aria-disabled]{color:var(--ld-accordion-col-disabled)}:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split)) .ld-accordion-toggle__button:before{background-color:var(--ld-accordion-toggle-indicator-bg-col);border-radius:var(--ld-accordion-border-radius);content:\"\";inset:0;position:absolute}:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split)) .ld-accordion-toggle__button:not([aria-disabled]):where(:focus:focus-visible){--ld-accordion-toggle-indicator-bg-col:var(\n          --ld-accordion-bg-col-focus\n        )}@media (hover:hover){:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split)) .ld-accordion-toggle__button:not([aria-disabled]):where(:hover){--ld-accordion-toggle-indicator-bg-col:var(\n            --ld-accordion-bg-col-hover\n          )}}:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split)) .ld-accordion-toggle__button:not([aria-disabled]):where(:active),:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split)) .ld-accordion-toggle__button:not([aria-disabled]):where(:active:focus-visible){--ld-accordion-toggle-indicator-bg-col:var(\n          --ld-accordion-bg-col-active\n        )}:host(.ld-accordion-toggle--expanded:not(.ld-accordion-toggle--split)) .ld-accordion-toggle__button:before{border-bottom-left-radius:0;border-bottom-right-radius:0}:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split):not(.ld-accordion-toggle--expanded)) .ld-accordion-toggle__button:not([aria-disabled]):where(:focus:focus-visible){--ld-accordion-toggle-col:var(--ld-accordion-col-focus)}@media (hover:hover){:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split):not(.ld-accordion-toggle--expanded)) .ld-accordion-toggle__button:not([aria-disabled]):where(:hover){--ld-accordion-toggle-col:var(--ld-accordion-col-hover)}}:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split):not(.ld-accordion-toggle--expanded)) .ld-accordion-toggle__button:not([aria-disabled]):where(:active),:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split):not(.ld-accordion-toggle--expanded)) .ld-accordion-toggle__button:not([aria-disabled]):where(:active:focus-visible){--ld-accordion-toggle-col:var(--ld-accordion-col-active)}.ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__trigger{color:var(--ld-accordion-trigger-icon-col)}.ld-accordion-toggle__label,.ld-accordion-toggle__trigger{background-color:initial;font:inherit}button.ld-accordion-toggle__button:not([aria-disabled]),button.ld-accordion-toggle__label:not([aria-disabled]),button.ld-accordion-toggle__trigger:not([aria-disabled]){cursor:pointer}.ld-accordion-toggle__label{border-radius:var(--ld-accordion-border-radius);border-bottom-right-radius:0;border-top-right-radius:0;padding:var(--ld-accordion-padding-y) var(--ld-accordion-padding-x);position:relative}.ld-accordion-toggle__trigger{border-radius:var(--ld-accordion-border-radius);border-bottom-left-radius:0;border-top-left-radius:0;display:grid;height:var(--ld-accordion-toggle-size);overflow:hidden;place-items:center;position:relative;width:var(--ld-accordion-toggle-size)}.ld-accordion-toggle__label-content,.ld-accordion-toggle__trigger-content{display:grid;position:relative;transform:translateX(calc(var(--ld-sp-1)*-1))}.ld-accordion-toggle__label:not([aria-disabled]) .ld-accordion-toggle__label-content{color:var(--ld-accordion-toggle-col)}:host(.ld-accordion-toggle--expanded){--ld-accordion-toggle-col:var(--ld-accordion-toggle-expanded-col);border-bottom-left-radius:0;border-bottom-right-radius:0}:host(.ld-accordion-toggle--expanded) .ld-accordion-toggle__trigger-icon{transform:scaleY(-1)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label:before,:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger:before{border-radius:var(--ld-br-s);content:\"\";inset:var(--ld-sp-4);left:var(--ld-sp-2);position:absolute}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label[aria-disabled],:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger[aria-disabled]{color:var(--ld-accordion-col-disabled)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label:before{background-color:var(--ld-accordion-toggle-label-indicator-bg-col);transform:translateX(calc(var(--ld-sp-2)))}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger:before{background-color:var(--ld-accordion-toggle-trigger-indicator-bg-col)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]){background-color:var(--ld-accordion-bg-col)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label:not([aria-disabled]):where(:focus:focus-visible){--ld-accordion-toggle-label-indicator-bg-col:var(\n        --ld-accordion-bg-col-focus\n      )}@media (hover:hover){:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label:not([aria-disabled]):where(:hover){--ld-accordion-toggle-label-indicator-bg-col:var(\n          --ld-accordion-bg-col-hover\n        )}}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label:not([aria-disabled]):where(:active),:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label:not([aria-disabled]):where(:active:focus-visible){--ld-accordion-toggle-label-indicator-bg-col:var(\n        --ld-accordion-bg-col-active\n      )}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger:not([aria-disabled]):where(:focus:focus-visible){--ld-accordion-toggle-trigger-col:var(--ld-accordion-col-focus);--ld-accordion-toggle-trigger-indicator-bg-col:var(\n        --ld-accordion-bg-col-focus\n      )}@media (hover:hover){:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger:not([aria-disabled]):where(:hover){--ld-accordion-toggle-trigger-col:var(--ld-accordion-col-hover);--ld-accordion-toggle-trigger-indicator-bg-col:var(\n          --ld-accordion-bg-col-hover\n        )}}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger:not([aria-disabled]):where(:active),:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger:not([aria-disabled]):where(:active:focus-visible){--ld-accordion-toggle-trigger-col:var(--ld-accordion-col-active);--ld-accordion-toggle-trigger-indicator-bg-col:var(\n        --ld-accordion-bg-col-active\n      )}.ld-accordion-toggle__content{display:contents}";

const LdAccordionToggle = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.ldaccordiontoggleclick = createEvent(this, "ldaccordiontoggleclick", 7);
    this.ldaccordionlabelclick = createEvent(this, "ldaccordionlabelclick", 7);
    /**
     * Tag to be used for the toggle label in split mode.
     * This prop is especially usefull, if you want to place
     * your own focusable element inside the toggle label element.
     */
    this.labelTag = 'button';
    /** Used as aria-label value on the toggle trigger element. */
    this.toggleLabel = 'Toggle';
    this.hasCustomIcon = false;
    this.handleToggleClick = (ev) => {
      ev.preventDefault();
      if (this.disabled)
        return;
      this.ldaccordiontoggleclick.emit();
    };
    this.handleLabelClick = (ev) => {
      ev.preventDefault();
      if (this.disabled)
        return;
      this.ldaccordionlabelclick.emit();
    };
  }
  /** Focuses the toggle */
  async focusInner() {
    this.btnRef.focus({ preventScroll: true });
  }
  /**
   * @internal
   * Updates expanded state.
   */
  async setExpanded(expanded) {
    this.expanded = expanded;
  }
  componentWillLoad() {
    this.hasCustomIcon = !!this.el.querySelector('[slot="icon"]');
  }
  render() {
    const cl = getClassNames([
      'ld-accordion-toggle',
      this.expanded && 'ld-accordion-toggle--expanded',
      this.split && 'ld-accordion-toggle--split',
    ]);
    const toggleTriggerContent = (h("div", { class: "ld-accordion-toggle__trigger-content", part: "trigger-content" }, h("slot", { name: "icon" }), !this.hasCustomIcon && (h("ld-icon", { name: "arrow-down", size: "sm", part: "trigger-icon", "aria-hidden": "true", class: "ld-accordion-toggle__trigger-icon" }))));
    const toggleTrigger = this.split ? (h("button", { part: "trigger focusable", class: "ld-accordion-toggle__trigger", "aria-disabled": this.disabled ? 'true' : undefined, "aria-expanded": this.expanded ? 'true' : undefined, "aria-label": this.toggleLabel, onClick: this.handleToggleClick, ref: (el) => (this.btnRef = el) }, toggleTriggerContent)) : (h("div", { part: "trigger", class: "ld-accordion-toggle__trigger" }, toggleTriggerContent));
    const ToggleLabelTag = this.labelTag;
    const toggleLabel = this.split ? (h(ToggleLabelTag, { part: `label${this.labelTag === 'button' ? ' focusable' : ''}`, "aria-disabled": this.disabled ? 'true' : undefined, class: "ld-accordion-toggle__label", onClick: this.handleLabelClick }, h("div", { class: "ld-accordion-toggle__label-content", part: "label-content" }, h("slot", null)))) : (h("div", { part: "label", class: "ld-accordion-toggle__label" }, h("div", { class: "ld-accordion-toggle__label-content", part: "label-content" }, h("slot", null))));
    const toggleContent = (h("div", { part: "content", class: "ld-accordion-toggle__content" }, toggleLabel, toggleTrigger));
    const toggle = this.split ? (h("div", { part: "toggle", class: "ld-accordion-toggle__button" }, toggleContent)) : (h("button", { "aria-disabled": this.disabled ? 'true' : undefined, "aria-expanded": this.expanded ? 'true' : undefined, class: "ld-accordion-toggle__button", onClick: this.handleToggleClick, part: "toggle focusable", ref: (el) => (this.btnRef = el), tabindex: this.ldTabindex }, toggleContent));
    return h(Host, { class: cl }, toggle);
  }
  get el() { return this; }
  static get style() { return ldAccordionToggleShadowCss; }
}, [1, "ld-accordion-toggle", {
    "disabled": [4],
    "labelTag": [1, "label-tag"],
    "ldTabindex": [2, "ld-tabindex"],
    "split": [4],
    "toggleLabel": [1, "toggle-label"],
    "expanded": [32],
    "hasCustomIcon": [32],
    "focusInner": [64],
    "setExpanded": [64]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["ld-accordion-toggle", "ld-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "ld-accordion-toggle":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, LdAccordionToggle);
      }
      break;
    case "ld-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}
defineCustomElement();

export { LdAccordionToggle as L, defineCustomElement as d };

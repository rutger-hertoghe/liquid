import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { g as getClassNames } from './getClassNames.js';

const ldAccordionPanelShadowCss = ":host{--ld-accordion-panel-transition-duration:0.001s;background-color:var(--ld-accordion-bg-col);border-radius:var(--ld-accordion-border-radius);border-top-left-radius:inherit;border-top-right-radius:inherit;box-sizing:border-box;display:block;max-height:var(--ld-accordion-panel-max-height,auto);overflow:hidden;position:relative;will-change:max-height}:host(.ld-accordion-panel--initialized){transition:max-height var(--ld-accordion-panel-transition-duration) ease}@media (prefers-reduced-motion:no-preference){:host(.ld-accordion-panel--initialized){--ld-accordion-panel-transition-duration:0.2s}}:host(.ld-accordion-panel--expanded):before{background-color:var(--ld-accordion-panel-border-top-col);content:\"\";height:var(--ld-sp-2);left:0;position:absolute;right:0;top:0}:host(.ld-accordion-panel--expanded) .ld-accordion-panel__content{opacity:1;transition:opacity var(--ld-accordion-panel-transition-duration) linear;visibility:inherit}.ld-accordion-panel__content{opacity:0;transition:opacity var(--ld-accordion-panel-transition-duration) linear,visibility 0s var(--ld-accordion-panel-transition-duration) linear;visibility:hidden}";

const LdAccordionPanel = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.ldaccordionmaxheightchange = createEvent(this, "ldaccordionmaxheightchange", 7);
    this.initialized = false;
    this.transitionEnabled = false;
    this.innerPanelExpanding = false;
    this.applyMaxHeight = (additionalHeightFromInnerPanel = 0) => {
      if (additionalHeightFromInnerPanel) {
        this.innerPanelExpanding = true;
      }
      // Apply max-height on outer panel inside nested accordion.
      if (this.expanded) {
        this.ldaccordionmaxheightchange.emit(this.el.scrollHeight);
      }
      this.maxHeight = this.expanded
        ? this.el.scrollHeight + additionalHeightFromInnerPanel
        : 0;
    };
    this.handleInnerMaxHeightChange = (ev) => {
      if (ev.target === this.el)
        return;
      ev.stopImmediatePropagation();
      this.applyMaxHeight(ev.detail);
    };
    this.onTransitionEnd = (ev) => {
      if (ev.target === this.el) {
        this.innerPanelExpanding = false;
      }
    };
  }
  /**
   * @internal
   * Updates expanded state.
   */
  async setExpanded(expanded) {
    this.expanded = expanded;
    this.applyMaxHeight();
  }
  componentDidLoad() {
    setTimeout(() => {
      this.resizeObserver = new ResizeObserver(() => {
        // When a panel is expanding inside a nested accordion, the nested panel
        // takes over the responsibility for updating the max-height on the outer
        // panel. In other words: We disable the observer callback function in
        // order to instantly update the max-height for a better performance.
        if (!this.innerPanelExpanding) {
          this.applyMaxHeight();
        }
      });
      this.resizeObserver.observe(this.contentRef);
      this.initialized = true;
    });
  }
  disconnectedCallback() {
    this.resizeObserver.unobserve(this.contentRef);
  }
  render() {
    const cl = getClassNames([
      'ld-accordion-panel',
      this.expanded && 'ld-accordion-panel--expanded',
      this.initialized && 'ld-accordion-panel--initialized',
    ]);
    return (h(Host, { style: { '--ld-accordion-panel-max-height': this.maxHeight + 'px' }, class: cl, onTransitionEnd: this.onTransitionEnd, onLdaccordionmaxheightchange: this.handleInnerMaxHeightChange }, h("div", { part: "content", ref: (ref) => (this.contentRef = ref), class: "ld-accordion-panel__content" }, h("slot", null))));
  }
  get el() { return this; }
  static get style() { return ldAccordionPanelShadowCss; }
}, [1, "ld-accordion-panel", {
    "expanded": [32],
    "initialized": [32],
    "transitionEnabled": [32],
    "maxHeight": [32],
    "resizeObserver": [32],
    "innerPanelExpanding": [32],
    "setExpanded": [64]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["ld-accordion-panel"];
  components.forEach(tagName => { switch (tagName) {
    case "ld-accordion-panel":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, LdAccordionPanel);
      }
      break;
  } });
}
defineCustomElement();

export { LdAccordionPanel as L, defineCustomElement as d };

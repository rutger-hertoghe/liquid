import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';
import { g as getClassNames } from './getClassNames.js';
import { c as cloneAttributes } from './cloneAttributes.js';

const ldLinkCss = ".ld-link{--ld-link-col:var(--ld-thm-primary);--ld-link-gap:0.3em;--ld-link-chevron-gap:0em;--ld-link-chevron-width:0.135em;align-items:baseline;color:var(--ld-link-col);cursor:pointer;font-family:var(--ld-font-body);font-size:inherit;font-weight:700;gap:var(--ld-link-gap);line-height:inherit;text-decoration:none;touch-action:manipulation}.ld-link:not([aria-disabled=true]):hover{--ld-link-col:var(--ld-thm-primary-hover)}.ld-link:not([aria-disabled=true]):focus:focus-visible{--ld-link-col:var(--ld-thm-primary-focus)}.ld-link:not([aria-disabled=true]):active{--ld-link-col:var(--ld-thm-primary-active)}.ld-link:where([aria-disabled=true]){--ld-link-col:var(--ld-thm-primary);cursor:default;opacity:.3}.ld-link>.ld-icon,.ld-link>::slotted(.ld-icon),.ld-link>::slotted(ld-icon),.ld-link>ld-icon{transform:translateY(10%)}.ld-link--chevron-end,.ld-link--chevron-start{display:inline-flex}.ld-link--chevron-end:after,.ld-link--chevron-end:before,.ld-link--chevron-start:after,.ld-link--chevron-start:before{background-color:var(--ld-link-col);border-radius:99rem;content:\"\";display:block;flex-shrink:0;height:.5em;transform-origin:right;width:var(--ld-link-chevron-width)}.ld-link--chevron-start{margin-left:calc(var(--ld-link-chevron-gap)*.5)}.ld-link--chevron-start:after,.ld-link--chevron-start:before{order:-1}.ld-link--chevron-start:before{transform:translateX(calc((var(--ld-link-gap) - var(--ld-link-chevron-gap))*.5 + 50%)) translateY(-65%) rotate(-40deg)}.ld-link--chevron-start:after{transform:translateX(calc(var(--ld-link-gap)*-.5 - var(--ld-link-chevron-gap)*.5 - 50%)) translateY(20%) rotate(40deg)}.ld-link--chevron-end{margin-right:calc(var(--ld-link-chevron-gap)*.5)}.ld-link--chevron-end:after,.ld-link--chevron-end:before{order:1}.ld-link--chevron-end:before{transform:translateX(calc((var(--ld-link-gap) + var(--ld-link-chevron-gap))*.5 + 50%)) translateY(-65%) rotate(-40deg)}.ld-link--chevron-end:after{transform:translateX(calc(var(--ld-link-gap)*-.5 + var(--ld-link-chevron-gap)*.5 - 50%)) translateY(20%) rotate(40deg)}";

const LdLink = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.handleClick = (ev) => {
      if (this.disabled || this.el.ariaDisabled) {
        ev.preventDefault();
        return;
      }
    };
  }
  /** Sets focus on the anchor. */
  async focusInner() {
    this.anchor.focus();
  }
  componentWillLoad() {
    this.attributesObserver = cloneAttributes.call(this, [
      'iconStart',
      'iconEnd',
    ]);
  }
  connectedCallback() {
    this.el.addEventListener('click', this.handleClick, {
      capture: true,
    });
  }
  disconnectedCallback() {
    var _a;
    this.el.removeEventListener('click', this.handleClick, {
      capture: true,
    });
    (_a = this.attributesObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  render() {
    const cl = getClassNames([
      'ld-link',
      this.chevron && `ld-link--chevron-${this.chevron}`,
      this.disabled && `ld-link--disabled`,
    ]);
    return (h("a", Object.assign({}, this.clonedAttributes, { onClick: this.handleClick, class: cl, "aria-disabled": this.disabled || this.el.ariaDisabled ? 'true' : undefined, ref: (ref) => (this.anchor = ref), rel: this.target === '_blank' ? 'noreferrer noopener' : undefined, disabled: this.disabled, part: "anchor focusable", tabIndex: this.ldTabindex }), h("slot", null)));
  }
  get el() { return this; }
  static get style() { return ldLinkCss; }
}, [1, "ld-link", {
    "chevron": [1],
    "disabled": [4],
    "ldTabindex": [2, "ld-tabindex"],
    "target": [1],
    "clonedAttributes": [32],
    "focusInner": [64]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["ld-link"];
  components.forEach(tagName => { switch (tagName) {
    case "ld-link":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, LdLink);
      }
      break;
  } });
}
defineCustomElement();

export { LdLink as L, defineCustomElement as d };

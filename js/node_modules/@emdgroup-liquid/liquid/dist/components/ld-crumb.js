import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';
import { g as getClassNames } from './getClassNames.js';
import { d as defineCustomElement$2 } from './ld-link2.js';

const ldCrumbCss = ".ld-breadcrumbs .ld-link,.ld-crumb__link::part(anchor){--ld-link-gap:var(--ld-crumb-icon-gap);--ld-link-chevron-gap:var(--ld-crumb-gap);display:inline-flex}.ld-breadcrumbs li:not(:last-of-type) .ld-link,.ld-crumb__link:not(.ld-crumb__link--current)::part(anchor){--ld-link-col:var(--ld-col-neutral-600);font-weight:400;margin-right:calc(var(--ld-crumb-gap) + .5em)}.ld-breadcrumbs li:not(:last-of-type) .ld-link:hover,.ld-crumb__link:not(.ld-crumb__link--current)::part(anchor):hover{--ld-link-col:var(--ld-thm-primary-hover)}.ld-breadcrumbs li:not(:last-of-type) .ld-link:focus:focus-visible,.ld-crumb__link:not(.ld-crumb__link--current)::part(anchor):focus:focus-visible{--ld-link-col:var(--ld-thm-primary-focus)}.ld-breadcrumbs li:not(:last-of-type) .ld-link:active,.ld-crumb__link:not(.ld-crumb__link--current)::part(anchor):active{--ld-link-col:var(--ld-thm-primary-active)}.ld-breadcrumbs li:last-of-type .ld-link,.ld-crumb__link--current{cursor:default;pointer-events:none}";

const LdCrumb$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
  }
  render() {
    return (h("li", { class: "ld-crumb" }, h("ld-link", { href: this.href, class: getClassNames([
        'ld-crumb__link',
        this.current && 'ld-crumb__link--current',
      ]), part: "link", "aria-current": this.current ? 'page' : undefined, chevron: this.current ? undefined : 'end' }, h("slot", null))));
  }
  static get style() { return ldCrumbCss; }
}, [1, "ld-crumb", {
    "current": [4],
    "href": [1]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["ld-crumb", "ld-link"];
  components.forEach(tagName => { switch (tagName) {
    case "ld-crumb":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, LdCrumb$1);
      }
      break;
    case "ld-link":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}
defineCustomElement$1();

const LdCrumb = LdCrumb$1;
const defineCustomElement = defineCustomElement$1;

export { LdCrumb, defineCustomElement };

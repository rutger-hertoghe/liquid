import { EventEmitter } from '../../stencil-public-runtime';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part input - Actual input element
 */
export declare class LdRadio implements InnerFocusable, ClonesAttributes {
  el: HTMLInputElement;
  private attributesObserver;
  private input;
  private hiddenInput;
  /**
   * @internal
   * States that this radio button or another radio button with the same name is checked.
   */
  groupChecked: boolean;
  /** Automatically focus the form control when the page is loaded. */
  autofocus: boolean;
  /** Indicates whether the radio button is selected. */
  checked: boolean;
  /** Disabled state of the radio. */
  disabled: boolean;
  /** Associates the control with a form element. */
  form?: string;
  /** Set this property to `true` in order to mark the radio visually as invalid. */
  invalid: boolean;
  /** Tab index of the input. */
  ldTabindex: number | undefined;
  /** Display mode. */
  mode?: 'highlight' | 'danger';
  /** Used to specify the name of the control. */
  name: string;
  /** The value is not editable. */
  readonly?: boolean;
  /** Set this property to `true` in order to mark the radio button as required. */
  required: boolean;
  /** radio tone. Use `'dark'` on white backgrounds. Default is a light tone. */
  tone: 'dark';
  /** The input value. */
  value: string;
  clonedAttributes: any;
  /** Emitted when the input value changed and the element loses focus. */
  ldchange: EventEmitter<boolean>;
  /** Emitted when the input value changed. */
  ldinput: EventEmitter<boolean>;
  /** Sets focus on the radio button. */
  focusInner(): Promise<void>;
  updateHiddenInput(): void;
  private createHiddenInput;
  private handleKeyDown;
  private handleChange;
  private handleClick;
  private handleInput;
  private focusAndSelect;
  componentWillLoad(): void;
  disconnectedCallback(): void;
  render(): any;
}

import Tether from 'tether';
export declare type Position = 'bottom center' | 'bottom left' | 'bottom right' | 'left bottom' | 'left middle' | 'left top' | 'right bottom' | 'right middle' | 'right top' | 'top center' | 'top left' | 'top right';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part icon - Default icon when no trigger is supplied
 * @part trigger - Trigger button
 * @part popper - Popper element (can only be styled as long as tooltip is not initialized)
 */
export declare class LdTooltip {
  element: HTMLElement;
  private delayTimeout?;
  private idDescriber;
  private popper?;
  private tooltipRef;
  private triggerRef;
  /** Show arrow */
  arrow: boolean;
  /** Disable tooltip trigger */
  disabled: boolean;
  /** Delay in ms until tooltip hides (only when trigger type is 'hover') */
  hideDelay: number;
  /** Position of the tooltip relative to the trigger element (also affects the arrow position) */
  position: Position;
  /** Delay in ms until tooltip shows (only when trigger type is 'hover') */
  showDelay: number;
  /** The tooltip size (effects tooltip padding only) */
  size?: 'sm';
  /** The rendered HTML tag for the tooltip trigger. */
  tag: string;
  /** Tether options object to be merged with the default options (optionally stringified). */
  tetherOptions?: Partial<Tether.ITetherOptions> | string;
  /** Event type that triggers the tooltip */
  triggerType: 'click' | 'hover';
  hasDefaultTrigger: boolean;
  visible: boolean;
  updatePopper(newDisabled: boolean): void;
  private mapPositionToAttachment;
  private mapPositionToTargetAttachment;
  private initTooltip;
  /** Hide tooltip */
  hideTooltip(): Promise<void>;
  /** Show tooltip */
  showTooltip(): Promise<void>;
  private toggleTooltip;
  private handleHideTrigger;
  private handleShowTrigger;
  private handleToggleTrigger;
  handleClickOutside(event: any): void;
  handleTouchOutside(event: any): void;
  componentWillLoad(): void;
  disconnectedCallback(): void;
  render(): any;
}

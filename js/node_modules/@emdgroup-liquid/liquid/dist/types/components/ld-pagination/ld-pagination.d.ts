import { EventEmitter } from '../../stencil-public-runtime';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part arrow - all arrow items (`ld-button` elements)
 * @part more-indicator - list-items containing more-indicator
 * @part end - arrow to jump to the last item (`ld-button` element)
 * @part item - all pagination items containing a number (`ld-button` elements)
 * @part items - list containing all slidable items and the marker
 * @part list-wrapper - list-item containing the `ul` element with slidable items
 * @part marker - marker highlighting the selected item
 * @part next - arrow to go to the next item (`ld-button` element)
 * @part prev - arrow to go to the previous item (`ld-button` element)
 * @part start - arrow to jump to the first item (`ld-button` element)
 * @part sticky - all sticky items (`ld-button` elements)
 * @part wrapper - list containing all pagination items
 */
export declare class LdPagination {
  private wrapperRef?;
  /** Switch colors for brand background. */
  brandColor?: boolean;
  /** Label text for the end button (replaces the icon). */
  endLabel?: string;
  /** Hide the buttons to navigate forward/backward. */
  hidePrevNext: boolean;
  /** Hide the buttons to navigate to the first/last item. */
  hideStartEnd: boolean;
  /** Label to communicate the type of an item. */
  itemLabel: string;
  /** The number of items/pages available for pagination (required to let the user jump to the last item/page). */
  length: number;
  /** Items display mode, default as numbers. */
  mode?: 'numbers' | 'dots';
  /** Label text for the forward button (replaces the icon). */
  nextLabel?: string;
  /** Number of next/previous items visible. */
  offset: number;
  /** Label text for the backward button (replaces the icon). */
  prevLabel?: string;
  /** The currently selected item (an index of `-1` means nothing is selected). */
  selectedIndex: number;
  /** Size of the pagination. */
  size?: 'sm' | 'lg';
  /** Space between dots (dots mode only, default depending on `size` prop). */
  space?: string;
  /** Label text for the start button (replaces the icon). */
  startLabel?: string;
  /** Number of items permanently visible at the start/end. */
  sticky: number;
  maxSliderColumns: number;
  renderMoreIndicators: boolean;
  renderSticky: boolean;
  slidableItems: number[];
  sliderContent: number[];
  transitioning: boolean;
  visibleItemsInSlider: number;
  /** Dispatched, if the selected index changes. */
  ldchange: EventEmitter<number>;
  handleSelectedIndex(): void;
  handleTransitionEnd: () => void;
  handleTransitionStart: () => void;
  private renderItem;
  private calculateSliderContent;
  componentWillLoad(): void;
  componentDidLoad(): void;
  disconnectedCallback(): void;
  render(): any;
}

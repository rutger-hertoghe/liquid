import { EventEmitter } from '../../stencil-public-runtime';
/**
 * The `ld-input` component. You can use it in conjunction with the `ld-label`
 * and the `ld-input-message` component. See examples in the docs for a better
 * understanding on how they can be used together.
 *
 * @slot start - The purpose of this slot is to add icons or buttons
 * to the input, __justifying the item to the end of the component__.
 * Styling for `ld-icon` and `ld-button` is provided within the `ld-input` component.
 * If you choose to place something different into the slot, you will probably
 * need to adjust some styles on the slotted item in order to make it fit right.
 * @slot end - The purpose of this slot is to add icons or buttons
 * to the input, __justifying the item to the start of the component__.
 * Styling for `ld-icon` and `ld-button` is provided within the `ld-input` component.
 * If you choose to place something different into the slot, you will probably
 * need to adjust some styles on the slotted item in order to make it fit right.
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part input - Actual input/textarea element
 * @part placeholder - Placeholder rendered for input type "file"
 */
export declare class LdInput implements InnerFocusable, ClonesAttributes {
  el: HTMLInputElement | HTMLTextAreaElement;
  private attributesObserver;
  private hiddenInput?;
  private input;
  /** Hint for expected file type in file upload controls. */
  accept?: string;
  /** Hint for form autofill feature. */
  autocomplete?: string;
  /** Automatically focus the form control when the page is loaded. */
  autofocus: boolean;
  /** Media capture input method in file upload controls. */
  capture?: string;
  /** The number of columns. */
  cols?: number;
  /** Name of form field to use for sending the element's directionality in form submission. */
  dirname?: string;
  /** Whether the form control is disabled. */
  disabled?: boolean;
  /** Associates the control with a form element. */
  form?: string;
  /** Set this property to `true` in order to mark the field visually as invalid. */
  invalid?: boolean;
  /** Tab index of the input. */
  ldTabindex: number | undefined;
  /** Value of the id attribute of the `<datalist>` of autocomplete options. */
  list?: string;
  /** Maximum value. */
  max?: string | number;
  /** Maximum length (number of characters) of `value`. */
  maxlength?: string;
  /** Minimum value. */
  min?: string | number;
  /** Minimum length (number of characters) of `value`. */
  minlength?: string;
  /**
   * Uses textarea instead of input internally. Setting this attribute to true
   * disables the attribute type and both slots.
   */
  multiline?: boolean;
  /** Boolean. Whether to allow multiple values. */
  multiple?: boolean;
  /** Used to specify the name of the control. */
  name?: string;
  /** Pattern the `value` must match to be valid. */
  pattern?: string;
  /** The input placeholder. */
  placeholder?: string;
  /** The value is not editable. */
  readonly?: boolean;
  /** A value is required for the form to be submittable. */
  required?: boolean;
  /** Whether the multiline input is resizable, and if so, in which directions. */
  resize?: 'none' | 'both' | 'horizontal' | 'vertical';
  /** The number of rows. */
  rows?: number;
  /** Size of the input. */
  size?: 'sm' | 'lg';
  /** Incremental values that are valid. */
  step?: string;
  /** Input tone. Use `'dark'` on white backgrounds. Default is a light tone. */
  tone?: 'dark';
  /** The input type. */
  type: string;
  /** The input value. */
  value?: string;
  clonedAttributes: any;
  /** Emitted when the input value changed and the element loses focus. */
  ldchange: EventEmitter<string>;
  /** Emitted when the input value changed. */
  ldinput: EventEmitter<string>;
  /**
   * Sets focus on the input
   */
  focusInner(): Promise<void>;
  updateHiddenInput(): void;
  private createHiddenInput;
  private updateIconAndButtonSize;
  componentWillLoad(): void;
  private handleChange;
  private handleInput;
  private handleClick;
  private handleKeyDown;
  disconnectedCallback(): void;
  render(): any;
}

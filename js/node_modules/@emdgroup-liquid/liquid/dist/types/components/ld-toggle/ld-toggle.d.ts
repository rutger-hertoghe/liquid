import { EventEmitter } from '../../stencil-public-runtime';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part input - Actual input element
 * @part knob - Toggle knob
 * @part icon-wrapper - Both wrappers of icons
 * @part icon-wrapper-start - Wrapper of the start icon
 * @part icon-wrapper-end - Wrapper of the end icon
 */
export declare class LdToggle implements InnerFocusable, ClonesAttributes {
  el: HTMLElement;
  private attributesObserver;
  private input;
  private hiddenInput;
  private hasIcons;
  /** Alternative disabled state that keeps element focusable */
  ariaDisabled: string;
  /** Automatically focus the form control when the page is loaded. */
  autofocus: boolean;
  /** Indicates whether the toggle is "on". */
  checked: boolean;
  /** Disabled state of the checkbox. */
  disabled: boolean;
  /** Associates the control with a form element. */
  form?: string;
  /** Set this property to `true` in order to mark the checkbox visually as invalid. */
  invalid: boolean;
  /** Tab index of the input. */
  ldTabindex: number | undefined;
  /** Used to specify the name of the control. */
  name: string;
  /** The value is not editable. */
  readonly?: boolean;
  /** Set this property to `true` in order to mark the checkbox as required. */
  required: boolean;
  /** Size of the toggle. */
  size?: 'sm' | 'lg';
  /** The input value. */
  value: string;
  clonedAttributes: any;
  /** Emitted when the input value changed and the element loses focus. */
  ldchange: EventEmitter<boolean>;
  /** Emitted when the input value changed. */
  ldinput: EventEmitter<boolean>;
  /** Sets focus on the toggle. */
  focusInner(): Promise<void>;
  updateHiddenInput(): void;
  private createHiddenInput;
  private handleChange;
  private handleClick;
  private handleInput;
  componentWillLoad(): void;
  disconnectedCallback(): void;
  render(): any;
}

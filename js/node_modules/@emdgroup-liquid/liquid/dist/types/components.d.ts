/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { CellType } from "./components/ld-bg-cells/ld-bg-cells";
import { SelectedDetail } from "./components/ld-stepper/ld-step/ld-step";
import { LdTab } from "./components/ld-tabs/ld-tab/ld-tab";
import { Position } from "./components/ld-tooltip/ld-tooltip";
export namespace Components {
    interface LdAccordion {
        /**
          * Style the accordion so that it looks good on the primary color of the current theme.
         */
        "brandColor"?: boolean;
        /**
          * Sets a small gap between each accordion section.
         */
        "detached": boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Applies rounded corners.
         */
        "rounded": boolean;
        /**
          * When set to true, an open accordion element closes, if anthorer one opens.
         */
        "single": boolean;
        /**
          * Use `'dark'` on white backgrounds. Default is a light tone. Takes only effect in conjunction with neutral mode.
         */
        "tone"?: 'dark';
    }
    interface LdAccordionPanel {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
        "setExpanded": (expanded: boolean) => Promise<void>;
    }
    interface LdAccordionSection {
        /**
          * Indicates that the accordion section is expanded.
         */
        "expanded"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdAccordionToggle {
        /**
          * Disables the toggle.
         */
        "disabled"?: boolean;
        /**
          * Focuses the toggle
         */
        "focusInner": () => Promise<void>;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tag to be used for the toggle label in split mode. This prop is especially usefull, if you want to place your own focusable element inside the toggle label element.
         */
        "labelTag": 'button' | 'div';
        /**
          * Tab index of the toggle.
         */
        "ldTabindex": number | undefined;
        /**
          * reference to component
         */
        "ref"?: any;
        "setExpanded": (expanded: boolean) => Promise<void>;
        /**
          * Split the toggle in two parts with the second part containing the caret icon and being responsible for expanding / collapsing the accordion panel.
         */
        "split"?: boolean;
        /**
          * Used as aria-label value on the toggle trigger element.
         */
        "toggleLabel": string;
    }
    interface LdBadge {
        /**
          * Defines badge custom color
         */
        "brandColor"?: boolean;
        /**
          * Icon name.
         */
        "icon"?: string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * The size of the badge, translated in rem
         */
        "size"?: 'lg';
    }
    interface LdBgCells {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Use 3 color layers
         */
        "threeLayers": boolean;
        /**
          * Cells pattern
         */
        "type": CellType;
    }
    interface LdBreadcrumbs {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdButton {
        /**
          * Align text.
         */
        "alignText"?: 'left' | 'right';
        /**
          * Automatically focus the form control when the page is loaded.
         */
        "autofocus": boolean;
        /**
          * Style the button so that it looks good on the current theme's primary color.
         */
        "brandColor"?: boolean;
        /**
          * Disabled state of the button.
         */
        "disabled"?: boolean;
        /**
          * Sets focus on the button
         */
        "focusInner": () => Promise<void>;
        /**
          * Associates the control with a form element.
         */
        "form"?: string;
        /**
          * Overrides the `action` attribute of the button's form owner.
         */
        "formaction"?: | 'application/x-www-form-urlencoded'
    | 'multipart/form-data'
    | 'text/plain';
        /**
          * Overrides the `enctype` attribute of the button's form owner.
         */
        "formenctype"?: string;
        /**
          * Overrides the `method` attribute of the button's form owner.
         */
        "formmethod"?: 'get' | 'post';
        /**
          * Overrides the `novalidate` attribute of the button's form owner.
         */
        "formnovalidate"?: boolean;
        /**
          * Overrides the `target` attribute of the button's form owner.
         */
        "formtarget"?: '_blank' | '_parent' | '_self' | '_top';
        /**
          * Transforms the button to an anchor element. See [mdn docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href) for more information on the `href` attribute.
         */
        "href"?: string;
        /**
          * Justify content.
         */
        "justifyContent"?: 'start' | 'end' | 'between';
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the button.
         */
        "ldTabindex": number | undefined;
        /**
          * Display mode.
         */
        "mode"?: | 'highlight'
    | 'secondary'
    | 'ghost'
    | 'danger'
    | 'danger-secondary';
        /**
          * Used to specify the name of the control.
         */
        "name"?: string;
        /**
          * Displays a progress bar at the bottom of the button.
         */
        "progress"?: 'pending' | number;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Size of the button.
         */
        "size"?: 'sm' | 'lg';
        /**
          * The `target` attributed can be used in conjunction with the `href` attribute. See [mdn docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target) for more information on the `target` attribute.
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
        /**
          * Specifies the default behavior of the button.
         */
        "type": 'button' | 'reset' | 'submit';
        /**
          * Defines the value associated with the button’s `name` when it’s submitted with the form data.
         */
        "value"?: string;
    }
    interface LdCard {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Simulates card elevation by setting the size of the card box shadow.
         */
        "shadow": 'active' | 'hover' | 'stacked' | 'sticky';
        /**
          * Adds hover and focus-within states using an elevation transition from `shadow` (see above) to `shadowInteractive`.
         */
        "shadowInteractive"?: 'active' | 'hover' | 'stacked' | 'sticky';
        /**
          * The size prop effects the card padding only.
         */
        "size"?: 'sm';
    }
    interface LdCheckbox {
        /**
          * Automatically focus the form control when the page is loaded.
         */
        "autofocus": boolean;
        /**
          * Indicates whether the checkbox is checked.
         */
        "checked": boolean;
        /**
          * Disabled state of the checkbox.
         */
        "disabled": boolean;
        /**
          * Sets focus on the checkbox.
         */
        "focusInner": () => Promise<void>;
        /**
          * Associates the control with a form element.
         */
        "form"?: string;
        /**
          * Set this property to `true` to indicate that the checkbox's value is neither true nor false. The prop is removed automatically as soon as the checkbox is clicked (if not disabled).
         */
        "indeterminate"?: boolean;
        /**
          * Set this property to `true` in order to mark the checkbox visually as invalid.
         */
        "invalid": boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the input.
         */
        "ldTabindex": number | undefined;
        /**
          * Display mode.
         */
        "mode"?: 'highlight' | 'danger';
        /**
          * Used to specify the name of the control.
         */
        "name": string;
        /**
          * The value is not editable.
         */
        "readonly"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Set this property to `true` in order to mark the checkbox as required.
         */
        "required": boolean;
        /**
          * Checkbox tone. Use `'dark'` on white backgrounds. Default is a light tone.
         */
        "tone": 'dark';
        /**
          * The input value.
         */
        "value": string;
    }
    interface LdCircularProgress {
        /**
          * Defines the string value or identifies the element (or elements) that label the progressbar element providing an accessible name.
         */
        "ariaLabeledby"?: string;
        /**
          * Set to a decimal value representing the maximum value, and greater than aria-valuemin. If not present, the default value is 100.
         */
        "ariaValuemax": number;
        /**
          * Set to a decimal value representing the minimum value, and less than aria-valuemax. If not present, the default value is 0.
         */
        "ariaValuemin": number;
        /**
          * Only present and required if the value is not indeterminate. Set to a decimal value between 0, or valuemin if present, and aria-valuemax indicating the current value of the progress bar.
         */
        "ariaValuenow"?: number;
        /**
          * Assistive technologies often present the value of aria-valuenow as a percentage. If this would not be accurate use this property to make the progress bar value understandable.
         */
        "ariaValuetext"?: string;
        /**
          * Styles the progress bar in a way that it looks good on the primary color of the current theme.
         */
        "brandColor"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdCrumb {
        "current"?: boolean;
        /**
          * The URL that the hyperlink points to.
         */
        "href"?: string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdHeader {
        /**
          * Hides header.
         */
        "hidden": boolean;
        /**
          * Hide the header when the user scrolls down and show it again, when the user scrolls up.
         */
        "hideOnScroll": boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Title attribute of the logo link.
         */
        "logoTitle"?: string;
        /**
          * URL that the logo links to.
         */
        "logoUrl"?: string;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Name shown on the right side of the logo.
         */
        "siteName"?: string;
        /**
          * Make the header sticky.
         */
        "sticky": boolean;
    }
    interface LdIcon {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * The icon name.
         */
        "name": string;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Size of the icon.
         */
        "size"?: 'sm' | 'lg';
    }
    interface LdInput {
        /**
          * Hint for expected file type in file upload controls.
         */
        "accept"?: string;
        /**
          * Hint for form autofill feature.
         */
        "autocomplete"?: string;
        /**
          * Automatically focus the form control when the page is loaded.
         */
        "autofocus": boolean;
        /**
          * Media capture input method in file upload controls.
         */
        "capture"?: string;
        /**
          * The number of columns.
         */
        "cols"?: number;
        /**
          * Name of form field to use for sending the element's directionality in form submission.
         */
        "dirname"?: string;
        /**
          * Whether the form control is disabled.
         */
        "disabled"?: boolean;
        /**
          * Sets focus on the input
         */
        "focusInner": () => Promise<void>;
        /**
          * Associates the control with a form element.
         */
        "form"?: string;
        /**
          * Set this property to `true` in order to mark the field visually as invalid.
         */
        "invalid"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the input.
         */
        "ldTabindex": number | undefined;
        /**
          * Value of the id attribute of the `<datalist>` of autocomplete options.
         */
        "list"?: string;
        /**
          * Maximum value.
         */
        "max"?: string | number;
        /**
          * Maximum length (number of characters) of `value`.
         */
        "maxlength"?: string;
        /**
          * Minimum value.
         */
        "min"?: string | number;
        /**
          * Minimum length (number of characters) of `value`.
         */
        "minlength"?: string;
        /**
          * Uses textarea instead of input internally. Setting this attribute to true disables the attribute type and both slots.
         */
        "multiline"?: boolean;
        /**
          * Boolean. Whether to allow multiple values.
         */
        "multiple"?: boolean;
        /**
          * Used to specify the name of the control.
         */
        "name"?: string;
        /**
          * Pattern the `value` must match to be valid.
         */
        "pattern"?: string;
        /**
          * The input placeholder.
         */
        "placeholder"?: string;
        /**
          * The value is not editable.
         */
        "readonly"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * A value is required for the form to be submittable.
         */
        "required"?: boolean;
        /**
          * Whether the multiline input is resizable, and if so, in which directions.
         */
        "resize"?: 'none' | 'both' | 'horizontal' | 'vertical';
        /**
          * The number of rows.
         */
        "rows"?: number;
        /**
          * Size of the input.
         */
        "size"?: 'sm' | 'lg';
        /**
          * Incremental values that are valid.
         */
        "step"?: string;
        /**
          * Input tone. Use `'dark'` on white backgrounds. Default is a light tone.
         */
        "tone"?: 'dark';
        /**
          * The input type.
         */
        "type": string;
        /**
          * The input value.
         */
        "value"?: string;
    }
    interface LdInputMessage {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Input message mode.
         */
        "mode": 'error' | 'info' | 'valid';
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdLabel {
        /**
          * Align input message with input position.
         */
        "alignMessage": boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Relative position to labeled element. Default is top.
         */
        "position": 'left' | 'right';
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Size of the label. Default is small.
         */
        "size": 'm';
    }
    interface LdLink {
        /**
          * Displays chevron icon.
         */
        "chevron"?: 'start' | 'end';
        /**
          * The disabled attribute sets `aria-disabled="true"` on the rendered anchor element.
         */
        "disabled"?: boolean;
        /**
          * Sets focus on the anchor.
         */
        "focusInner": () => Promise<void>;
        /**
          * the URL that the hyperlink points to
         */
        "href"?: any;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the input.
         */
        "ldTabindex": number | undefined;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * The `target` attributed can be used in conjunction with the `href` attribute. See [mdn docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target) for more information on the `target` attribute.
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
    }
    interface LdLoading {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Used as svg title element content.
         */
        "label": string;
        /**
          * Uses neutral colors.
         */
        "neutral"?: boolean;
        /**
          * Pauses all animations.
         */
        "paused"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdModal {
        /**
          * Use a blurry backdrop.
         */
        "blurryBackdrop": boolean;
        /**
          * The modal is cancelable by default. However, you can change this using this prop.
         */
        "cancelable": boolean;
        /**
          * Closes the modal dialog.
         */
        "close": () => Promise<void>;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Indicates that the modal dialog is active and can be interacted with.
         */
        "open"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Opens the modal dialog.
         */
        "showModal": () => Promise<void>;
    }
    interface LdNotice {
        /**
          * Headline of the notice.
         */
        "headline"?: string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Mode of the notice.
         */
        "mode": 'error' | 'info' | 'warning' | 'success';
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdNotification {
        /**
          * Notification placement within the screen.
         */
        "placement": 'top' | 'bottom';
    }
    interface LdOption {
        /**
          * Disables the option.
         */
        "disabled": boolean;
        /**
          * Set to true on filtering via select input.
         */
        "hidden": boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * If present, this boolean attribute indicates that the option is selected.
         */
        "selected": boolean;
        /**
          * The content of this attribute represents the value to be submitted with the form, should this option be selected. If this attribute is omitted, the value is taken from the text content of the option element.
         */
        "value": string;
    }
    interface LdOptionInternal {
        /**
          * Disables the option.
         */
        "disabled": boolean;
        /**
          * Sets focus internally.
         */
        "focusOption": () => Promise<void>;
        /**
          * Set to true on filtering via select input.
         */
        "hidden": boolean;
        /**
          * Display mode.
         */
        "mode"?: 'checkbox' | undefined;
        /**
          * Prevents deselection of a selected options when the selected option is clicked in single select mode.
         */
        "preventDeselection": boolean;
        /**
          * If present, this boolean attribute indicates that the option is selected.
         */
        "selected": boolean;
        /**
          * Size of the select trigger button for applying according paddings.
         */
        "size"?: 'sm' | 'lg';
        /**
          * The content of this attribute represents the value to be submitted with the form, should this option be selected. If this attribute is omitted, the value is taken from the text content of the option element.
         */
        "value": string;
    }
    interface LdPagination {
        /**
          * Switch colors for brand background.
         */
        "brandColor"?: boolean;
        /**
          * Label text for the end button (replaces the icon).
         */
        "endLabel"?: string;
        /**
          * Hide the buttons to navigate forward/backward.
         */
        "hidePrevNext": boolean;
        /**
          * Hide the buttons to navigate to the first/last item.
         */
        "hideStartEnd": boolean;
        /**
          * Label to communicate the type of an item.
         */
        "itemLabel": string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * The number of items/pages available for pagination (required to let the user jump to the last item/page).
         */
        "length": number;
        /**
          * Items display mode, default as numbers.
         */
        "mode"?: 'numbers' | 'dots';
        /**
          * Label text for the forward button (replaces the icon).
         */
        "nextLabel"?: string;
        /**
          * Number of next/previous items visible.
         */
        "offset": number;
        /**
          * Label text for the backward button (replaces the icon).
         */
        "prevLabel"?: string;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * The currently selected item (an index of `-1` means nothing is selected).
         */
        "selectedIndex": number;
        /**
          * Size of the pagination.
         */
        "size"?: 'sm' | 'lg';
        /**
          * Space between dots (dots mode only, default depending on `size` prop).
         */
        "space"?: string;
        /**
          * Label text for the start button (replaces the icon).
         */
        "startLabel"?: string;
        /**
          * Number of items permanently visible at the start/end.
         */
        "sticky": number;
    }
    interface LdProgress {
        /**
          * Defines the string value or identifies the element (or elements) that label the progressbar element providing an accessible name.
         */
        "ariaLabeledby"?: string;
        /**
          * Set to a decimal value representing the maximum value, and greater than aria-valuemin. If not present, the default value is 100.
         */
        "ariaValuemax": number;
        /**
          * Set to a decimal value representing the minimum value, and less than aria-valuemax. If not present, the default value is 0.
         */
        "ariaValuemin": number;
        /**
          * Only present and required if the value is not indeterminate. Set to a decimal value between 0, or valuemin if present, and aria-valuemax indicating the current value of the progress bar.
         */
        "ariaValuenow"?: number;
        /**
          * Assistive technologies often present the value of aria-valuenow as a percentage. If this would not be accurate use this property to make the progress bar value understandable.
         */
        "ariaValuetext"?: string;
        /**
          * Styles the progress bar in a way that it looks good on the primary color of the current theme.
         */
        "brandColor"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Used to show indeterminate or pending progress state.
         */
        "pending"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Devides progress bar in multiple progress steps.
         */
        "steps"?: boolean;
    }
    interface LdRadio {
        /**
          * Automatically focus the form control when the page is loaded.
         */
        "autofocus": boolean;
        /**
          * Indicates whether the radio button is selected.
         */
        "checked": boolean;
        /**
          * Disabled state of the radio.
         */
        "disabled": boolean;
        /**
          * Sets focus on the radio button.
         */
        "focusInner": () => Promise<void>;
        /**
          * Associates the control with a form element.
         */
        "form"?: string;
        "groupChecked": boolean;
        /**
          * Set this property to `true` in order to mark the radio visually as invalid.
         */
        "invalid": boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the input.
         */
        "ldTabindex": number | undefined;
        /**
          * Display mode.
         */
        "mode"?: 'highlight' | 'danger';
        /**
          * Used to specify the name of the control.
         */
        "name": string;
        /**
          * The value is not editable.
         */
        "readonly"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Set this property to `true` in order to mark the radio button as required.
         */
        "required": boolean;
        /**
          * radio tone. Use `'dark'` on white backgrounds. Default is a light tone.
         */
        "tone": 'dark';
        /**
          * The input value.
         */
        "value": string;
    }
    interface LdSelect {
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads. Only one form element in a document can have the autofocus attribute.
         */
        "autofocus": boolean;
        /**
          * Disabled state of the component.
         */
        "disabled": boolean;
        /**
          * Set this property to `true` in order to enable an input field for filtering options.
         */
        "filter": boolean;
        /**
          * The filter input placeholder.
         */
        "filterPlaceholder": string;
        /**
          * Sets focus on the trigger button.
         */
        "focusInner": () => Promise<void>;
        /**
          * The form element to associate the select with (its form owner).
         */
        "form"?: string;
        /**
          * Set this property to `true` in order to mark the select visually as invalid.
         */
        "invalid": boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the trigger button.
         */
        "ldTabindex": number;
        /**
          * Constrains the height of the trigger button by replacing overflowing selection with a "+X more" indicator.
         */
        "maxRows"?: number;
        /**
          * Display mode.
         */
        "mode"?: | 'detached' // = default  + small gap between trigger button and popper
    | 'inline' //   = detached + minumum trigger button width
    | 'ghost';
        /**
          * Multiselect mode.
         */
        "multiple": boolean;
        /**
          * Used to specify the name of the control.
         */
        "name": string;
        /**
          * Used as trigger button label in multiselect mode and in single select mode if nothing is selected.
         */
        "placeholder": string;
        /**
          * Attached as CSS class to the select popper element.
         */
        "popperClass"?: string;
        /**
          * Prevents a state with no options selected after initial selection in single select mode.
         */
        "preventDeselection": boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * A Boolean attribute indicating that an option with a non-empty string value must be selected.
         */
        "required"?: boolean;
        /**
          * Currently selected option(s) (read only!)
         */
        "selected": SelectOption[];
        /**
          * Size of the select trigger button.
         */
        "size"?: 'sm' | 'lg';
        /**
          * Tether options object to be merged with the default options (optionally stringified).
         */
        "tetherOptions"?: Partial<Tether.ITetherOptions> | string;
    }
    interface LdSelectPopper {
        /**
          * A watcher is applied to the CSS class in order to be able to react to tether changes.
         */
        "class": string;
        /**
          * Popper is visually detached from the select trigger element (there's a gap between the two).
         */
        "detached": boolean;
        /**
          * Indicates if select element is expanded.
         */
        "expanded": boolean;
        /**
          * Set this property to `true` in order to enable an input field for filtering options.
         */
        "filter": boolean;
        /**
          * The filter input placeholder.
         */
        "filterPlaceholder": string;
        /**
          * Attaches CSS class to the select popper element.
         */
        "popperClass"?: string;
        /**
          * Size of the select trigger button (required for applying the correct shadow height).
         */
        "size"?: 'sm' | 'lg';
        /**
          * Since the select popper is located outside the select element, the theme needs to be applied as a prop.
         */
        "theme": string;
        /**
          * Focuses the tab
         */
        "updateShadowHeight": (height: string) => Promise<void>;
    }
    interface LdSidenav {
        /**
          * Whether the nav should be aligned to the left or the right side of its container.
         */
        "align": 'left' | 'right';
        /**
          * The breakpoint at which the sidenav takes full width and can be opened and closed as opposed to being expanded and collapsed. The prop value is used in a max-width media query.
         */
        "breakpoint": string;
        /**
          * Makes the navigation collapse either on - explicit toggle button click, - when the user clicks somewhere outside the element or - when the user moves the cursor / focus outside the element. The modes are inclusive from right to left: - clickoutside applies if the collapse trigger is set to mouseout - toggle applies if the collapse trigger is set to clickoutside
         */
        "collapseTrigger": 'toggle' | 'clickoutside' | 'mouseout';
        /**
          * Indicates that the navigation is collapsed to the side of its container.
         */
        "collapsed": boolean;
        /**
          * Allows the side navigation to be collapsed to the side of its container.
         */
        "collapsible": boolean;
        /**
          * Makes the navigation expand either on - explicit toggle button click, - when the user moves the cursor over the element. The modes are inclusive from right to left: - toggle applies if the expand trigger is set to mouseenter
         */
        "expandTrigger": 'toggle' | 'mouseenter';
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Label to be used for the landmark element (the sidenav itself).
         */
        "label": string;
        /**
          * Set to true if you'd like to have a sidenav which partially collapses in way, that slotted ld-navitem components are displayed as icon buttons.
         */
        "narrow": boolean;
        /**
          * Indicates that the navigation is visible in a viewport which is smaller than the value of the `breakpoint` prop.
         */
        "open": boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Toggles sidenav.
         */
        "toggle": () => Promise<void>;
        /**
          * Disables transitions on collapsing and expansion of the sidenav. This is especially usefull when the page content gets pushed to the side on sidenav expansion, and you want to prevent too many layout shifts during the transition.
         */
        "toggleTransitionDisabled": boolean;
        /**
          * Enables focus trapping. Accespts a CSS selector which indicates what is still focusable outside the sidenav, when the sidenav is closable and open (i.e. "ld-header *"). Use an empty string to enable focus trapping without specifying focusable elements outside the sidenav component.
         */
        "trapFocus"?: string;
    }
    interface LdSidenavAccordion {
        /**
          * Indicates that the accordion section is expanded.
         */
        "expanded"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Set to false to make the accordion collapse on sidenav collapse or slide change.
         */
        "preserveState": boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Split the accordion toggle in two parts with the second part containing the caret icon and being responsible for expanding / collapsing the accordion panel.
         */
        "split"?: boolean;
    }
    interface LdSidenavBack {
        /**
          * Used as aria-label for the back button
         */
        "backLabel": string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
        "updateLabel": (text?: string) => Promise<void>;
    }
    interface LdSidenavHeader {
        /**
          * aria-label to be used on the anchor element within the sidenav header.
         */
        "ariaLabel": string;
        /**
          * href to be used on the anchor element within the sidenav header.
         */
        "href"?: string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Label to be used for the toggle button when navigation is expanded.
         */
        "labelCollapse": string;
        /**
          * Label to be used for the toggle button when navigation is collapsed.
         */
        "labelExpand": string;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdSidenavHeading {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdSidenavNavitem {
        /**
          * By default, the sidenav automatically expands on click of a navitem, which has a `to` property or acts as an accordion toggle. You can overwrite this behavior by using this prop to explicitly force or prevent expansion of the sidenav.
         */
        "expandOnClick"?: boolean;
        /**
          * Sets focus on the anchor or button
         */
        "focusInner": () => Promise<void>;
        /**
          * Transforms the nav item to an anchor element.
         */
        "href"?: string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the button.
         */
        "ldTabindex": number | undefined;
        /**
          * Display mode. In secondary mode the navitem is less high, displays a filled dot instead of the icon and is hidden when the sidenav collapses. The tertiary mode is similar to secondary mode, with the navitem indented and the dot being empty and having a border.
         */
        "mode"?: 'secondary' | 'tertiary';
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Applies full border-radius.
         */
        "rounded": boolean;
        /**
          * Sets visual indicator to denote that the nav item is currently selected.
         */
        "selected": boolean;
        /**
          * The `target` attributed can be used in conjunction with the `href` attribute. See [mdn docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target) for more information on the `target` attribute.
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
        /**
          * Accepts an id of an ld-subnav component to navigate to it on click.
         */
        "to"?: string;
    }
    interface LdSidenavScrollerInternal {
        /**
          * Scrolls the scroll container to the top instantly.
         */
        "scrollToTop": (smoothly?: boolean) => Promise<void>;
        /**
          * Makes shadows either appear or disappear on top and bottom of the scroll container, depending on the current scroll position.
         */
        "updateShadows": () => Promise<void>;
    }
    interface LdSidenavSeparator {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdSidenavSlider {
        /**
          * ID of the subnav that shall be shown on initial render.
         */
        "currentSubnav": string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Used in the ld-sidenav-back component to display parent nav label.
         */
        "label": string;
        /**
          * Navigates back to the parent nav.
         */
        "navigateBack": () => Promise<void>;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdSidenavSubnav {
        "active": boolean;
        "activeBeforeTransition": boolean;
        "ancestor": boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Used in the ld-sidenav-back component to display parent nav label.
         */
        "label": string;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Scrolls the subnav scroll container to the top.
         */
        "scrollToTop": (smoothly?: boolean) => Promise<void>;
    }
    interface LdSidenavToggleOutside {
        /**
          * Sets focus on the radio button.
         */
        "focusInner": () => Promise<void>;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Label to be used for the toggle button when navigation is collapsed.
         */
        "labelExpand": string;
        /**
          * Tab index of the toggle.
         */
        "ldTabindex": number | undefined;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdSlider {
        /**
          * Alternative disabled state that keeps element focusable
         */
        "ariaDisabled": string;
        /**
          * Disabled state of the slider
         */
        "disabled": boolean;
        /**
          * Focuses the toggle
         */
        "focusInner": () => Promise<void>;
        /**
          * Prevents rendering of the stop labels below the slider
         */
        "hideStopLabels": boolean;
        /**
          * Prevents rendering of the value labels below the slider
         */
        "hideValueLabels": boolean;
        /**
          * Makes the current values only visible on interaction
         */
        "hideValues": boolean;
        /**
          * Specifies the legal number intervals
         */
        "indicators": boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * "From" value label (when exactly 2 values are given)
         */
        "labelFrom": string;
        /**
          * "To" value label (when exactly 2 values are given)
         */
        "labelTo": string;
        /**
          * "Value" label (when exactly 2 values are given)
         */
        "labelValue": string;
        /**
          * Tab index of the input(s).
         */
        "ldTabindex": number | undefined;
        /**
          * Specifies the maximum value allowed
         */
        "max": number;
        /**
          * Specifies the minimum value allowed
         */
        "min": number;
        /**
          * Swap which areas are being marked as selected and deselected
         */
        "negative"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Size of the thumb(s).
         */
        "size"?: 'sm' | 'lg';
        /**
          * Offset inside which a thumb snaps to a stop point
         */
        "snapOffset"?: number;
        /**
          * Specifies the legal number intervals
         */
        "step"?: number;
        /**
          * Adds custom stop points to the slider (instead of steps)
         */
        "stops"?: string;
        /**
          * Allows swapping of thumbs
         */
        "swappable": boolean;
        /**
          * Adds custom stop points to the slider (instead of steps)
         */
        "unit"?: string;
        /**
          * Specifies the default value
         */
        "value"?: string;
        /**
          * Width of the slider
         */
        "width"?: string;
    }
    interface LdSrLive {
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdSrOnly {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdStep {
        /**
          * Switch colors for brand background
         */
        "brandColor": boolean;
        /**
          * Step is the current step
         */
        "current": boolean;
        /**
          * Description text to display below the step name (vertical mode only)
         */
        "description": string;
        /**
          * Step is not clickable
         */
        "disabled": boolean;
        /**
          * Step is done
         */
        "done": boolean;
        /**
          * Sets focus on the step
         */
        "focusInner": () => Promise<void>;
        /**
          * Link to the step (makes the step an anchor instead of a button)
         */
        "href"?: string;
        /**
          * Permanently show a custom icon inside the dot
         */
        "icon"?: HTMLLdIconElement['name'];
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Label for current step (scree-reader only)
         */
        "labelCurrent": string;
        /**
          * Label for step that is done (scree-reader only)
         */
        "labelDone": string;
        /**
          * Label for step that is optional (scree-reader only)
         */
        "labelOptional": string;
        /**
          * Label for step that was skipped (scree-reader only)
         */
        "labelSkipped": string;
        /**
          * Additional hint in label for step that is done and was optional (scree-reader only)
         */
        "labelWasOptional": string;
        /**
          * Indicates that the next step is not active
         */
        "lastActive": boolean;
        /**
          * Tab index of the step
         */
        "ldTabindex": number | undefined;
        /**
          * Step can be processed next
         */
        "next": boolean;
        /**
          * Step may be skipped
         */
        "optional": boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Step size
         */
        "size"?: 'sm' | 'lg';
        /**
          * Step was skipped
         */
        "skipped": boolean;
        /**
          * Vertical layout
         */
        "vertical": boolean;
    }
    interface LdStepper {
        /**
          * Switch colors for brand background.
         */
        "brandColor": boolean;
        /**
          * Indicates whether the steps should be evenly distributed or fit to their content
         */
        "fitContent": boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Step summary template for the screen-reader label, containing the index of the current step and the overall number of steps
         */
        "labelSummaryTemplate": string;
        /**
          * Template for the screen-reader label, containing the label of the current step and the steps summary
         */
        "labelTemplate": string;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Step size
         */
        "size"?: HTMLLdStepElement['size'];
        /**
          * Vertical layout
         */
        "vertical": boolean;
    }
    interface LdSwitch {
        /**
          * Alternative disabled state that keeps element focusable
         */
        "ariaDisabled": string;
        /**
          * Automatically focus the form control when the page is loaded.
         */
        "autofocus": boolean;
        /**
          * Defines switch custom color
         */
        "brandColor"?: boolean;
        /**
          * Disabled state of the switch.
         */
        "disabled": boolean;
        /**
          * Make each switch item take up as little space as its content requires.
         */
        "fitContent": boolean;
        /**
          * Sets focus on the radio button.
         */
        "focusInner": () => Promise<void>;
        /**
          * Associates the control with a form element.
         */
        "form"?: string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the input.
         */
        "ldTabindex": number | undefined;
        /**
          * Defines a description of the contents of the switch component.
         */
        "legend"?: string;
        /**
          * Used to specify the name of the control.
         */
        "name"?: string;
        /**
          * The value is not editable.
         */
        "readonly"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Set this property to `true` in order to mark the switch as required.
         */
        "required": boolean;
        /**
          * Size of the switch.
         */
        "size"?: 'sm' | 'md' | 'lg';
    }
    interface LdSwitchItem {
        /**
          * Alternative disabled state that keeps element focusable
         */
        "ariaDisabled": string;
        /**
          * Indicates whether the switch item is selected.
         */
        "checked": boolean;
        /**
          * Disabled state of the switch item.
         */
        "disabled"?: boolean;
        /**
          * Sets focus on the switch item.
         */
        "focusInner": () => Promise<void>;
        "form"?: string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        "ldTabindex": number | undefined;
        "name"?: string;
        "readonly"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        "required"?: boolean;
        /**
          * The input value.
         */
        "value"?: string;
    }
    interface LdTab {
        /**
          * Disables the tab.
         */
        "disabled"?: boolean;
        /**
          * Focuses the tab
         */
        "focusInner": () => Promise<void>;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the tab.
         */
        "ldTabindex": number | undefined;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Set selected tab to a certain index
         */
        "select": () => Promise<void>;
        /**
          * If present, this boolean attribute indicates that the tab is selected.
         */
        "selected"?: boolean;
    }
    interface LdTablist {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Display mode.
         */
        "mode"?: | 'ghost'
    | 'brand-color'
    | 'floating'
    | 'floating-on-brand-color';
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Sets border radii.
         */
        "rounded"?: 'all' | 'all-lg' | 'top' | 'top-lg';
        /**
          * Size of the tabs.
         */
        "size"?: 'sm' | 'lg';
    }
    interface LdTabpanel {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdTabpanellist {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdTabs {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Set selected tab to a certain index
         */
        "switchTab": (identifier: number | string) => Promise<void>;
    }
    interface LdToggle {
        /**
          * Alternative disabled state that keeps element focusable
         */
        "ariaDisabled": string;
        /**
          * Automatically focus the form control when the page is loaded.
         */
        "autofocus": boolean;
        /**
          * Indicates whether the toggle is "on".
         */
        "checked": boolean;
        /**
          * Disabled state of the checkbox.
         */
        "disabled": boolean;
        /**
          * Sets focus on the toggle.
         */
        "focusInner": () => Promise<void>;
        /**
          * Associates the control with a form element.
         */
        "form"?: string;
        /**
          * Set this property to `true` in order to mark the checkbox visually as invalid.
         */
        "invalid": boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the input.
         */
        "ldTabindex": number | undefined;
        /**
          * Used to specify the name of the control.
         */
        "name": string;
        /**
          * The value is not editable.
         */
        "readonly"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Set this property to `true` in order to mark the checkbox as required.
         */
        "required": boolean;
        /**
          * Size of the toggle.
         */
        "size"?: 'sm' | 'lg';
        /**
          * The input value.
         */
        "value": string;
    }
    interface LdTooltip {
        /**
          * Show arrow
         */
        "arrow": boolean;
        /**
          * Disable tooltip trigger
         */
        "disabled": boolean;
        /**
          * Delay in ms until tooltip hides (only when trigger type is 'hover')
         */
        "hideDelay": number;
        /**
          * Hide tooltip
         */
        "hideTooltip": () => Promise<void>;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Position of the tooltip relative to the trigger element (also affects the arrow position)
         */
        "position": Position;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Delay in ms until tooltip shows (only when trigger type is 'hover')
         */
        "showDelay": number;
        /**
          * Show tooltip
         */
        "showTooltip": () => Promise<void>;
        /**
          * The tooltip size (effects tooltip padding only)
         */
        "size"?: 'sm';
        /**
          * The rendered HTML tag for the tooltip trigger.
         */
        "tag": string;
        /**
          * Tether options object to be merged with the default options (optionally stringified).
         */
        "tetherOptions"?: Partial<Tether.ITetherOptions> | string;
        /**
          * Event type that triggers the tooltip
         */
        "triggerType": 'click' | 'hover';
    }
    interface LdTooltipPopper {
        /**
          * Show arrow
         */
        "arrow": boolean;
        /**
          * Whether the tooltip has a custom trigger or not
         */
        "hasDefaultTrigger": boolean;
        /**
          * The tooltip size (effects tooltip padding only)
         */
        "size"?: 'sm';
        /**
          * Event type that triggers the tooltip
         */
        "triggerType": 'click' | 'hover';
    }
    interface LdTypo {
        /**
          * Since b* and xb* variants are uppercase, screen readers need to be served a (non-uppercase) aria-label (otherwise they will read out the heading letter by letter). If you're using a b* or xb* variant, an aria-label will be set automatically on the element. The component will use the inner HTML for the label implicitly. If you want to set an aria-label explicitly (such as when you have inner HTML that should not be part of the label), you can use this property.
         */
        "ariaLabel": string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * The rendered HTML tag. Overrides tag inferred from the variant.
         */
        "tag": string;
        /**
          * The font style. Every variant has a default tag that it renders with.
         */
        "variant": | 'body-xs'
    | 'body-s'
    | 'body-m'
    | 'body-l'
    | 'body-xl'
    | 'cap-m'
    | 'cap-l'
    | 'label-s'
    | 'label-m'
    | 'h1'
    | 'h2'
    | 'h3'
    | 'h4'
    | 'h5'
    | 'h6'
    | 'b1'
    | 'b2'
    | 'b3'
    | 'b4'
    | 'b5'
    | 'b6'
    | 'xb1'
    | 'xb2'
    | 'xb3'
    | 'xh1'
    | 'xh2'
    | 'xh3'
    | 'xh4'
    | 'xh5'
    | 'xh6';
    }
}
export interface LdAccordionPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdAccordionPanelElement;
}
export interface LdAccordionSectionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdAccordionSectionElement;
}
export interface LdAccordionToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdAccordionToggleElement;
}
export interface LdCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdCheckboxElement;
}
export interface LdInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdInputElement;
}
export interface LdModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdModalElement;
}
export interface LdOptionInternalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdOptionInternalElement;
}
export interface LdPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdPaginationElement;
}
export interface LdRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdRadioElement;
}
export interface LdSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdSelectElement;
}
export interface LdSelectPopperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdSelectPopperElement;
}
export interface LdSidenavCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdSidenavElement;
}
export interface LdSidenavAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdSidenavAccordionElement;
}
export interface LdSidenavBackCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdSidenavBackElement;
}
export interface LdSidenavHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdSidenavHeaderElement;
}
export interface LdSidenavNavitemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdSidenavNavitemElement;
}
export interface LdSidenavSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdSidenavSliderElement;
}
export interface LdSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdSliderElement;
}
export interface LdStepCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdStepElement;
}
export interface LdSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdSwitchElement;
}
export interface LdSwitchItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdSwitchItemElement;
}
export interface LdTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdTabElement;
}
export interface LdTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdTabsElement;
}
export interface LdToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdToggleElement;
}
declare global {
    interface HTMLLdAccordionElement extends Components.LdAccordion, HTMLStencilElement {
    }
    var HTMLLdAccordionElement: {
        prototype: HTMLLdAccordionElement;
        new (): HTMLLdAccordionElement;
    };
    interface HTMLLdAccordionPanelElement extends Components.LdAccordionPanel, HTMLStencilElement {
    }
    var HTMLLdAccordionPanelElement: {
        prototype: HTMLLdAccordionPanelElement;
        new (): HTMLLdAccordionPanelElement;
    };
    interface HTMLLdAccordionSectionElement extends Components.LdAccordionSection, HTMLStencilElement {
    }
    var HTMLLdAccordionSectionElement: {
        prototype: HTMLLdAccordionSectionElement;
        new (): HTMLLdAccordionSectionElement;
    };
    interface HTMLLdAccordionToggleElement extends Components.LdAccordionToggle, HTMLStencilElement {
    }
    var HTMLLdAccordionToggleElement: {
        prototype: HTMLLdAccordionToggleElement;
        new (): HTMLLdAccordionToggleElement;
    };
    interface HTMLLdBadgeElement extends Components.LdBadge, HTMLStencilElement {
    }
    var HTMLLdBadgeElement: {
        prototype: HTMLLdBadgeElement;
        new (): HTMLLdBadgeElement;
    };
    interface HTMLLdBgCellsElement extends Components.LdBgCells, HTMLStencilElement {
    }
    var HTMLLdBgCellsElement: {
        prototype: HTMLLdBgCellsElement;
        new (): HTMLLdBgCellsElement;
    };
    interface HTMLLdBreadcrumbsElement extends Components.LdBreadcrumbs, HTMLStencilElement {
    }
    var HTMLLdBreadcrumbsElement: {
        prototype: HTMLLdBreadcrumbsElement;
        new (): HTMLLdBreadcrumbsElement;
    };
    interface HTMLLdButtonElement extends Components.LdButton, HTMLStencilElement {
    }
    var HTMLLdButtonElement: {
        prototype: HTMLLdButtonElement;
        new (): HTMLLdButtonElement;
    };
    interface HTMLLdCardElement extends Components.LdCard, HTMLStencilElement {
    }
    var HTMLLdCardElement: {
        prototype: HTMLLdCardElement;
        new (): HTMLLdCardElement;
    };
    interface HTMLLdCheckboxElement extends Components.LdCheckbox, HTMLStencilElement {
    }
    var HTMLLdCheckboxElement: {
        prototype: HTMLLdCheckboxElement;
        new (): HTMLLdCheckboxElement;
    };
    interface HTMLLdCircularProgressElement extends Components.LdCircularProgress, HTMLStencilElement {
    }
    var HTMLLdCircularProgressElement: {
        prototype: HTMLLdCircularProgressElement;
        new (): HTMLLdCircularProgressElement;
    };
    interface HTMLLdCrumbElement extends Components.LdCrumb, HTMLStencilElement {
    }
    var HTMLLdCrumbElement: {
        prototype: HTMLLdCrumbElement;
        new (): HTMLLdCrumbElement;
    };
    interface HTMLLdHeaderElement extends Components.LdHeader, HTMLStencilElement {
    }
    var HTMLLdHeaderElement: {
        prototype: HTMLLdHeaderElement;
        new (): HTMLLdHeaderElement;
    };
    interface HTMLLdIconElement extends Components.LdIcon, HTMLStencilElement {
    }
    var HTMLLdIconElement: {
        prototype: HTMLLdIconElement;
        new (): HTMLLdIconElement;
    };
    interface HTMLLdInputElement extends Components.LdInput, HTMLStencilElement {
    }
    var HTMLLdInputElement: {
        prototype: HTMLLdInputElement;
        new (): HTMLLdInputElement;
    };
    interface HTMLLdInputMessageElement extends Components.LdInputMessage, HTMLStencilElement {
    }
    var HTMLLdInputMessageElement: {
        prototype: HTMLLdInputMessageElement;
        new (): HTMLLdInputMessageElement;
    };
    interface HTMLLdLabelElement extends Components.LdLabel, HTMLStencilElement {
    }
    var HTMLLdLabelElement: {
        prototype: HTMLLdLabelElement;
        new (): HTMLLdLabelElement;
    };
    interface HTMLLdLinkElement extends Components.LdLink, HTMLStencilElement {
    }
    var HTMLLdLinkElement: {
        prototype: HTMLLdLinkElement;
        new (): HTMLLdLinkElement;
    };
    interface HTMLLdLoadingElement extends Components.LdLoading, HTMLStencilElement {
    }
    var HTMLLdLoadingElement: {
        prototype: HTMLLdLoadingElement;
        new (): HTMLLdLoadingElement;
    };
    interface HTMLLdModalElement extends Components.LdModal, HTMLStencilElement {
    }
    var HTMLLdModalElement: {
        prototype: HTMLLdModalElement;
        new (): HTMLLdModalElement;
    };
    interface HTMLLdNoticeElement extends Components.LdNotice, HTMLStencilElement {
    }
    var HTMLLdNoticeElement: {
        prototype: HTMLLdNoticeElement;
        new (): HTMLLdNoticeElement;
    };
    interface HTMLLdNotificationElement extends Components.LdNotification, HTMLStencilElement {
    }
    var HTMLLdNotificationElement: {
        prototype: HTMLLdNotificationElement;
        new (): HTMLLdNotificationElement;
    };
    interface HTMLLdOptionElement extends Components.LdOption, HTMLStencilElement {
    }
    var HTMLLdOptionElement: {
        prototype: HTMLLdOptionElement;
        new (): HTMLLdOptionElement;
    };
    interface HTMLLdOptionInternalElement extends Components.LdOptionInternal, HTMLStencilElement {
    }
    var HTMLLdOptionInternalElement: {
        prototype: HTMLLdOptionInternalElement;
        new (): HTMLLdOptionInternalElement;
    };
    interface HTMLLdPaginationElement extends Components.LdPagination, HTMLStencilElement {
    }
    var HTMLLdPaginationElement: {
        prototype: HTMLLdPaginationElement;
        new (): HTMLLdPaginationElement;
    };
    interface HTMLLdProgressElement extends Components.LdProgress, HTMLStencilElement {
    }
    var HTMLLdProgressElement: {
        prototype: HTMLLdProgressElement;
        new (): HTMLLdProgressElement;
    };
    interface HTMLLdRadioElement extends Components.LdRadio, HTMLStencilElement {
    }
    var HTMLLdRadioElement: {
        prototype: HTMLLdRadioElement;
        new (): HTMLLdRadioElement;
    };
    interface HTMLLdSelectElement extends Components.LdSelect, HTMLStencilElement {
    }
    var HTMLLdSelectElement: {
        prototype: HTMLLdSelectElement;
        new (): HTMLLdSelectElement;
    };
    interface HTMLLdSelectPopperElement extends Components.LdSelectPopper, HTMLStencilElement {
    }
    var HTMLLdSelectPopperElement: {
        prototype: HTMLLdSelectPopperElement;
        new (): HTMLLdSelectPopperElement;
    };
    interface HTMLLdSidenavElement extends Components.LdSidenav, HTMLStencilElement {
    }
    var HTMLLdSidenavElement: {
        prototype: HTMLLdSidenavElement;
        new (): HTMLLdSidenavElement;
    };
    interface HTMLLdSidenavAccordionElement extends Components.LdSidenavAccordion, HTMLStencilElement {
    }
    var HTMLLdSidenavAccordionElement: {
        prototype: HTMLLdSidenavAccordionElement;
        new (): HTMLLdSidenavAccordionElement;
    };
    interface HTMLLdSidenavBackElement extends Components.LdSidenavBack, HTMLStencilElement {
    }
    var HTMLLdSidenavBackElement: {
        prototype: HTMLLdSidenavBackElement;
        new (): HTMLLdSidenavBackElement;
    };
    interface HTMLLdSidenavHeaderElement extends Components.LdSidenavHeader, HTMLStencilElement {
    }
    var HTMLLdSidenavHeaderElement: {
        prototype: HTMLLdSidenavHeaderElement;
        new (): HTMLLdSidenavHeaderElement;
    };
    interface HTMLLdSidenavHeadingElement extends Components.LdSidenavHeading, HTMLStencilElement {
    }
    var HTMLLdSidenavHeadingElement: {
        prototype: HTMLLdSidenavHeadingElement;
        new (): HTMLLdSidenavHeadingElement;
    };
    interface HTMLLdSidenavNavitemElement extends Components.LdSidenavNavitem, HTMLStencilElement {
    }
    var HTMLLdSidenavNavitemElement: {
        prototype: HTMLLdSidenavNavitemElement;
        new (): HTMLLdSidenavNavitemElement;
    };
    interface HTMLLdSidenavScrollerInternalElement extends Components.LdSidenavScrollerInternal, HTMLStencilElement {
    }
    var HTMLLdSidenavScrollerInternalElement: {
        prototype: HTMLLdSidenavScrollerInternalElement;
        new (): HTMLLdSidenavScrollerInternalElement;
    };
    interface HTMLLdSidenavSeparatorElement extends Components.LdSidenavSeparator, HTMLStencilElement {
    }
    var HTMLLdSidenavSeparatorElement: {
        prototype: HTMLLdSidenavSeparatorElement;
        new (): HTMLLdSidenavSeparatorElement;
    };
    interface HTMLLdSidenavSliderElement extends Components.LdSidenavSlider, HTMLStencilElement {
    }
    var HTMLLdSidenavSliderElement: {
        prototype: HTMLLdSidenavSliderElement;
        new (): HTMLLdSidenavSliderElement;
    };
    interface HTMLLdSidenavSubnavElement extends Components.LdSidenavSubnav, HTMLStencilElement {
    }
    var HTMLLdSidenavSubnavElement: {
        prototype: HTMLLdSidenavSubnavElement;
        new (): HTMLLdSidenavSubnavElement;
    };
    interface HTMLLdSidenavToggleOutsideElement extends Components.LdSidenavToggleOutside, HTMLStencilElement {
    }
    var HTMLLdSidenavToggleOutsideElement: {
        prototype: HTMLLdSidenavToggleOutsideElement;
        new (): HTMLLdSidenavToggleOutsideElement;
    };
    interface HTMLLdSliderElement extends Components.LdSlider, HTMLStencilElement {
    }
    var HTMLLdSliderElement: {
        prototype: HTMLLdSliderElement;
        new (): HTMLLdSliderElement;
    };
    interface HTMLLdSrLiveElement extends Components.LdSrLive, HTMLStencilElement {
    }
    var HTMLLdSrLiveElement: {
        prototype: HTMLLdSrLiveElement;
        new (): HTMLLdSrLiveElement;
    };
    interface HTMLLdSrOnlyElement extends Components.LdSrOnly, HTMLStencilElement {
    }
    var HTMLLdSrOnlyElement: {
        prototype: HTMLLdSrOnlyElement;
        new (): HTMLLdSrOnlyElement;
    };
    interface HTMLLdStepElement extends Components.LdStep, HTMLStencilElement {
    }
    var HTMLLdStepElement: {
        prototype: HTMLLdStepElement;
        new (): HTMLLdStepElement;
    };
    interface HTMLLdStepperElement extends Components.LdStepper, HTMLStencilElement {
    }
    var HTMLLdStepperElement: {
        prototype: HTMLLdStepperElement;
        new (): HTMLLdStepperElement;
    };
    interface HTMLLdSwitchElement extends Components.LdSwitch, HTMLStencilElement {
    }
    var HTMLLdSwitchElement: {
        prototype: HTMLLdSwitchElement;
        new (): HTMLLdSwitchElement;
    };
    interface HTMLLdSwitchItemElement extends Components.LdSwitchItem, HTMLStencilElement {
    }
    var HTMLLdSwitchItemElement: {
        prototype: HTMLLdSwitchItemElement;
        new (): HTMLLdSwitchItemElement;
    };
    interface HTMLLdTabElement extends Components.LdTab, HTMLStencilElement {
    }
    var HTMLLdTabElement: {
        prototype: HTMLLdTabElement;
        new (): HTMLLdTabElement;
    };
    interface HTMLLdTablistElement extends Components.LdTablist, HTMLStencilElement {
    }
    var HTMLLdTablistElement: {
        prototype: HTMLLdTablistElement;
        new (): HTMLLdTablistElement;
    };
    interface HTMLLdTabpanelElement extends Components.LdTabpanel, HTMLStencilElement {
    }
    var HTMLLdTabpanelElement: {
        prototype: HTMLLdTabpanelElement;
        new (): HTMLLdTabpanelElement;
    };
    interface HTMLLdTabpanellistElement extends Components.LdTabpanellist, HTMLStencilElement {
    }
    var HTMLLdTabpanellistElement: {
        prototype: HTMLLdTabpanellistElement;
        new (): HTMLLdTabpanellistElement;
    };
    interface HTMLLdTabsElement extends Components.LdTabs, HTMLStencilElement {
    }
    var HTMLLdTabsElement: {
        prototype: HTMLLdTabsElement;
        new (): HTMLLdTabsElement;
    };
    interface HTMLLdToggleElement extends Components.LdToggle, HTMLStencilElement {
    }
    var HTMLLdToggleElement: {
        prototype: HTMLLdToggleElement;
        new (): HTMLLdToggleElement;
    };
    interface HTMLLdTooltipElement extends Components.LdTooltip, HTMLStencilElement {
    }
    var HTMLLdTooltipElement: {
        prototype: HTMLLdTooltipElement;
        new (): HTMLLdTooltipElement;
    };
    interface HTMLLdTooltipPopperElement extends Components.LdTooltipPopper, HTMLStencilElement {
    }
    var HTMLLdTooltipPopperElement: {
        prototype: HTMLLdTooltipPopperElement;
        new (): HTMLLdTooltipPopperElement;
    };
    interface HTMLLdTypoElement extends Components.LdTypo, HTMLStencilElement {
    }
    var HTMLLdTypoElement: {
        prototype: HTMLLdTypoElement;
        new (): HTMLLdTypoElement;
    };
    interface HTMLElementTagNameMap {
        "ld-accordion": HTMLLdAccordionElement;
        "ld-accordion-panel": HTMLLdAccordionPanelElement;
        "ld-accordion-section": HTMLLdAccordionSectionElement;
        "ld-accordion-toggle": HTMLLdAccordionToggleElement;
        "ld-badge": HTMLLdBadgeElement;
        "ld-bg-cells": HTMLLdBgCellsElement;
        "ld-breadcrumbs": HTMLLdBreadcrumbsElement;
        "ld-button": HTMLLdButtonElement;
        "ld-card": HTMLLdCardElement;
        "ld-checkbox": HTMLLdCheckboxElement;
        "ld-circular-progress": HTMLLdCircularProgressElement;
        "ld-crumb": HTMLLdCrumbElement;
        "ld-header": HTMLLdHeaderElement;
        "ld-icon": HTMLLdIconElement;
        "ld-input": HTMLLdInputElement;
        "ld-input-message": HTMLLdInputMessageElement;
        "ld-label": HTMLLdLabelElement;
        "ld-link": HTMLLdLinkElement;
        "ld-loading": HTMLLdLoadingElement;
        "ld-modal": HTMLLdModalElement;
        "ld-notice": HTMLLdNoticeElement;
        "ld-notification": HTMLLdNotificationElement;
        "ld-option": HTMLLdOptionElement;
        "ld-option-internal": HTMLLdOptionInternalElement;
        "ld-pagination": HTMLLdPaginationElement;
        "ld-progress": HTMLLdProgressElement;
        "ld-radio": HTMLLdRadioElement;
        "ld-select": HTMLLdSelectElement;
        "ld-select-popper": HTMLLdSelectPopperElement;
        "ld-sidenav": HTMLLdSidenavElement;
        "ld-sidenav-accordion": HTMLLdSidenavAccordionElement;
        "ld-sidenav-back": HTMLLdSidenavBackElement;
        "ld-sidenav-header": HTMLLdSidenavHeaderElement;
        "ld-sidenav-heading": HTMLLdSidenavHeadingElement;
        "ld-sidenav-navitem": HTMLLdSidenavNavitemElement;
        "ld-sidenav-scroller-internal": HTMLLdSidenavScrollerInternalElement;
        "ld-sidenav-separator": HTMLLdSidenavSeparatorElement;
        "ld-sidenav-slider": HTMLLdSidenavSliderElement;
        "ld-sidenav-subnav": HTMLLdSidenavSubnavElement;
        "ld-sidenav-toggle-outside": HTMLLdSidenavToggleOutsideElement;
        "ld-slider": HTMLLdSliderElement;
        "ld-sr-live": HTMLLdSrLiveElement;
        "ld-sr-only": HTMLLdSrOnlyElement;
        "ld-step": HTMLLdStepElement;
        "ld-stepper": HTMLLdStepperElement;
        "ld-switch": HTMLLdSwitchElement;
        "ld-switch-item": HTMLLdSwitchItemElement;
        "ld-tab": HTMLLdTabElement;
        "ld-tablist": HTMLLdTablistElement;
        "ld-tabpanel": HTMLLdTabpanelElement;
        "ld-tabpanellist": HTMLLdTabpanellistElement;
        "ld-tabs": HTMLLdTabsElement;
        "ld-toggle": HTMLLdToggleElement;
        "ld-tooltip": HTMLLdTooltipElement;
        "ld-tooltip-popper": HTMLLdTooltipPopperElement;
        "ld-typo": HTMLLdTypoElement;
    }
}
declare namespace LocalJSX {
    interface LdAccordion {
        /**
          * Style the accordion so that it looks good on the primary color of the current theme.
         */
        "brandColor"?: boolean;
        /**
          * Sets a small gap between each accordion section.
         */
        "detached"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Applies rounded corners.
         */
        "rounded"?: boolean;
        /**
          * When set to true, an open accordion element closes, if anthorer one opens.
         */
        "single"?: boolean;
        /**
          * Use `'dark'` on white backgrounds. Default is a light tone. Takes only effect in conjunction with neutral mode.
         */
        "tone"?: 'dark';
    }
    interface LdAccordionPanel {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Emitted on accordion panel max-height change.
         */
        "onLdaccordionmaxheightchange"?: (event: LdAccordionPanelCustomEvent<number>) => void;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdAccordionSection {
        /**
          * Indicates that the accordion section is expanded.
         */
        "expanded"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Emitted on expansion and collapse.
         */
        "onLdaccordionchange"?: (event: LdAccordionSectionCustomEvent<boolean>) => void;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdAccordionToggle {
        /**
          * Disables the toggle.
         */
        "disabled"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tag to be used for the toggle label in split mode. This prop is especially usefull, if you want to place your own focusable element inside the toggle label element.
         */
        "labelTag"?: 'button' | 'div';
        /**
          * Tab index of the toggle.
         */
        "ldTabindex"?: number | undefined;
        /**
          * Emitted on click of the accordion toggle label.
         */
        "onLdaccordionlabelclick"?: (event: LdAccordionToggleCustomEvent<undefined>) => void;
        /**
          * Emitted on click of the accordion toggle trigger.
         */
        "onLdaccordiontoggleclick"?: (event: LdAccordionToggleCustomEvent<undefined>) => void;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Split the toggle in two parts with the second part containing the caret icon and being responsible for expanding / collapsing the accordion panel.
         */
        "split"?: boolean;
        /**
          * Used as aria-label value on the toggle trigger element.
         */
        "toggleLabel"?: string;
    }
    interface LdBadge {
        /**
          * Defines badge custom color
         */
        "brandColor"?: boolean;
        /**
          * Icon name.
         */
        "icon"?: string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * The size of the badge, translated in rem
         */
        "size"?: 'lg';
    }
    interface LdBgCells {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Use 3 color layers
         */
        "threeLayers"?: boolean;
        /**
          * Cells pattern
         */
        "type"?: CellType;
    }
    interface LdBreadcrumbs {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdButton {
        /**
          * Align text.
         */
        "alignText"?: 'left' | 'right';
        /**
          * Automatically focus the form control when the page is loaded.
         */
        "autofocus"?: boolean;
        /**
          * Style the button so that it looks good on the current theme's primary color.
         */
        "brandColor"?: boolean;
        /**
          * Disabled state of the button.
         */
        "disabled"?: boolean;
        /**
          * Associates the control with a form element.
         */
        "form"?: string;
        /**
          * Overrides the `action` attribute of the button's form owner.
         */
        "formaction"?: | 'application/x-www-form-urlencoded'
    | 'multipart/form-data'
    | 'text/plain';
        /**
          * Overrides the `enctype` attribute of the button's form owner.
         */
        "formenctype"?: string;
        /**
          * Overrides the `method` attribute of the button's form owner.
         */
        "formmethod"?: 'get' | 'post';
        /**
          * Overrides the `novalidate` attribute of the button's form owner.
         */
        "formnovalidate"?: boolean;
        /**
          * Overrides the `target` attribute of the button's form owner.
         */
        "formtarget"?: '_blank' | '_parent' | '_self' | '_top';
        /**
          * Transforms the button to an anchor element. See [mdn docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href) for more information on the `href` attribute.
         */
        "href"?: string;
        /**
          * Justify content.
         */
        "justifyContent"?: 'start' | 'end' | 'between';
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the button.
         */
        "ldTabindex"?: number | undefined;
        /**
          * Display mode.
         */
        "mode"?: | 'highlight'
    | 'secondary'
    | 'ghost'
    | 'danger'
    | 'danger-secondary';
        /**
          * Used to specify the name of the control.
         */
        "name"?: string;
        /**
          * Displays a progress bar at the bottom of the button.
         */
        "progress"?: 'pending' | number;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Size of the button.
         */
        "size"?: 'sm' | 'lg';
        /**
          * The `target` attributed can be used in conjunction with the `href` attribute. See [mdn docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target) for more information on the `target` attribute.
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
        /**
          * Specifies the default behavior of the button.
         */
        "type"?: 'button' | 'reset' | 'submit';
        /**
          * Defines the value associated with the button’s `name` when it’s submitted with the form data.
         */
        "value"?: string;
    }
    interface LdCard {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Simulates card elevation by setting the size of the card box shadow.
         */
        "shadow"?: 'active' | 'hover' | 'stacked' | 'sticky';
        /**
          * Adds hover and focus-within states using an elevation transition from `shadow` (see above) to `shadowInteractive`.
         */
        "shadowInteractive"?: 'active' | 'hover' | 'stacked' | 'sticky';
        /**
          * The size prop effects the card padding only.
         */
        "size"?: 'sm';
    }
    interface LdCheckbox {
        /**
          * Automatically focus the form control when the page is loaded.
         */
        "autofocus"?: boolean;
        /**
          * Indicates whether the checkbox is checked.
         */
        "checked"?: boolean;
        /**
          * Disabled state of the checkbox.
         */
        "disabled"?: boolean;
        /**
          * Associates the control with a form element.
         */
        "form"?: string;
        /**
          * Set this property to `true` to indicate that the checkbox's value is neither true nor false. The prop is removed automatically as soon as the checkbox is clicked (if not disabled).
         */
        "indeterminate"?: boolean;
        /**
          * Set this property to `true` in order to mark the checkbox visually as invalid.
         */
        "invalid"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the input.
         */
        "ldTabindex"?: number | undefined;
        /**
          * Display mode.
         */
        "mode"?: 'highlight' | 'danger';
        /**
          * Used to specify the name of the control.
         */
        "name"?: string;
        /**
          * Emitted when the input value changed and the element loses focus.
         */
        "onLdchange"?: (event: LdCheckboxCustomEvent<boolean>) => void;
        /**
          * Emitted when the input value changed.
         */
        "onLdinput"?: (event: LdCheckboxCustomEvent<boolean>) => void;
        /**
          * The value is not editable.
         */
        "readonly"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Set this property to `true` in order to mark the checkbox as required.
         */
        "required"?: boolean;
        /**
          * Checkbox tone. Use `'dark'` on white backgrounds. Default is a light tone.
         */
        "tone"?: 'dark';
        /**
          * The input value.
         */
        "value"?: string;
    }
    interface LdCircularProgress {
        /**
          * Defines the string value or identifies the element (or elements) that label the progressbar element providing an accessible name.
         */
        "ariaLabeledby"?: string;
        /**
          * Set to a decimal value representing the maximum value, and greater than aria-valuemin. If not present, the default value is 100.
         */
        "ariaValuemax"?: number;
        /**
          * Set to a decimal value representing the minimum value, and less than aria-valuemax. If not present, the default value is 0.
         */
        "ariaValuemin"?: number;
        /**
          * Only present and required if the value is not indeterminate. Set to a decimal value between 0, or valuemin if present, and aria-valuemax indicating the current value of the progress bar.
         */
        "ariaValuenow"?: number;
        /**
          * Assistive technologies often present the value of aria-valuenow as a percentage. If this would not be accurate use this property to make the progress bar value understandable.
         */
        "ariaValuetext"?: string;
        /**
          * Styles the progress bar in a way that it looks good on the primary color of the current theme.
         */
        "brandColor"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdCrumb {
        /**
          * The URL that the hyperlink points to.
         */
        "href"?: string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdHeader {
        /**
          * Hides header.
         */
        "hidden"?: boolean;
        /**
          * Hide the header when the user scrolls down and show it again, when the user scrolls up.
         */
        "hideOnScroll"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Title attribute of the logo link.
         */
        "logoTitle"?: string;
        /**
          * URL that the logo links to.
         */
        "logoUrl"?: string;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Name shown on the right side of the logo.
         */
        "siteName"?: string;
        /**
          * Make the header sticky.
         */
        "sticky"?: boolean;
    }
    interface LdIcon {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * The icon name.
         */
        "name"?: string;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Size of the icon.
         */
        "size"?: 'sm' | 'lg';
    }
    interface LdInput {
        /**
          * Hint for expected file type in file upload controls.
         */
        "accept"?: string;
        /**
          * Hint for form autofill feature.
         */
        "autocomplete"?: string;
        /**
          * Automatically focus the form control when the page is loaded.
         */
        "autofocus"?: boolean;
        /**
          * Media capture input method in file upload controls.
         */
        "capture"?: string;
        /**
          * The number of columns.
         */
        "cols"?: number;
        /**
          * Name of form field to use for sending the element's directionality in form submission.
         */
        "dirname"?: string;
        /**
          * Whether the form control is disabled.
         */
        "disabled"?: boolean;
        /**
          * Associates the control with a form element.
         */
        "form"?: string;
        /**
          * Set this property to `true` in order to mark the field visually as invalid.
         */
        "invalid"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the input.
         */
        "ldTabindex"?: number | undefined;
        /**
          * Value of the id attribute of the `<datalist>` of autocomplete options.
         */
        "list"?: string;
        /**
          * Maximum value.
         */
        "max"?: string | number;
        /**
          * Maximum length (number of characters) of `value`.
         */
        "maxlength"?: string;
        /**
          * Minimum value.
         */
        "min"?: string | number;
        /**
          * Minimum length (number of characters) of `value`.
         */
        "minlength"?: string;
        /**
          * Uses textarea instead of input internally. Setting this attribute to true disables the attribute type and both slots.
         */
        "multiline"?: boolean;
        /**
          * Boolean. Whether to allow multiple values.
         */
        "multiple"?: boolean;
        /**
          * Used to specify the name of the control.
         */
        "name"?: string;
        /**
          * Emitted when the input value changed and the element loses focus.
         */
        "onLdchange"?: (event: LdInputCustomEvent<string>) => void;
        /**
          * Emitted when the input value changed.
         */
        "onLdinput"?: (event: LdInputCustomEvent<string>) => void;
        /**
          * Pattern the `value` must match to be valid.
         */
        "pattern"?: string;
        /**
          * The input placeholder.
         */
        "placeholder"?: string;
        /**
          * The value is not editable.
         */
        "readonly"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * A value is required for the form to be submittable.
         */
        "required"?: boolean;
        /**
          * Whether the multiline input is resizable, and if so, in which directions.
         */
        "resize"?: 'none' | 'both' | 'horizontal' | 'vertical';
        /**
          * The number of rows.
         */
        "rows"?: number;
        /**
          * Size of the input.
         */
        "size"?: 'sm' | 'lg';
        /**
          * Incremental values that are valid.
         */
        "step"?: string;
        /**
          * Input tone. Use `'dark'` on white backgrounds. Default is a light tone.
         */
        "tone"?: 'dark';
        /**
          * The input type.
         */
        "type"?: string;
        /**
          * The input value.
         */
        "value"?: string;
    }
    interface LdInputMessage {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Input message mode.
         */
        "mode"?: 'error' | 'info' | 'valid';
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdLabel {
        /**
          * Align input message with input position.
         */
        "alignMessage"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Relative position to labeled element. Default is top.
         */
        "position"?: 'left' | 'right';
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Size of the label. Default is small.
         */
        "size"?: 'm';
    }
    interface LdLink {
        /**
          * Displays chevron icon.
         */
        "chevron"?: 'start' | 'end';
        /**
          * The disabled attribute sets `aria-disabled="true"` on the rendered anchor element.
         */
        "disabled"?: boolean;
        /**
          * the URL that the hyperlink points to
         */
        "href"?: any;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the input.
         */
        "ldTabindex"?: number | undefined;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * The `target` attributed can be used in conjunction with the `href` attribute. See [mdn docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target) for more information on the `target` attribute.
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
    }
    interface LdLoading {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Used as svg title element content.
         */
        "label"?: string;
        /**
          * Uses neutral colors.
         */
        "neutral"?: boolean;
        /**
          * Pauses all animations.
         */
        "paused"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdModal {
        /**
          * Use a blurry backdrop.
         */
        "blurryBackdrop"?: boolean;
        /**
          * The modal is cancelable by default. However, you can change this using this prop.
         */
        "cancelable"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Emitted when modal has closed (after transition).
         */
        "onLdmodalclosed"?: (event: LdModalCustomEvent<any>) => void;
        /**
          * Emitted when modal is closing (before transition).
         */
        "onLdmodalclosing"?: (event: LdModalCustomEvent<any>) => void;
        /**
          * Emitted when modal has opened (after transition).
         */
        "onLdmodalopened"?: (event: LdModalCustomEvent<any>) => void;
        /**
          * Emitted when modal is opening (before transition).
         */
        "onLdmodalopening"?: (event: LdModalCustomEvent<any>) => void;
        /**
          * Indicates that the modal dialog is active and can be interacted with.
         */
        "open"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdNotice {
        /**
          * Headline of the notice.
         */
        "headline"?: string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Mode of the notice.
         */
        "mode"?: 'error' | 'info' | 'warning' | 'success';
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdNotification {
        /**
          * Notification placement within the screen.
         */
        "placement"?: 'top' | 'bottom';
    }
    interface LdOption {
        /**
          * Disables the option.
         */
        "disabled"?: boolean;
        /**
          * Set to true on filtering via select input.
         */
        "hidden"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * If present, this boolean attribute indicates that the option is selected.
         */
        "selected"?: boolean;
        /**
          * The content of this attribute represents the value to be submitted with the form, should this option be selected. If this attribute is omitted, the value is taken from the text content of the option element.
         */
        "value"?: string;
    }
    interface LdOptionInternal {
        /**
          * Disables the option.
         */
        "disabled"?: boolean;
        /**
          * Set to true on filtering via select input.
         */
        "hidden"?: boolean;
        /**
          * Display mode.
         */
        "mode"?: 'checkbox' | undefined;
        /**
          * Emitted on either selection or de-selection of the option.
         */
        "onLdoptionselect"?: (event: LdOptionInternalCustomEvent<boolean>) => void;
        /**
          * Prevents deselection of a selected options when the selected option is clicked in single select mode.
         */
        "preventDeselection"?: boolean;
        /**
          * If present, this boolean attribute indicates that the option is selected.
         */
        "selected"?: boolean;
        /**
          * Size of the select trigger button for applying according paddings.
         */
        "size"?: 'sm' | 'lg';
        /**
          * The content of this attribute represents the value to be submitted with the form, should this option be selected. If this attribute is omitted, the value is taken from the text content of the option element.
         */
        "value"?: string;
    }
    interface LdPagination {
        /**
          * Switch colors for brand background.
         */
        "brandColor"?: boolean;
        /**
          * Label text for the end button (replaces the icon).
         */
        "endLabel"?: string;
        /**
          * Hide the buttons to navigate forward/backward.
         */
        "hidePrevNext"?: boolean;
        /**
          * Hide the buttons to navigate to the first/last item.
         */
        "hideStartEnd"?: boolean;
        /**
          * Label to communicate the type of an item.
         */
        "itemLabel"?: string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * The number of items/pages available for pagination (required to let the user jump to the last item/page).
         */
        "length"?: number;
        /**
          * Items display mode, default as numbers.
         */
        "mode"?: 'numbers' | 'dots';
        /**
          * Label text for the forward button (replaces the icon).
         */
        "nextLabel"?: string;
        /**
          * Number of next/previous items visible.
         */
        "offset"?: number;
        /**
          * Dispatched, if the selected index changes.
         */
        "onLdchange"?: (event: LdPaginationCustomEvent<number>) => void;
        /**
          * Label text for the backward button (replaces the icon).
         */
        "prevLabel"?: string;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * The currently selected item (an index of `-1` means nothing is selected).
         */
        "selectedIndex"?: number;
        /**
          * Size of the pagination.
         */
        "size"?: 'sm' | 'lg';
        /**
          * Space between dots (dots mode only, default depending on `size` prop).
         */
        "space"?: string;
        /**
          * Label text for the start button (replaces the icon).
         */
        "startLabel"?: string;
        /**
          * Number of items permanently visible at the start/end.
         */
        "sticky"?: number;
    }
    interface LdProgress {
        /**
          * Defines the string value or identifies the element (or elements) that label the progressbar element providing an accessible name.
         */
        "ariaLabeledby"?: string;
        /**
          * Set to a decimal value representing the maximum value, and greater than aria-valuemin. If not present, the default value is 100.
         */
        "ariaValuemax"?: number;
        /**
          * Set to a decimal value representing the minimum value, and less than aria-valuemax. If not present, the default value is 0.
         */
        "ariaValuemin"?: number;
        /**
          * Only present and required if the value is not indeterminate. Set to a decimal value between 0, or valuemin if present, and aria-valuemax indicating the current value of the progress bar.
         */
        "ariaValuenow"?: number;
        /**
          * Assistive technologies often present the value of aria-valuenow as a percentage. If this would not be accurate use this property to make the progress bar value understandable.
         */
        "ariaValuetext"?: string;
        /**
          * Styles the progress bar in a way that it looks good on the primary color of the current theme.
         */
        "brandColor"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Used to show indeterminate or pending progress state.
         */
        "pending"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Devides progress bar in multiple progress steps.
         */
        "steps"?: boolean;
    }
    interface LdRadio {
        /**
          * Automatically focus the form control when the page is loaded.
         */
        "autofocus"?: boolean;
        /**
          * Indicates whether the radio button is selected.
         */
        "checked"?: boolean;
        /**
          * Disabled state of the radio.
         */
        "disabled"?: boolean;
        /**
          * Associates the control with a form element.
         */
        "form"?: string;
        /**
          * Set this property to `true` in order to mark the radio visually as invalid.
         */
        "invalid"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the input.
         */
        "ldTabindex"?: number | undefined;
        /**
          * Display mode.
         */
        "mode"?: 'highlight' | 'danger';
        /**
          * Used to specify the name of the control.
         */
        "name": string;
        /**
          * Emitted when the input value changed and the element loses focus.
         */
        "onLdchange"?: (event: LdRadioCustomEvent<boolean>) => void;
        /**
          * Emitted when the input value changed.
         */
        "onLdinput"?: (event: LdRadioCustomEvent<boolean>) => void;
        /**
          * The value is not editable.
         */
        "readonly"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Set this property to `true` in order to mark the radio button as required.
         */
        "required"?: boolean;
        /**
          * radio tone. Use `'dark'` on white backgrounds. Default is a light tone.
         */
        "tone"?: 'dark';
        /**
          * The input value.
         */
        "value"?: string;
    }
    interface LdSelect {
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads. Only one form element in a document can have the autofocus attribute.
         */
        "autofocus"?: boolean;
        /**
          * Disabled state of the component.
         */
        "disabled"?: boolean;
        /**
          * Set this property to `true` in order to enable an input field for filtering options.
         */
        "filter"?: boolean;
        /**
          * The filter input placeholder.
         */
        "filterPlaceholder"?: string;
        /**
          * The form element to associate the select with (its form owner).
         */
        "form"?: string;
        /**
          * Set this property to `true` in order to mark the select visually as invalid.
         */
        "invalid"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the trigger button.
         */
        "ldTabindex"?: number;
        /**
          * Constrains the height of the trigger button by replacing overflowing selection with a "+X more" indicator.
         */
        "maxRows"?: number;
        /**
          * Display mode.
         */
        "mode"?: | 'detached' // = default  + small gap between trigger button and popper
    | 'inline' //   = detached + minumum trigger button width
    | 'ghost';
        /**
          * Multiselect mode.
         */
        "multiple"?: boolean;
        /**
          * Used to specify the name of the control.
         */
        "name"?: string;
        /**
          * Emitted with an array of selected values when an alteration to the selection is committed by the user.
         */
        "onLdchange"?: (event: LdSelectCustomEvent<string[]>) => void;
        /**
          * Emitted with an array of selected values when an alteration to the selection is committed by the user.
         */
        "onLdinput"?: (event: LdSelectCustomEvent<string[]>) => void;
        /**
          * Used as trigger button label in multiselect mode and in single select mode if nothing is selected.
         */
        "placeholder"?: string;
        /**
          * Attached as CSS class to the select popper element.
         */
        "popperClass"?: string;
        /**
          * Prevents a state with no options selected after initial selection in single select mode.
         */
        "preventDeselection"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * A Boolean attribute indicating that an option with a non-empty string value must be selected.
         */
        "required"?: boolean;
        /**
          * Currently selected option(s) (read only!)
         */
        "selected"?: SelectOption[];
        /**
          * Size of the select trigger button.
         */
        "size"?: 'sm' | 'lg';
        /**
          * Tether options object to be merged with the default options (optionally stringified).
         */
        "tetherOptions"?: Partial<Tether.ITetherOptions> | string;
    }
    interface LdSelectPopper {
        /**
          * A watcher is applied to the CSS class in order to be able to react to tether changes.
         */
        "class"?: string;
        /**
          * Popper is visually detached from the select trigger element (there's a gap between the two).
         */
        "detached"?: boolean;
        /**
          * Indicates if select element is expanded.
         */
        "expanded"?: boolean;
        /**
          * Set this property to `true` in order to enable an input field for filtering options.
         */
        "filter"?: boolean;
        /**
          * The filter input placeholder.
         */
        "filterPlaceholder"?: string;
        /**
          * Emitted on filter change with the filter input value.
         */
        "onLdselectfilterchange"?: (event: LdSelectPopperCustomEvent<string>) => void;
        /**
          * Attaches CSS class to the select popper element.
         */
        "popperClass"?: string;
        /**
          * Size of the select trigger button (required for applying the correct shadow height).
         */
        "size"?: 'sm' | 'lg';
        /**
          * Since the select popper is located outside the select element, the theme needs to be applied as a prop.
         */
        "theme"?: string;
    }
    interface LdSidenav {
        /**
          * Whether the nav should be aligned to the left or the right side of its container.
         */
        "align"?: 'left' | 'right';
        /**
          * The breakpoint at which the sidenav takes full width and can be opened and closed as opposed to being expanded and collapsed. The prop value is used in a max-width media query.
         */
        "breakpoint"?: string;
        /**
          * Makes the navigation collapse either on - explicit toggle button click, - when the user clicks somewhere outside the element or - when the user moves the cursor / focus outside the element. The modes are inclusive from right to left: - clickoutside applies if the collapse trigger is set to mouseout - toggle applies if the collapse trigger is set to clickoutside
         */
        "collapseTrigger"?: 'toggle' | 'clickoutside' | 'mouseout';
        /**
          * Indicates that the navigation is collapsed to the side of its container.
         */
        "collapsed"?: boolean;
        /**
          * Allows the side navigation to be collapsed to the side of its container.
         */
        "collapsible"?: boolean;
        /**
          * Makes the navigation expand either on - explicit toggle button click, - when the user moves the cursor over the element. The modes are inclusive from right to left: - toggle applies if the expand trigger is set to mouseenter
         */
        "expandTrigger"?: 'toggle' | 'mouseenter';
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Label to be used for the landmark element (the sidenav itself).
         */
        "label"?: string;
        /**
          * Set to true if you'd like to have a sidenav which partially collapses in way, that slotted ld-navitem components are displayed as icon buttons.
         */
        "narrow"?: boolean;
        /**
          * Emitted when the sidenav registers a match media change event.
         */
        "onLdSidenavBreakpointChange"?: (event: LdSidenavCustomEvent<boolean>) => void;
        /**
          * Emitted when the sidenav collapses or expands.
         */
        "onLdSidenavCollapsedChange"?: (event: LdSidenavCustomEvent<{
    collapsed: boolean
    fully: boolean
  }>) => void;
        /**
          * Emitted when the sidenav opens or closes.
         */
        "onLdSidenavOpenChange"?: (event: LdSidenavCustomEvent<boolean>) => void;
        /**
          * Indicates that the navigation is visible in a viewport which is smaller than the value of the `breakpoint` prop.
         */
        "open"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Disables transitions on collapsing and expansion of the sidenav. This is especially usefull when the page content gets pushed to the side on sidenav expansion, and you want to prevent too many layout shifts during the transition.
         */
        "toggleTransitionDisabled"?: boolean;
        /**
          * Enables focus trapping. Accespts a CSS selector which indicates what is still focusable outside the sidenav, when the sidenav is closable and open (i.e. "ld-header *"). Use an empty string to enable focus trapping without specifying focusable elements outside the sidenav component.
         */
        "trapFocus"?: string;
    }
    interface LdSidenavAccordion {
        /**
          * Indicates that the accordion section is expanded.
         */
        "expanded"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Emitted on accordion expand or collaps transition end.
         */
        "onLdSidenavAccordionTransitionEnd"?: (event: LdSidenavAccordionCustomEvent<any>) => void;
        /**
          * Set to false to make the accordion collapse on sidenav collapse or slide change.
         */
        "preserveState"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Split the accordion toggle in two parts with the second part containing the caret icon and being responsible for expanding / collapsing the accordion panel.
         */
        "split"?: boolean;
    }
    interface LdSidenavBack {
        /**
          * Used as aria-label for the back button
         */
        "backLabel"?: string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Emitted on click.
         */
        "onLdSidenavBack"?: (event: LdSidenavBackCustomEvent<any>) => void;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdSidenavHeader {
        /**
          * aria-label to be used on the anchor element within the sidenav header.
         */
        "ariaLabel"?: string;
        /**
          * href to be used on the anchor element within the sidenav header.
         */
        "href"?: string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Label to be used for the toggle button when navigation is expanded.
         */
        "labelCollapse"?: string;
        /**
          * Label to be used for the toggle button when navigation is collapsed.
         */
        "labelExpand"?: string;
        /**
          * Emitted on toggle click.
         */
        "onLdSidenavHeaderToggleClick"?: (event: LdSidenavHeaderCustomEvent<any>) => void;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdSidenavHeading {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdSidenavNavitem {
        /**
          * By default, the sidenav automatically expands on click of a navitem, which has a `to` property or acts as an accordion toggle. You can overwrite this behavior by using this prop to explicitly force or prevent expansion of the sidenav.
         */
        "expandOnClick"?: boolean;
        /**
          * Transforms the nav item to an anchor element.
         */
        "href"?: string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the button.
         */
        "ldTabindex"?: number | undefined;
        /**
          * Display mode. In secondary mode the navitem is less high, displays a filled dot instead of the icon and is hidden when the sidenav collapses. The tertiary mode is similar to secondary mode, with the navitem indented and the dot being empty and having a border.
         */
        "mode"?: 'secondary' | 'tertiary';
        /**
          * Emitted on click.
         */
        "onLdSidenavNavitemClick"?: (event: LdSidenavNavitemCustomEvent<any>) => void;
        /**
          * Emitted on click if prop to is set.
         */
        "onLdSidenavNavitemTo"?: (event: LdSidenavNavitemCustomEvent<{ id: string; label: string }>) => void;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Applies full border-radius.
         */
        "rounded"?: boolean;
        /**
          * Sets visual indicator to denote that the nav item is currently selected.
         */
        "selected"?: boolean;
        /**
          * The `target` attributed can be used in conjunction with the `href` attribute. See [mdn docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target) for more information on the `target` attribute.
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
        /**
          * Accepts an id of an ld-subnav component to navigate to it on click.
         */
        "to"?: string;
    }
    interface LdSidenavScrollerInternal {
    }
    interface LdSidenavSeparator {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdSidenavSlider {
        /**
          * ID of the subnav that shall be shown on initial render.
         */
        "currentSubnav"?: string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Used in the ld-sidenav-back component to display parent nav label.
         */
        "label"?: string;
        /**
          * Emitted on navigation (before transition ends).
         */
        "onLdSidenavSliderChange"?: (event: LdSidenavSliderCustomEvent<{ id: string; label: string } | undefined>) => void;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdSidenavSubnav {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Used in the ld-sidenav-back component to display parent nav label.
         */
        "label"?: string;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdSidenavToggleOutside {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Label to be used for the toggle button when navigation is collapsed.
         */
        "labelExpand"?: string;
        /**
          * Tab index of the toggle.
         */
        "ldTabindex"?: number | undefined;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdSlider {
        /**
          * Alternative disabled state that keeps element focusable
         */
        "ariaDisabled"?: string;
        /**
          * Disabled state of the slider
         */
        "disabled"?: boolean;
        /**
          * Prevents rendering of the stop labels below the slider
         */
        "hideStopLabels"?: boolean;
        /**
          * Prevents rendering of the value labels below the slider
         */
        "hideValueLabels"?: boolean;
        /**
          * Makes the current values only visible on interaction
         */
        "hideValues"?: boolean;
        /**
          * Specifies the legal number intervals
         */
        "indicators"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * "From" value label (when exactly 2 values are given)
         */
        "labelFrom"?: string;
        /**
          * "To" value label (when exactly 2 values are given)
         */
        "labelTo"?: string;
        /**
          * "Value" label (when exactly 2 values are given)
         */
        "labelValue"?: string;
        /**
          * Tab index of the input(s).
         */
        "ldTabindex"?: number | undefined;
        /**
          * Specifies the maximum value allowed
         */
        "max"?: number;
        /**
          * Specifies the minimum value allowed
         */
        "min"?: number;
        /**
          * Swap which areas are being marked as selected and deselected
         */
        "negative"?: boolean;
        "onLdchange"?: (event: LdSliderCustomEvent<typeof this.values>) => void;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Size of the thumb(s).
         */
        "size"?: 'sm' | 'lg';
        /**
          * Offset inside which a thumb snaps to a stop point
         */
        "snapOffset"?: number;
        /**
          * Specifies the legal number intervals
         */
        "step"?: number;
        /**
          * Adds custom stop points to the slider (instead of steps)
         */
        "stops"?: string;
        /**
          * Allows swapping of thumbs
         */
        "swappable"?: boolean;
        /**
          * Adds custom stop points to the slider (instead of steps)
         */
        "unit"?: string;
        /**
          * Specifies the default value
         */
        "value"?: string;
        /**
          * Width of the slider
         */
        "width"?: string;
    }
    interface LdSrLive {
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdSrOnly {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdStep {
        /**
          * Switch colors for brand background
         */
        "brandColor"?: boolean;
        /**
          * Step is the current step
         */
        "current"?: boolean;
        /**
          * Description text to display below the step name (vertical mode only)
         */
        "description"?: string;
        /**
          * Step is not clickable
         */
        "disabled"?: boolean;
        /**
          * Step is done
         */
        "done"?: boolean;
        /**
          * Link to the step (makes the step an anchor instead of a button)
         */
        "href"?: string;
        /**
          * Permanently show a custom icon inside the dot
         */
        "icon"?: HTMLLdIconElement['name'];
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Label for current step (scree-reader only)
         */
        "labelCurrent"?: string;
        /**
          * Label for step that is done (scree-reader only)
         */
        "labelDone"?: string;
        /**
          * Label for step that is optional (scree-reader only)
         */
        "labelOptional"?: string;
        /**
          * Label for step that was skipped (scree-reader only)
         */
        "labelSkipped"?: string;
        /**
          * Additional hint in label for step that is done and was optional (scree-reader only)
         */
        "labelWasOptional"?: string;
        /**
          * Indicates that the next step is not active
         */
        "lastActive"?: boolean;
        /**
          * Tab index of the step
         */
        "ldTabindex"?: number | undefined;
        /**
          * Step can be processed next
         */
        "next"?: boolean;
        /**
          * Emitted when the focusable element is clicked and step is neither current nor disabled
         */
        "onLdstepselected"?: (event: LdStepCustomEvent<SelectedDetail>) => void;
        /**
          * Step may be skipped
         */
        "optional"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Step size
         */
        "size"?: 'sm' | 'lg';
        /**
          * Step was skipped
         */
        "skipped"?: boolean;
        /**
          * Vertical layout
         */
        "vertical"?: boolean;
    }
    interface LdStepper {
        /**
          * Switch colors for brand background.
         */
        "brandColor"?: boolean;
        /**
          * Indicates whether the steps should be evenly distributed or fit to their content
         */
        "fitContent"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Step summary template for the screen-reader label, containing the index of the current step and the overall number of steps
         */
        "labelSummaryTemplate"?: string;
        /**
          * Template for the screen-reader label, containing the label of the current step and the steps summary
         */
        "labelTemplate"?: string;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Step size
         */
        "size"?: HTMLLdStepElement['size'];
        /**
          * Vertical layout
         */
        "vertical"?: boolean;
    }
    interface LdSwitch {
        /**
          * Alternative disabled state that keeps element focusable
         */
        "ariaDisabled"?: string;
        /**
          * Automatically focus the form control when the page is loaded.
         */
        "autofocus"?: boolean;
        /**
          * Defines switch custom color
         */
        "brandColor"?: boolean;
        /**
          * Disabled state of the switch.
         */
        "disabled"?: boolean;
        /**
          * Make each switch item take up as little space as its content requires.
         */
        "fitContent"?: boolean;
        /**
          * Associates the control with a form element.
         */
        "form"?: string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the input.
         */
        "ldTabindex"?: number | undefined;
        /**
          * Defines a description of the contents of the switch component.
         */
        "legend"?: string;
        /**
          * Used to specify the name of the control.
         */
        "name"?: string;
        /**
          * Emitted with the value of the selected switch item.
         */
        "onLdswitchchange"?: (event: LdSwitchCustomEvent<string>) => void;
        /**
          * The value is not editable.
         */
        "readonly"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Set this property to `true` in order to mark the switch as required.
         */
        "required"?: boolean;
        /**
          * Size of the switch.
         */
        "size"?: 'sm' | 'md' | 'lg';
    }
    interface LdSwitchItem {
        /**
          * Alternative disabled state that keeps element focusable
         */
        "ariaDisabled"?: string;
        /**
          * Indicates whether the switch item is selected.
         */
        "checked"?: boolean;
        /**
          * Disabled state of the switch item.
         */
        "disabled"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * The input value.
         */
        "value"?: string;
    }
    interface LdTab {
        /**
          * Disables the tab.
         */
        "disabled"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the tab.
         */
        "ldTabindex"?: number | undefined;
        /**
          * Emitted with the id of the selected tab.
         */
        "onLdtabselect"?: (event: LdTabCustomEvent<undefined>) => void;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * If present, this boolean attribute indicates that the tab is selected.
         */
        "selected"?: boolean;
    }
    interface LdTablist {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Display mode.
         */
        "mode"?: | 'ghost'
    | 'brand-color'
    | 'floating'
    | 'floating-on-brand-color';
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Sets border radii.
         */
        "rounded"?: 'all' | 'all-lg' | 'top' | 'top-lg';
        /**
          * Size of the tabs.
         */
        "size"?: 'sm' | 'lg';
    }
    interface LdTabpanel {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdTabpanellist {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdTabs {
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Emitted with the id of the selected tab.
         */
        "onLdtabchange"?: (event: LdTabsCustomEvent<string>) => void;
        /**
          * reference to component
         */
        "ref"?: any;
    }
    interface LdToggle {
        /**
          * Alternative disabled state that keeps element focusable
         */
        "ariaDisabled"?: string;
        /**
          * Automatically focus the form control when the page is loaded.
         */
        "autofocus"?: boolean;
        /**
          * Indicates whether the toggle is "on".
         */
        "checked"?: boolean;
        /**
          * Disabled state of the checkbox.
         */
        "disabled"?: boolean;
        /**
          * Associates the control with a form element.
         */
        "form"?: string;
        /**
          * Set this property to `true` in order to mark the checkbox visually as invalid.
         */
        "invalid"?: boolean;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Tab index of the input.
         */
        "ldTabindex"?: number | undefined;
        /**
          * Used to specify the name of the control.
         */
        "name"?: string;
        /**
          * Emitted when the input value changed and the element loses focus.
         */
        "onLdchange"?: (event: LdToggleCustomEvent<boolean>) => void;
        /**
          * Emitted when the input value changed.
         */
        "onLdinput"?: (event: LdToggleCustomEvent<boolean>) => void;
        /**
          * The value is not editable.
         */
        "readonly"?: boolean;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Set this property to `true` in order to mark the checkbox as required.
         */
        "required"?: boolean;
        /**
          * Size of the toggle.
         */
        "size"?: 'sm' | 'lg';
        /**
          * The input value.
         */
        "value"?: string;
    }
    interface LdTooltip {
        /**
          * Show arrow
         */
        "arrow"?: boolean;
        /**
          * Disable tooltip trigger
         */
        "disabled"?: boolean;
        /**
          * Delay in ms until tooltip hides (only when trigger type is 'hover')
         */
        "hideDelay"?: number;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * Position of the tooltip relative to the trigger element (also affects the arrow position)
         */
        "position"?: Position;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * Delay in ms until tooltip shows (only when trigger type is 'hover')
         */
        "showDelay"?: number;
        /**
          * The tooltip size (effects tooltip padding only)
         */
        "size"?: 'sm';
        /**
          * The rendered HTML tag for the tooltip trigger.
         */
        "tag"?: string;
        /**
          * Tether options object to be merged with the default options (optionally stringified).
         */
        "tetherOptions"?: Partial<Tether.ITetherOptions> | string;
        /**
          * Event type that triggers the tooltip
         */
        "triggerType"?: 'click' | 'hover';
    }
    interface LdTooltipPopper {
        /**
          * Show arrow
         */
        "arrow"?: boolean;
        /**
          * Whether the tooltip has a custom trigger or not
         */
        "hasDefaultTrigger"?: boolean;
        /**
          * The tooltip size (effects tooltip padding only)
         */
        "size"?: 'sm';
        /**
          * Event type that triggers the tooltip
         */
        "triggerType"?: 'click' | 'hover';
    }
    interface LdTypo {
        /**
          * Since b* and xb* variants are uppercase, screen readers need to be served a (non-uppercase) aria-label (otherwise they will read out the heading letter by letter). If you're using a b* or xb* variant, an aria-label will be set automatically on the element. The component will use the inner HTML for the label implicitly. If you want to set an aria-label explicitly (such as when you have inner HTML that should not be part of the label), you can use this property.
         */
        "ariaLabel"?: string;
        /**
          * for tracking the node's identity when working with lists
         */
        "key"?: string | number;
        /**
          * reference to component
         */
        "ref"?: any;
        /**
          * The rendered HTML tag. Overrides tag inferred from the variant.
         */
        "tag"?: string;
        /**
          * The font style. Every variant has a default tag that it renders with.
         */
        "variant"?: | 'body-xs'
    | 'body-s'
    | 'body-m'
    | 'body-l'
    | 'body-xl'
    | 'cap-m'
    | 'cap-l'
    | 'label-s'
    | 'label-m'
    | 'h1'
    | 'h2'
    | 'h3'
    | 'h4'
    | 'h5'
    | 'h6'
    | 'b1'
    | 'b2'
    | 'b3'
    | 'b4'
    | 'b5'
    | 'b6'
    | 'xb1'
    | 'xb2'
    | 'xb3'
    | 'xh1'
    | 'xh2'
    | 'xh3'
    | 'xh4'
    | 'xh5'
    | 'xh6';
    }
    interface IntrinsicElements {
        "ld-accordion": LdAccordion;
        "ld-accordion-panel": LdAccordionPanel;
        "ld-accordion-section": LdAccordionSection;
        "ld-accordion-toggle": LdAccordionToggle;
        "ld-badge": LdBadge;
        "ld-bg-cells": LdBgCells;
        "ld-breadcrumbs": LdBreadcrumbs;
        "ld-button": LdButton;
        "ld-card": LdCard;
        "ld-checkbox": LdCheckbox;
        "ld-circular-progress": LdCircularProgress;
        "ld-crumb": LdCrumb;
        "ld-header": LdHeader;
        "ld-icon": LdIcon;
        "ld-input": LdInput;
        "ld-input-message": LdInputMessage;
        "ld-label": LdLabel;
        "ld-link": LdLink;
        "ld-loading": LdLoading;
        "ld-modal": LdModal;
        "ld-notice": LdNotice;
        "ld-notification": LdNotification;
        "ld-option": LdOption;
        "ld-option-internal": LdOptionInternal;
        "ld-pagination": LdPagination;
        "ld-progress": LdProgress;
        "ld-radio": LdRadio;
        "ld-select": LdSelect;
        "ld-select-popper": LdSelectPopper;
        "ld-sidenav": LdSidenav;
        "ld-sidenav-accordion": LdSidenavAccordion;
        "ld-sidenav-back": LdSidenavBack;
        "ld-sidenav-header": LdSidenavHeader;
        "ld-sidenav-heading": LdSidenavHeading;
        "ld-sidenav-navitem": LdSidenavNavitem;
        "ld-sidenav-scroller-internal": LdSidenavScrollerInternal;
        "ld-sidenav-separator": LdSidenavSeparator;
        "ld-sidenav-slider": LdSidenavSlider;
        "ld-sidenav-subnav": LdSidenavSubnav;
        "ld-sidenav-toggle-outside": LdSidenavToggleOutside;
        "ld-slider": LdSlider;
        "ld-sr-live": LdSrLive;
        "ld-sr-only": LdSrOnly;
        "ld-step": LdStep;
        "ld-stepper": LdStepper;
        "ld-switch": LdSwitch;
        "ld-switch-item": LdSwitchItem;
        "ld-tab": LdTab;
        "ld-tablist": LdTablist;
        "ld-tabpanel": LdTabpanel;
        "ld-tabpanellist": LdTabpanellist;
        "ld-tabs": LdTabs;
        "ld-toggle": LdToggle;
        "ld-tooltip": LdTooltip;
        "ld-tooltip-popper": LdTooltipPopper;
        "ld-typo": LdTypo;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ld-accordion": LocalJSX.LdAccordion & JSXBase.HTMLAttributes<HTMLLdAccordionElement>;
            "ld-accordion-panel": LocalJSX.LdAccordionPanel & JSXBase.HTMLAttributes<HTMLLdAccordionPanelElement>;
            "ld-accordion-section": LocalJSX.LdAccordionSection & JSXBase.HTMLAttributes<HTMLLdAccordionSectionElement>;
            "ld-accordion-toggle": LocalJSX.LdAccordionToggle & JSXBase.HTMLAttributes<HTMLLdAccordionToggleElement>;
            "ld-badge": LocalJSX.LdBadge & JSXBase.HTMLAttributes<HTMLLdBadgeElement>;
            "ld-bg-cells": LocalJSX.LdBgCells & JSXBase.HTMLAttributes<HTMLLdBgCellsElement>;
            "ld-breadcrumbs": LocalJSX.LdBreadcrumbs & JSXBase.HTMLAttributes<HTMLLdBreadcrumbsElement>;
            "ld-button": LocalJSX.LdButton & JSXBase.HTMLAttributes<HTMLLdButtonElement>;
            "ld-card": LocalJSX.LdCard & JSXBase.HTMLAttributes<HTMLLdCardElement>;
            "ld-checkbox": LocalJSX.LdCheckbox & JSXBase.HTMLAttributes<HTMLLdCheckboxElement>;
            "ld-circular-progress": LocalJSX.LdCircularProgress & JSXBase.HTMLAttributes<HTMLLdCircularProgressElement>;
            "ld-crumb": LocalJSX.LdCrumb & JSXBase.HTMLAttributes<HTMLLdCrumbElement>;
            "ld-header": LocalJSX.LdHeader & JSXBase.HTMLAttributes<HTMLLdHeaderElement>;
            "ld-icon": LocalJSX.LdIcon & JSXBase.HTMLAttributes<HTMLLdIconElement>;
            "ld-input": LocalJSX.LdInput & JSXBase.HTMLAttributes<HTMLLdInputElement>;
            "ld-input-message": LocalJSX.LdInputMessage & JSXBase.HTMLAttributes<HTMLLdInputMessageElement>;
            "ld-label": LocalJSX.LdLabel & JSXBase.HTMLAttributes<HTMLLdLabelElement>;
            "ld-link": LocalJSX.LdLink & JSXBase.HTMLAttributes<HTMLLdLinkElement>;
            "ld-loading": LocalJSX.LdLoading & JSXBase.HTMLAttributes<HTMLLdLoadingElement>;
            "ld-modal": LocalJSX.LdModal & JSXBase.HTMLAttributes<HTMLLdModalElement>;
            "ld-notice": LocalJSX.LdNotice & JSXBase.HTMLAttributes<HTMLLdNoticeElement>;
            "ld-notification": LocalJSX.LdNotification & JSXBase.HTMLAttributes<HTMLLdNotificationElement>;
            "ld-option": LocalJSX.LdOption & JSXBase.HTMLAttributes<HTMLLdOptionElement>;
            "ld-option-internal": LocalJSX.LdOptionInternal & JSXBase.HTMLAttributes<HTMLLdOptionInternalElement>;
            "ld-pagination": LocalJSX.LdPagination & JSXBase.HTMLAttributes<HTMLLdPaginationElement>;
            "ld-progress": LocalJSX.LdProgress & JSXBase.HTMLAttributes<HTMLLdProgressElement>;
            "ld-radio": LocalJSX.LdRadio & JSXBase.HTMLAttributes<HTMLLdRadioElement>;
            "ld-select": LocalJSX.LdSelect & JSXBase.HTMLAttributes<HTMLLdSelectElement>;
            "ld-select-popper": LocalJSX.LdSelectPopper & JSXBase.HTMLAttributes<HTMLLdSelectPopperElement>;
            "ld-sidenav": LocalJSX.LdSidenav & JSXBase.HTMLAttributes<HTMLLdSidenavElement>;
            "ld-sidenav-accordion": LocalJSX.LdSidenavAccordion & JSXBase.HTMLAttributes<HTMLLdSidenavAccordionElement>;
            "ld-sidenav-back": LocalJSX.LdSidenavBack & JSXBase.HTMLAttributes<HTMLLdSidenavBackElement>;
            "ld-sidenav-header": LocalJSX.LdSidenavHeader & JSXBase.HTMLAttributes<HTMLLdSidenavHeaderElement>;
            "ld-sidenav-heading": LocalJSX.LdSidenavHeading & JSXBase.HTMLAttributes<HTMLLdSidenavHeadingElement>;
            "ld-sidenav-navitem": LocalJSX.LdSidenavNavitem & JSXBase.HTMLAttributes<HTMLLdSidenavNavitemElement>;
            "ld-sidenav-scroller-internal": LocalJSX.LdSidenavScrollerInternal & JSXBase.HTMLAttributes<HTMLLdSidenavScrollerInternalElement>;
            "ld-sidenav-separator": LocalJSX.LdSidenavSeparator & JSXBase.HTMLAttributes<HTMLLdSidenavSeparatorElement>;
            "ld-sidenav-slider": LocalJSX.LdSidenavSlider & JSXBase.HTMLAttributes<HTMLLdSidenavSliderElement>;
            "ld-sidenav-subnav": LocalJSX.LdSidenavSubnav & JSXBase.HTMLAttributes<HTMLLdSidenavSubnavElement>;
            "ld-sidenav-toggle-outside": LocalJSX.LdSidenavToggleOutside & JSXBase.HTMLAttributes<HTMLLdSidenavToggleOutsideElement>;
            "ld-slider": LocalJSX.LdSlider & JSXBase.HTMLAttributes<HTMLLdSliderElement>;
            "ld-sr-live": LocalJSX.LdSrLive & JSXBase.HTMLAttributes<HTMLLdSrLiveElement>;
            "ld-sr-only": LocalJSX.LdSrOnly & JSXBase.HTMLAttributes<HTMLLdSrOnlyElement>;
            "ld-step": LocalJSX.LdStep & JSXBase.HTMLAttributes<HTMLLdStepElement>;
            "ld-stepper": LocalJSX.LdStepper & JSXBase.HTMLAttributes<HTMLLdStepperElement>;
            "ld-switch": LocalJSX.LdSwitch & JSXBase.HTMLAttributes<HTMLLdSwitchElement>;
            "ld-switch-item": LocalJSX.LdSwitchItem & JSXBase.HTMLAttributes<HTMLLdSwitchItemElement>;
            "ld-tab": LocalJSX.LdTab & JSXBase.HTMLAttributes<HTMLLdTabElement>;
            "ld-tablist": LocalJSX.LdTablist & JSXBase.HTMLAttributes<HTMLLdTablistElement>;
            "ld-tabpanel": LocalJSX.LdTabpanel & JSXBase.HTMLAttributes<HTMLLdTabpanelElement>;
            "ld-tabpanellist": LocalJSX.LdTabpanellist & JSXBase.HTMLAttributes<HTMLLdTabpanellistElement>;
            "ld-tabs": LocalJSX.LdTabs & JSXBase.HTMLAttributes<HTMLLdTabsElement>;
            "ld-toggle": LocalJSX.LdToggle & JSXBase.HTMLAttributes<HTMLLdToggleElement>;
            "ld-tooltip": LocalJSX.LdTooltip & JSXBase.HTMLAttributes<HTMLLdTooltipElement>;
            "ld-tooltip-popper": LocalJSX.LdTooltipPopper & JSXBase.HTMLAttributes<HTMLLdTooltipPopperElement>;
            "ld-typo": LocalJSX.LdTypo & JSXBase.HTMLAttributes<HTMLLdTypoElement>;
        }
    }
}

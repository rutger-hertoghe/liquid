'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-9117e53d.js');
const getClassNames = require('./getClassNames-dd3906b3.js');
const cloneAttributes = require('./cloneAttributes-2912024a.js');
const focus = require('./focus-7ca42572.js');

const ldToggleCss = ".ld-toggle,:host{--ld-toggle-height:2rem;--ld-toggle-width:3.375rem;--ld-toggle-inner-space:0.125rem;--ld-toggle-with-icons-width:4.5rem;--ld-toggle-lg-height:2.5rem;--ld-toggle-lg-width:4.1875rem;--ld-toggle-lg-inner-space:0.1875rem;--ld-toggle-lg-with-icons-width:6rem;--ld-toggle-border-radius:var(--ld-br-full);--ld-toggle-knob-border-radius:var(--ld-br-full);--ld-toggle-input-bg-col:var(--ld-col-neutral-600);--ld-toggle-icon-start-col:var(--ld-col-wht);--ld-toggle-icon-end-col:var(--ld-col-neutral-900);--ld-toggle-knob-bg-col:var(--ld-col-wht);--ld-toggle-checked-icon-start-col:var(--ld-col-neutral-900);--ld-toggle-checked-icon-end-col:var(--ld-col-wht);--ld-toggle-disabled-input-bg-col:var(--ld-col-neutral-050);--ld-toggle-disabled-icon-col:var(--ld-col-neutral-200);--ld-toggle-disabled-knob-bg-col:var(--ld-col-wht);--ld-toggle-with-icons-input-bg-col:var(--ld-col-neutral-100);--ld-toggle-with-icons-disabled-input-bg-col:var(--ld-col-neutral-050);--ld-toggle-checked-bg-col:var(--ld-thm-primary);--ld-toggle-invalid-input-bg-col:var(--ld-thm-error);--ld-toggle-invalid-knob-bg-col:var(--ld-thm-error);--ld-toggle-with-icons-knob-col:var(--ld-thm-primary);align-items:center;display:flex;height:var(--ld-toggle-height);min-width:auto!important;position:relative;width:var(--ld-toggle-width)}.ld-toggle input,:host input{-webkit-appearance:none;appearance:none;background-color:var(--ld-toggle-input-bg-col);border-radius:var(--ld-toggle-border-radius);height:100%;margin:0;position:absolute;transition:background-color .2s ease-in-out;width:100%;z-index:0}.ld-toggle input:not(:disabled):not([aria-disabled=true]),:host input:not(:disabled):not([aria-disabled=true]){cursor:pointer}.ld-toggle input:checked,:host input:checked{background-color:var(--ld-toggle-checked-bg-col)}.ld-toggle input:checked:disabled,.ld-toggle input:checked[aria-disabled=true],:host input:checked:disabled,:host input:checked[aria-disabled=true]{background-color:var(--ld-toggle-disabled-input-bg-col)}.ld-toggle input:checked~.ld-toggle__knob,:host input:checked~.ld-toggle__knob{transform:translateX(calc(var(--ld-toggle-width) - var(--ld-toggle-height)))}.ld-toggle input:checked~.ld-toggle__icon-start,:host input:checked~.ld-toggle__icon-start{color:var(--ld-toggle-checked-icon-start-col)}.ld-toggle input:checked~.ld-toggle__icon-end,:host input:checked~.ld-toggle__icon-end{color:var(--ld-toggle-checked-icon-end-col)}.ld-toggle input:disabled,.ld-toggle input[aria-disabled=true],:host input:disabled,:host input[aria-disabled=true]{background-color:var(--ld-toggle-disabled-input-bg-col)}.ld-toggle input:disabled:checked~.ld-toggle__icon-end,.ld-toggle input:disabled:checked~.ld-toggle__icon-start,.ld-toggle input[aria-disabled=true]:checked~.ld-toggle__icon-end,.ld-toggle input[aria-disabled=true]:checked~.ld-toggle__icon-start,:host input:disabled:checked~.ld-toggle__icon-end,:host input:disabled:checked~.ld-toggle__icon-start,:host input[aria-disabled=true]:checked~.ld-toggle__icon-end,:host input[aria-disabled=true]:checked~.ld-toggle__icon-start{color:var(--ld-toggle-disabled-icon-col)}.ld-toggle input:disabled:not(:checked)~.ld-toggle__icon-end,.ld-toggle input:disabled:not(:checked)~.ld-toggle__icon-start,.ld-toggle input[aria-disabled=true]:not(:checked)~.ld-toggle__icon-end,.ld-toggle input[aria-disabled=true]:not(:checked)~.ld-toggle__icon-start,:host input:disabled:not(:checked)~.ld-toggle__icon-end,:host input:disabled:not(:checked)~.ld-toggle__icon-start,:host input[aria-disabled=true]:not(:checked)~.ld-toggle__icon-end,:host input[aria-disabled=true]:not(:checked)~.ld-toggle__icon-start{color:var(--ld-toggle-disabled-icon-col)}.ld-toggle .ld-toggle__knob,:host .ld-toggle__knob{background-color:var(--ld-toggle-knob-bg-col);border-radius:var(--ld-toggle-knob-border-radius);display:block;height:calc(var(--ld-toggle-height) - var(--ld-toggle-inner-space)*2);margin:var(--ld-toggle-inner-space);pointer-events:none;transition:transform .2s ease-in-out;width:calc(var(--ld-toggle-height) - var(--ld-toggle-inner-space)*2);z-index:1}.ld-toggle input:where(:not(:disabled):not([aria-disabled=true])):invalid,:host input:where(:not(:disabled):not([aria-disabled=true])):invalid{background-color:var(--ld-toggle-invalid-input-bg-col)}.ld-toggle--lg,:host(.ld-toggle--lg){--ld-toggle-height:var(--ld-toggle-lg-height);--ld-toggle-width:var(--ld-toggle-lg-width);--ld-toggle-inner-space:var(--ld-toggle-lg-inner-space)}.ld-toggle--lg.ld-toggle--with-icons,:host(.ld-toggle--lg.ld-toggle--with-icons){--ld-toggle-width:var(--ld-toggle-lg-with-icons-width)}.ld-toggle--lg.ld-toggle--with-icons .ld-toggle__icon-end,.ld-toggle--lg.ld-toggle--with-icons .ld-toggle__icon-start,:host(.ld-toggle--lg.ld-toggle--with-icons) .ld-toggle__icon-end,:host(.ld-toggle--lg.ld-toggle--with-icons) .ld-toggle__icon-start{margin:auto .75rem}.ld-toggle--with-icons,:host(.ld-toggle--with-icons){--ld-toggle-width:var(--ld-toggle-with-icons-width)}.ld-toggle--with-icons input:not(:disabled),:host(.ld-toggle--with-icons) input:not(:disabled){background-color:var(--ld-toggle-with-icons-input-bg-col)}.ld-toggle--with-icons input:invalid~.ld-toggle__knob,:host(.ld-toggle--with-icons) input:invalid~.ld-toggle__knob{background-color:var(--ld-toggle-invalid-knob-bg-col)}.ld-toggle--with-icons input:disabled,.ld-toggle--with-icons input[aria-disabled=true],:host(.ld-toggle--with-icons) input:disabled,:host(.ld-toggle--with-icons) input[aria-disabled=true]{background-color:var(--ld-toggle-with-icons-disabled-input-bg-col)}.ld-toggle--with-icons input:disabled~.ld-toggle__knob,.ld-toggle--with-icons input[aria-disabled=true]~.ld-toggle__knob,:host(.ld-toggle--with-icons) input:disabled~.ld-toggle__knob,:host(.ld-toggle--with-icons) input[aria-disabled=true]~.ld-toggle__knob{background-color:var(--ld-toggle-disabled-knob-bg-col)}.ld-toggle--with-icons .ld-toggle__knob,:host(.ld-toggle--with-icons) .ld-toggle__knob{background-color:var(--ld-toggle-with-icons-knob-col)}.ld-toggle--with-icons .ld-toggle__icon-end,.ld-toggle--with-icons .ld-toggle__icon-start,:host(.ld-toggle--with-icons) .ld-toggle__icon-end,:host(.ld-toggle--with-icons) .ld-toggle__icon-start{margin:auto .5rem}.ld-toggle__icon-end,.ld-toggle__icon-start{align-items:center;display:flex;pointer-events:none;position:absolute;transition:color .2s ease-in-out;z-index:1}.ld-toggle__icon-end:empty,.ld-toggle__icon-start:empty{display:none}.ld-toggle__icon-start{color:var(--ld-toggle-icon-start-col);left:0}.ld-toggle__icon-end{color:var(--ld-toggle-icon-end-col);right:0}";

const LdToggle = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.ldchange = index.createEvent(this, "ldchange", 7);
    this.ldinput = index.createEvent(this, "ldinput", 7);
    /** Indicates whether the toggle is "on". */
    this.checked = false;
    this.handleChange = (event) => {
      this.el.dispatchEvent(new InputEvent('change', event));
      this.ldchange.emit(this.checked);
    };
    this.handleClick = (event) => {
      if (this.ariaDisabled) {
        event.preventDefault();
        return;
      }
      this.checked = !this.checked;
      if (!event.isTrusted) {
        // This happens, when a click event is dispatched on the host element
        // from the outside i.e. on click on a parent ld-label element.
        this.el.dispatchEvent(new InputEvent('input', { bubbles: true, composed: true }));
        this.handleInput();
        this.el.dispatchEvent(new InputEvent('change', { bubbles: true }));
        this.ldchange.emit(this.checked);
      }
    };
    this.handleInput = () => {
      this.ldinput.emit(this.checked);
    };
  }
  /** Sets focus on the toggle. */
  async focusInner() {
    if (this.input !== undefined) {
      this.input.focus();
    }
  }
  updateHiddenInput() {
    const outerForm = this.el.closest('form');
    if (!this.hiddenInput && this.name && (outerForm || this.form)) {
      this.createHiddenInput();
    }
    if (this.hiddenInput) {
      if (!this.name) {
        this.hiddenInput.remove();
        this.hiddenInput = undefined;
        return;
      }
      this.hiddenInput.name = this.name;
      this.hiddenInput.checked = this.checked;
      if (this.value) {
        this.hiddenInput.value = this.value;
      }
      else {
        this.hiddenInput.removeAttribute('value');
      }
      if (this.form) {
        this.hiddenInput.setAttribute('form', this.form);
      }
      else if (this.hiddenInput.getAttribute('form')) {
        if (outerForm) {
          this.hiddenInput.removeAttribute('form');
        }
        else {
          this.hiddenInput.remove();
          this.hiddenInput = undefined;
        }
      }
    }
  }
  createHiddenInput() {
    this.hiddenInput = document.createElement('input');
    this.hiddenInput.type = 'checkbox';
    this.hiddenInput.style.visibility = 'hidden';
    this.hiddenInput.style.position = 'absolute';
    this.hiddenInput.style.pointerEvents = 'none';
    this.el.appendChild(this.hiddenInput);
  }
  componentWillLoad() {
    this.attributesObserver = cloneAttributes.cloneAttributes.call(this, ['size']);
    this.hasIcons =
      !!this.el.querySelector('[slot="icon-start"]') ||
        !!this.el.querySelector('[slot="icon-end"]');
    const outerForm = this.el.closest('form');
    if (this.name && (outerForm || this.form)) {
      this.createHiddenInput();
      this.hiddenInput.checked = this.checked;
      this.hiddenInput.name = this.name;
      if (this.form) {
        this.hiddenInput.setAttribute('form', this.form);
      }
      if (this.value) {
        this.hiddenInput.value = this.value;
      }
    }
    focus.registerAutofocus(this.autofocus);
  }
  disconnectedCallback() {
    var _a;
    (_a = this.attributesObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  render() {
    return (index.h(index.Host, { class: getClassNames.getClassNames([
        'ld-toggle',
        this.size === 'lg' && 'ld-toggle--lg',
        this.hasIcons && 'ld-toggle--with-icons',
      ]), onClick: this.handleClick }, index.h("input", Object.assign({}, this.clonedAttributes, { "aria-disabled": this.ariaDisabled, checked: this.checked, disabled: this.disabled, onChange: this.handleChange, onInput: this.handleInput, part: "input focusable", ref: (ref) => (this.input = ref), required: this.required, tabIndex: this.ldTabindex, type: "checkbox", value: this.value })), index.h("span", { class: "ld-toggle__knob", part: "knob" }), this.hasIcons && (index.h("div", { class: "ld-toggle__icon-start", part: "icon-wrapper icon-wrapper-start" }, index.h("slot", { name: "icon-start" }))), this.hasIcons && (index.h("div", { class: "ld-toggle__icon-end", part: "icon-wrapper icon-wrapper-end" }, index.h("slot", { name: "icon-end" })))));
  }
  get el() { return index.getElement(this); }
  static get watchers() { return {
    "checked": ["updateHiddenInput"],
    "name": ["updateHiddenInput"],
    "value": ["updateHiddenInput"]
  }; }
};
LdToggle.style = ldToggleCss;

exports.ld_toggle = LdToggle;

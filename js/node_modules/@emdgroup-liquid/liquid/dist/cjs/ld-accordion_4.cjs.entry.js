'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-9117e53d.js');
const getClassNames = require('./getClassNames-dd3906b3.js');

/**
 * Returns the scroll parent (the first scrollable ancestor of a given element).
 * This is a vanilla JS port of the jQuery UI scrollParent method:
 * https://github.com/jquery/jquery-ui/blob/main/ui/scroll-parent.js
 */
function getScrollParent(element, includeHidden) {
  let style = getComputedStyle(element);
  if (style.position === 'fixed') {
    return document.scrollingElement;
  }
  const excludeStaticParent = style.position === 'absolute';
  const overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/;
  // Using for loop instead of recursion in order to save memory.
  for (let parent = element; (parent = parent.parentElement);) {
    style = getComputedStyle(parent);
    if (excludeStaticParent && style.position === 'static') {
      continue;
    }
    if (overflowRegex.test(style.overflow + style.overflowY + style.overflowX)) {
      return parent;
    }
  }
  return document.scrollingElement;
}

const ldAccordionShadowCss = ":host{--ld-accordion-col:var(--ld-col-neutral-900);--ld-accordion-col-disabled:var(--ld-col-neutral-100);--ld-accordion-col-hover:var(--ld-col-neutral-900);--ld-accordion-col-focus:var(--ld-col-neutral-900);--ld-accordion-bg-col:var(--ld-col-wht);--ld-accordion-bg-col-active:var(--ld-col-wht);--ld-accordion-bg-col-disabled:var(--ld-col-neutral-100);--ld-accordion-bg-col-focus:var(--ld-col-neutral-100);--ld-accordion-bg-col-hover:var(--ld-col-neutral-050);--ld-accordion-trigger-icon-col-disabled:var(--ld-col-neutral-100);--ld-accordion-col-active:var(--ld-thm-primary);--ld-accordion-col-selected:var(--ld-thm-primary);--ld-accordion-toggle-col:inherit;--ld-accordion-toggle-indicator-bg-col:#0000;--ld-accordion-toggle-trigger-col:var(--ld-thm-primary);--ld-accordion-trigger-icon-col:var(--ld-thm-primary);--ld-accordion-trigger-icon-col-hover:var(--ld-thm-primary-hover);--ld-accordion-trigger-icon-col-focus:var(--ld-thm-primary-focus);--ld-accordion-trigger-icon-col-active:var(--ld-thm-primary-active);--ld-accordion-toggle-expanded-col:var(--ld-thm-primary);--ld-accordion-padding-y:0.45rem;--ld-accordion-padding-x:1.25rem;--ld-accordion-toggle-size:2.5rem;--ld-accordion-toggle-line-height:180%;--ld-accordion-border-radius-size:0;--ld-accordion-border-radius:var(--ld-accordion-border-radius-size);--ld-accordion-gap:var(--ld-sp-2);--ld-accordion-gap-col:var(--ld-accordion-panel-border-top-col);--ld-accordion-panel-border-top-col:var(--ld-col-neutral-010)}:host(:where(.ld-accordion)){display:block;flex-grow:1}:host(.ld-accordion--rounded){--ld-accordion-border-radius-size:var(--ld-br-m)}:host(.ld-accordion--dark){--ld-accordion-bg-col:var(--ld-col-neutral-010);--ld-accordion-bg-col-active:var(--ld-col-neutral-010);--ld-accordion-panel-border-top-col:var(--ld-col-neutral-050)}:host(.ld-accordion--brand-color){--ld-accordion-bg-col-hover:var(--ld-thm-primary-alpha-lowest);--ld-accordion-bg-col-focus:var(--ld-thm-primary-alpha-low)}:host(.ld-accordion--detached){--ld-accordion-gap:var(--ld-sp-8);--ld-accordion-gap-col:#0000}:host(.ld-accordion:not(.ld-accordion--detached)) ::slotted(ld-accordion-section){--ld-accordion-border-radius:0}:host(.ld-accordion:not(.ld-accordion--detached)) ::slotted(ld-accordion-section:first-of-type){--ld-accordion-border-radius:var(--ld-accordion-border-radius-size) var(--ld-accordion-border-radius-size) 0 0}:host(.ld-accordion:not(.ld-accordion--detached)) ::slotted(ld-accordion-section:last-of-type){--ld-accordion-border-radius:0 0 var(--ld-accordion-border-radius-size) var(--ld-accordion-border-radius-size)}:host ::slotted(ld-accordion-section:not(:first-of-type)){border-top:solid var(--ld-accordion-gap) var(--ld-accordion-gap-col)}";

const LdAccordion = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.scrollIntoViewOnTransitionEnd = false;
    /** Sets a small gap between each accordion section. */
    this.detached = false;
    /** Applies rounded corners. */
    this.rounded = false;
    /** When set to true, an open accordion element closes, if anthorer one opens. */
    this.single = false;
    this.scrollIntoView = (section) => {
      var _a;
      const scrollParent = getScrollParent(section);
      const toggle = section.querySelector('ld-accordion-toggle');
      const panel = section.querySelector('ld-accordion-panel');
      // singleModeDelta is the height of the currently open panel, that needs
      // to be subtracted from the scroll amount in single mode.
      const allSections = Array.from(section.parentElement.children);
      const singleModeDelta = this.single && !this.scrollIntoViewOnTransitionEnd
        ? ((_a = allSections
          .slice(0, allSections.findIndex((sec) => sec === section))
          .find((sec) => sec.classList.contains('ld-accordion-section--expanded'))) === null || _a === void 0 ? void 0 : _a.children[1].scrollHeight) || 0
        : 0;
      const panelOffsetToScrollParent = scrollParent.scrollTop +
        panel.getBoundingClientRect().top -
        Math.max(0, scrollParent.getBoundingClientRect().top);
      const scrollPaddingTop = parseFloat(window.getComputedStyle(scrollParent)['scrollPaddingTop']) || 0;
      // targetOffsetBottom is the distance from the scrollParent top to the
      // bottom of the section that is being expanded in its expanded state.
      const targetOffsetBottom = panelOffsetToScrollParent +
        Math.min(panel.scrollHeight, scrollParent.clientHeight - toggle.clientHeight - scrollPaddingTop) -
        singleModeDelta;
      // If an accordion section expands at the bottom end of the accordion
      // The scroll container may not have a sufficient height at that time
      // in order to be scrollable to the target offset. In this case we
      // postpone the scrolling to the transition end event.
      if (!this.scrollIntoViewOnTransitionEnd &&
        scrollParent.scrollHeight < targetOffsetBottom) {
        this.scrollIntoViewOnTransitionEnd = true;
        return;
      }
      if (!this.el.closest('ld-accordion-panel') &&
        scrollParent.clientHeight + scrollParent.scrollTop < targetOffsetBottom) {
        const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
        scrollParent.scrollTo({
          top: targetOffsetBottom - scrollParent.clientHeight,
          behavior: prefersReducedMotion ? 'auto' : 'smooth',
        });
      }
    };
    this.focusToggle = (currentToggle, dir) => {
      var _a;
      const toggleToFocus = (_a = (dir === 'prev'
        ? currentToggle.parentElement.previousElementSibling
        : currentToggle.parentElement.nextElementSibling)) === null || _a === void 0 ? void 0 : _a.querySelector('ld-accordion-toggle');
      if (toggleToFocus) {
        toggleToFocus.focusInner();
      }
    };
    this.onKeydown = (ev) => {
      if (ev.target.tagName !== 'LD-ACCORDION-TOGGLE') {
        return;
      }
      switch (ev.key) {
        case 'ArrowUp': {
          ev.preventDefault();
          this.focusToggle(ev.target, 'prev');
          return;
        }
        case 'ArrowDown': {
          ev.preventDefault();
          this.focusToggle(ev.target, 'next');
          return;
        }
      }
    };
    this.onTransitionEnd = (ev) => {
      const target = ev.target;
      if (!this.scrollIntoViewOnTransitionEnd ||
        target.tagName !== 'LD-ACCORDION-PANEL' ||
        target.closest('ld-accordion') !== this.el ||
        !target.closest('ld-accordion-section').expanded) {
        return;
      }
      this.scrollIntoView(target.closest('ld-accordion-section'));
      this.scrollIntoViewOnTransitionEnd = false;
    };
  }
  handleAccordionExpandChange(ev) {
    if (ev.target.tagName !== 'LD-ACCORDION-SECTION')
      return;
    // In single mode, close sibling sections of open section.
    if (this.single && ev.target.expanded) {
      const siblings = [...ev.target.parentElement.children].filter((section) => section !== ev.target);
      siblings.forEach((section) => {
        section.expanded = false;
      });
    }
    if (ev.detail /* expanded */) {
      this.scrollIntoView(ev.target);
    }
  }
  render() {
    const cl = getClassNames.getClassNames([
      'ld-accordion',
      this.detached && 'ld-accordion--detached',
      this.brandColor && 'ld-accordion--brand-color',
      !this.brandColor && this.tone && `ld-accordion--${this.tone}`,
      this.rounded && 'ld-accordion--rounded',
    ]);
    return (index.h(index.Host, { class: cl, onKeydown: this.onKeydown, onTransitionEnd: this.onTransitionEnd }, index.h("slot", null)));
  }
  get el() { return index.getElement(this); }
};
LdAccordion.style = ldAccordionShadowCss;

const ldAccordionPanelShadowCss = ":host{--ld-accordion-panel-transition-duration:0.001s;background-color:var(--ld-accordion-bg-col);border-radius:var(--ld-accordion-border-radius);border-top-left-radius:inherit;border-top-right-radius:inherit;box-sizing:border-box;display:block;max-height:var(--ld-accordion-panel-max-height,auto);overflow:hidden;position:relative;will-change:max-height}:host(.ld-accordion-panel--initialized){transition:max-height var(--ld-accordion-panel-transition-duration) ease}@media (prefers-reduced-motion:no-preference){:host(.ld-accordion-panel--initialized){--ld-accordion-panel-transition-duration:0.2s}}:host(.ld-accordion-panel--expanded):before{background-color:var(--ld-accordion-panel-border-top-col);content:\"\";height:var(--ld-sp-2);left:0;position:absolute;right:0;top:0}:host(.ld-accordion-panel--expanded) .ld-accordion-panel__content{opacity:1;transition:opacity var(--ld-accordion-panel-transition-duration) linear;visibility:inherit}.ld-accordion-panel__content{opacity:0;transition:opacity var(--ld-accordion-panel-transition-duration) linear,visibility 0s var(--ld-accordion-panel-transition-duration) linear;visibility:hidden}";

const LdAccordionPanel = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.ldaccordionmaxheightchange = index.createEvent(this, "ldaccordionmaxheightchange", 7);
    this.initialized = false;
    this.transitionEnabled = false;
    this.innerPanelExpanding = false;
    this.applyMaxHeight = (additionalHeightFromInnerPanel = 0) => {
      if (additionalHeightFromInnerPanel) {
        this.innerPanelExpanding = true;
      }
      // Apply max-height on outer panel inside nested accordion.
      if (this.expanded) {
        this.ldaccordionmaxheightchange.emit(this.el.scrollHeight);
      }
      this.maxHeight = this.expanded
        ? this.el.scrollHeight + additionalHeightFromInnerPanel
        : 0;
    };
    this.handleInnerMaxHeightChange = (ev) => {
      if (ev.target === this.el)
        return;
      ev.stopImmediatePropagation();
      this.applyMaxHeight(ev.detail);
    };
    this.onTransitionEnd = (ev) => {
      if (ev.target === this.el) {
        this.innerPanelExpanding = false;
      }
    };
  }
  /**
   * @internal
   * Updates expanded state.
   */
  async setExpanded(expanded) {
    this.expanded = expanded;
    this.applyMaxHeight();
  }
  componentDidLoad() {
    setTimeout(() => {
      this.resizeObserver = new ResizeObserver(() => {
        // When a panel is expanding inside a nested accordion, the nested panel
        // takes over the responsibility for updating the max-height on the outer
        // panel. In other words: We disable the observer callback function in
        // order to instantly update the max-height for a better performance.
        if (!this.innerPanelExpanding) {
          this.applyMaxHeight();
        }
      });
      this.resizeObserver.observe(this.contentRef);
      this.initialized = true;
    });
  }
  disconnectedCallback() {
    this.resizeObserver.unobserve(this.contentRef);
  }
  render() {
    const cl = getClassNames.getClassNames([
      'ld-accordion-panel',
      this.expanded && 'ld-accordion-panel--expanded',
      this.initialized && 'ld-accordion-panel--initialized',
    ]);
    return (index.h(index.Host, { style: { '--ld-accordion-panel-max-height': this.maxHeight + 'px' }, class: cl, onTransitionEnd: this.onTransitionEnd, onLdaccordionmaxheightchange: this.handleInnerMaxHeightChange }, index.h("div", { part: "content", ref: (ref) => (this.contentRef = ref), class: "ld-accordion-panel__content" }, index.h("slot", null))));
  }
  get el() { return index.getElement(this); }
};
LdAccordionPanel.style = ldAccordionPanelShadowCss;

const ldAccordionSectionShadowCss = ":host{display:block}";

const LdAccordionSection = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.ldaccordionchange = index.createEvent(this, "ldaccordionchange", 7);
    this.initialized = false;
  }
  updateExpandedState(newExpanded) {
    Array.from(this.el.children).forEach((child) => {
      child.setExpanded(newExpanded);
    });
    if (this.initialized) {
      this.ldaccordionchange.emit(newExpanded);
    }
  }
  handleToggleClick(ev) {
    if (ev.target.closest('ld-accordion-section') !== this.el) {
      return;
    }
    this.expanded = !this.expanded;
  }
  componentWillLoad() {
    this.updateExpandedState(this.expanded);
    this.initialized = true;
  }
  render() {
    const cl = getClassNames.getClassNames([
      'ld-accordion-section',
      this.expanded && 'ld-accordion-section--expanded',
    ]);
    return (index.h(index.Host, { class: cl, onLdaccordiontoggleclick: this.handleToggleClick.bind(this) }, index.h("slot", null)));
  }
  get el() { return index.getElement(this); }
  static get watchers() { return {
    "expanded": ["updateExpandedState"]
  }; }
};
LdAccordionSection.style = ldAccordionSectionShadowCss;

const ldAccordionToggleShadowCss = ":host{border-radius:var(--ld-accordion-border-radius);display:block;position:relative;z-index:1}.ld-accordion-toggle__button,.ld-accordion-toggle__label,.ld-accordion-toggle__trigger{-webkit-touch-callout:none;border:0;box-sizing:border-box;margin:0;text-align:left;touch-action:manipulation;-webkit-user-select:none;user-select:none;width:100%}.ld-accordion-toggle__button{align-items:center;background-color:var(--ld-accordion-bg-col);border-radius:inherit;color:var(--ld-accordion-col);direction:var(--ld-accordion-grid-dir);display:grid;font:var(--ld-typo-body-m);grid-template-columns:1fr var(--ld-accordion-toggle-size);padding:0;position:relative}.ld-accordion-toggle__button[aria-disabled]{color:var(--ld-accordion-col-disabled)}:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split)) .ld-accordion-toggle__button:before{background-color:var(--ld-accordion-toggle-indicator-bg-col);border-radius:var(--ld-accordion-border-radius);content:\"\";inset:0;position:absolute}:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split)) .ld-accordion-toggle__button:not([aria-disabled]):where(:focus:focus-visible){--ld-accordion-toggle-indicator-bg-col:var(\n          --ld-accordion-bg-col-focus\n        )}@media (hover:hover){:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split)) .ld-accordion-toggle__button:not([aria-disabled]):where(:hover){--ld-accordion-toggle-indicator-bg-col:var(\n            --ld-accordion-bg-col-hover\n          )}}:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split)) .ld-accordion-toggle__button:not([aria-disabled]):where(:active),:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split)) .ld-accordion-toggle__button:not([aria-disabled]):where(:active:focus-visible){--ld-accordion-toggle-indicator-bg-col:var(\n          --ld-accordion-bg-col-active\n        )}:host(.ld-accordion-toggle--expanded:not(.ld-accordion-toggle--split)) .ld-accordion-toggle__button:before{border-bottom-left-radius:0;border-bottom-right-radius:0}:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split):not(.ld-accordion-toggle--expanded)) .ld-accordion-toggle__button:not([aria-disabled]):where(:focus:focus-visible){--ld-accordion-toggle-col:var(--ld-accordion-col-focus)}@media (hover:hover){:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split):not(.ld-accordion-toggle--expanded)) .ld-accordion-toggle__button:not([aria-disabled]):where(:hover){--ld-accordion-toggle-col:var(--ld-accordion-col-hover)}}:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split):not(.ld-accordion-toggle--expanded)) .ld-accordion-toggle__button:not([aria-disabled]):where(:active),:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split):not(.ld-accordion-toggle--expanded)) .ld-accordion-toggle__button:not([aria-disabled]):where(:active:focus-visible){--ld-accordion-toggle-col:var(--ld-accordion-col-active)}.ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__trigger{color:var(--ld-accordion-trigger-icon-col)}.ld-accordion-toggle__label,.ld-accordion-toggle__trigger{background-color:initial;font:inherit}button.ld-accordion-toggle__button:not([aria-disabled]),button.ld-accordion-toggle__label:not([aria-disabled]),button.ld-accordion-toggle__trigger:not([aria-disabled]){cursor:pointer}.ld-accordion-toggle__label{border-radius:var(--ld-accordion-border-radius);border-bottom-right-radius:0;border-top-right-radius:0;padding:var(--ld-accordion-padding-y) var(--ld-accordion-padding-x);position:relative}.ld-accordion-toggle__trigger{border-radius:var(--ld-accordion-border-radius);border-bottom-left-radius:0;border-top-left-radius:0;display:grid;height:var(--ld-accordion-toggle-size);overflow:hidden;place-items:center;position:relative;width:var(--ld-accordion-toggle-size)}.ld-accordion-toggle__label-content,.ld-accordion-toggle__trigger-content{display:grid;position:relative;transform:translateX(calc(var(--ld-sp-1)*-1))}.ld-accordion-toggle__label:not([aria-disabled]) .ld-accordion-toggle__label-content{color:var(--ld-accordion-toggle-col)}:host(.ld-accordion-toggle--expanded){--ld-accordion-toggle-col:var(--ld-accordion-toggle-expanded-col);border-bottom-left-radius:0;border-bottom-right-radius:0}:host(.ld-accordion-toggle--expanded) .ld-accordion-toggle__trigger-icon{transform:scaleY(-1)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label:before,:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger:before{border-radius:var(--ld-br-s);content:\"\";inset:var(--ld-sp-4);left:var(--ld-sp-2);position:absolute}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label[aria-disabled],:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger[aria-disabled]{color:var(--ld-accordion-col-disabled)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label:before{background-color:var(--ld-accordion-toggle-label-indicator-bg-col);transform:translateX(calc(var(--ld-sp-2)))}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger:before{background-color:var(--ld-accordion-toggle-trigger-indicator-bg-col)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]){background-color:var(--ld-accordion-bg-col)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label:not([aria-disabled]):where(:focus:focus-visible){--ld-accordion-toggle-label-indicator-bg-col:var(\n        --ld-accordion-bg-col-focus\n      )}@media (hover:hover){:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label:not([aria-disabled]):where(:hover){--ld-accordion-toggle-label-indicator-bg-col:var(\n          --ld-accordion-bg-col-hover\n        )}}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label:not([aria-disabled]):where(:active),:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label:not([aria-disabled]):where(:active:focus-visible){--ld-accordion-toggle-label-indicator-bg-col:var(\n        --ld-accordion-bg-col-active\n      )}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger:not([aria-disabled]):where(:focus:focus-visible){--ld-accordion-toggle-trigger-col:var(--ld-accordion-col-focus);--ld-accordion-toggle-trigger-indicator-bg-col:var(\n        --ld-accordion-bg-col-focus\n      )}@media (hover:hover){:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger:not([aria-disabled]):where(:hover){--ld-accordion-toggle-trigger-col:var(--ld-accordion-col-hover);--ld-accordion-toggle-trigger-indicator-bg-col:var(\n          --ld-accordion-bg-col-hover\n        )}}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger:not([aria-disabled]):where(:active),:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger:not([aria-disabled]):where(:active:focus-visible){--ld-accordion-toggle-trigger-col:var(--ld-accordion-col-active);--ld-accordion-toggle-trigger-indicator-bg-col:var(\n        --ld-accordion-bg-col-active\n      )}.ld-accordion-toggle__content{display:contents}";

const LdAccordionToggle = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.ldaccordiontoggleclick = index.createEvent(this, "ldaccordiontoggleclick", 7);
    this.ldaccordionlabelclick = index.createEvent(this, "ldaccordionlabelclick", 7);
    /**
     * Tag to be used for the toggle label in split mode.
     * This prop is especially usefull, if you want to place
     * your own focusable element inside the toggle label element.
     */
    this.labelTag = 'button';
    /** Used as aria-label value on the toggle trigger element. */
    this.toggleLabel = 'Toggle';
    this.hasCustomIcon = false;
    this.handleToggleClick = (ev) => {
      ev.preventDefault();
      if (this.disabled)
        return;
      this.ldaccordiontoggleclick.emit();
    };
    this.handleLabelClick = (ev) => {
      ev.preventDefault();
      if (this.disabled)
        return;
      this.ldaccordionlabelclick.emit();
    };
  }
  /** Focuses the toggle */
  async focusInner() {
    this.btnRef.focus({ preventScroll: true });
  }
  /**
   * @internal
   * Updates expanded state.
   */
  async setExpanded(expanded) {
    this.expanded = expanded;
  }
  componentWillLoad() {
    this.hasCustomIcon = !!this.el.querySelector('[slot="icon"]');
  }
  render() {
    const cl = getClassNames.getClassNames([
      'ld-accordion-toggle',
      this.expanded && 'ld-accordion-toggle--expanded',
      this.split && 'ld-accordion-toggle--split',
    ]);
    const toggleTriggerContent = (index.h("div", { class: "ld-accordion-toggle__trigger-content", part: "trigger-content" }, index.h("slot", { name: "icon" }), !this.hasCustomIcon && (index.h("ld-icon", { name: "arrow-down", size: "sm", part: "trigger-icon", "aria-hidden": "true", class: "ld-accordion-toggle__trigger-icon" }))));
    const toggleTrigger = this.split ? (index.h("button", { part: "trigger focusable", class: "ld-accordion-toggle__trigger", "aria-disabled": this.disabled ? 'true' : undefined, "aria-expanded": this.expanded ? 'true' : undefined, "aria-label": this.toggleLabel, onClick: this.handleToggleClick, ref: (el) => (this.btnRef = el) }, toggleTriggerContent)) : (index.h("div", { part: "trigger", class: "ld-accordion-toggle__trigger" }, toggleTriggerContent));
    const ToggleLabelTag = this.labelTag;
    const toggleLabel = this.split ? (index.h(ToggleLabelTag, { part: `label${this.labelTag === 'button' ? ' focusable' : ''}`, "aria-disabled": this.disabled ? 'true' : undefined, class: "ld-accordion-toggle__label", onClick: this.handleLabelClick }, index.h("div", { class: "ld-accordion-toggle__label-content", part: "label-content" }, index.h("slot", null)))) : (index.h("div", { part: "label", class: "ld-accordion-toggle__label" }, index.h("div", { class: "ld-accordion-toggle__label-content", part: "label-content" }, index.h("slot", null))));
    const toggleContent = (index.h("div", { part: "content", class: "ld-accordion-toggle__content" }, toggleLabel, toggleTrigger));
    const toggle = this.split ? (index.h("div", { part: "toggle", class: "ld-accordion-toggle__button" }, toggleContent)) : (index.h("button", { "aria-disabled": this.disabled ? 'true' : undefined, "aria-expanded": this.expanded ? 'true' : undefined, class: "ld-accordion-toggle__button", onClick: this.handleToggleClick, part: "toggle focusable", ref: (el) => (this.btnRef = el), tabindex: this.ldTabindex }, toggleContent));
    return index.h(index.Host, { class: cl }, toggle);
  }
  get el() { return index.getElement(this); }
};
LdAccordionToggle.style = ldAccordionToggleShadowCss;

exports.ld_accordion = LdAccordion;
exports.ld_accordion_panel = LdAccordionPanel;
exports.ld_accordion_section = LdAccordionSection;
exports.ld_accordion_toggle = LdAccordionToggle;

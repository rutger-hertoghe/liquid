'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-9117e53d.js');
const getClassNames = require('./getClassNames-dd3906b3.js');
const getLdAssetPath = require('./getLdAssetPath-81cfe452.js');

const iconCache = {};
const requestCache = {};
async function fetchIcon(icon) {
  if (iconCache[icon]) {
    return iconCache[icon];
  }
  if (!requestCache[icon]) {
    requestCache[icon] = fetch(getLdAssetPath.getLdAssetPath(`./assets/${icon}.svg`))
      .then((resp) => resp.text())
      .catch((err) => {
      console.error(`"${icon}" is not a valid name`, err);
      return '';
    });
  }
  const path = await requestCache[icon];
  iconCache[icon] = path;
  return path;
}

const ldIconCss = ":host,:where(.ld-icon){--ld-icon-secondary-col:var(--ld-col-wht);--ld-icon-size-sm:1rem;--ld-icon-size-md:1.25rem;--ld-icon-size-lg:1.5rem;align-items:center;display:inline-flex;height:var(--ld-icon-size-md);justify-content:center;width:var(--ld-icon-size-md)}:host ::slotted(svg),:host :where(svg),:where(.ld-icon) ::slotted(svg),:where(.ld-icon) :where(svg){flex-shrink:0;height:var(--ld-icon-size-md);width:var(--ld-icon-size-md)}:host(.ld-icon--sm),:host(.ld-icon--sm) ::slotted(svg),:host(.ld-icon--sm) :where(svg),:where(.ld-icon--sm),:where(.ld-icon--sm) ::slotted(svg),:where(.ld-icon--sm) :where(svg){height:var(--ld-icon-size-sm);width:var(--ld-icon-size-sm)}:host(.ld-icon--lg),:host(.ld-icon--lg) ::slotted(svg),:host(.ld-icon--lg) :where(svg),:where(.ld-icon--lg),:where(.ld-icon--lg) ::slotted(svg),:where(.ld-icon--lg) :where(svg){height:var(--ld-icon-size-lg);width:var(--ld-icon-size-lg)}";

const LdIcon = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /** The icon name. */
    this.name = null;
  }
  async loadIconPathData() {
    if (!this.name) {
      return;
    }
    const div = document.createElement('div');
    const iconString = await fetchIcon(this.name);
    div.innerHTML = iconString.replace('<svg', '<svg class="ld-icon__svg" part="icon"');
    Array.from(this.element.shadowRoot.children).forEach((child) => {
      if (child.tagName !== 'STYLE') {
        this.element.shadowRoot.removeChild(child);
      }
    });
    this.element.shadowRoot.appendChild(div.firstChild);
  }
  async componentWillLoad() {
    this.loadIconPathData();
  }
  render() {
    return (index.h(index.Host, { class: getClassNames.getClassNames(['ld-icon', this.size && `ld-icon--${this.size}`]), role: "presentation" }, !this.name && index.h("slot", null)));
  }
  static get assetsDirs() { return ["assets"]; }
  get element() { return index.getElement(this); }
  static get watchers() { return {
    "name": ["loadIconPathData"]
  }; }
};
LdIcon.style = ldIconCss;

exports.ld_icon = LdIcon;

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-9117e53d.js');
const cloneAttributes = require('./cloneAttributes-2912024a.js');
const getClassNames = require('./getClassNames-dd3906b3.js');

const ldSwitchItemCss = ".ld-switch-item,:host{display:inline-flex;position:relative}.ld-switch-item:first-of-type,:host:first-of-type{border-bottom-left-radius:var(--ld-br-m);border-top-left-radius:var(--ld-br-m)}.ld-switch-item:last-of-type,:host:last-of-type{border-bottom-right-radius:var(--ld-br-m);border-top-right-radius:var(--ld-br-m)}.ld-switch-item input,:host input{clip:rect(0,0,0,0);border-width:0;height:var(--ld-sp-1);overflow:hidden;padding:0;position:absolute;width:var(--ld-sp-1)}.ld-switch-item input:checked~.ld-switch-item__content,:host input:checked~.ld-switch-item__content{background-color:var(\n          --ld-switch-item-bg-col-selected,var(--ld-thm-primary)\n        );color:var(--ld-switch-item-col-selected,var(--ld-col-wht))}.ld-switch-item input:where(:disabled)~.ld-switch-item__content,.ld-switch-item input:where([aria-disabled=true])~.ld-switch-item__content,:host input:where(:disabled)~.ld-switch-item__content,:host input:where([aria-disabled=true])~.ld-switch-item__content{opacity:.2}.ld-switch-item input:where(:not(:disabled)):focus:focus-visible~.ld-switch-item__content,:host input:where(:not(:disabled)):focus:focus-visible~.ld-switch-item__content{background-color:var(\n            --ld-switch-item-bg-col-focus,var(--ld-thm-primary-focus)\n          );color:var(--ld-switch-item-col-active,var(--ld-col-wht));outline:var(--ld-switch-item-outline,auto);outline:var(\n            --ld-switch-item-outline,auto 5px -webkit-focus-ring-color\n          );outline-offset:-2px}.ld-switch-item input:where(:not(:disabled)):focus:not:focus-visible~.ld-switch-item__content,:host input:where(:not(:disabled)):focus:not:focus-visible~.ld-switch-item__content{outline:none}.ld-switch-item input:where(:not(:disabled):not([aria-disabled=true]):not([readonly]))~.ld-switch-item__content,:host input:where(:not(:disabled):not([aria-disabled=true]):not([readonly]))~.ld-switch-item__content{cursor:pointer}@media (hover:hover){.ld-switch-item input:where(:not(:disabled):not([aria-disabled=true]):not([readonly]))~.ld-switch-item__content:hover,:host input:where(:not(:disabled):not([aria-disabled=true]):not([readonly]))~.ld-switch-item__content:hover{background-color:var(\n              --ld-switch-item-bg-col-hover,var(--ld-thm-primary-hover)\n            );color:var(--ld-switch-item-col-active,var(--ld-col-wht))}}.ld-switch-item input:where(:not(:disabled):not([aria-disabled=true]):not([readonly])):active:focus-visible~.ld-switch-item__content,.ld-switch-item input:where(:not(:disabled):not([aria-disabled=true]):not([readonly])):active~.ld-switch-item__content,:host input:where(:not(:disabled):not([aria-disabled=true]):not([readonly])):active:focus-visible~.ld-switch-item__content,:host input:where(:not(:disabled):not([aria-disabled=true]):not([readonly])):active~.ld-switch-item__content{background-color:var(\n            --ld-switch-item-bg-col-active,var(--ld-thm-primary-active)\n          );color:var(--ld-switch-item-col-active,var(--ld-col-wht))}.ld-switch-item__content{align-items:center;background-color:var(\n    --ld-switch-item-bg-col,var(--ld-thm-primary-alpha-low)\n  );border-radius:inherit;color:var(--ld-switch-item-col,var(--ld-thm-primary));display:inline-grid;font:var(--ld-switch-font);font-weight:700;gap:var(--ld-switch-item-gap);grid-auto-flow:column;justify-content:var(--ld-switch-item-justify-content);line-height:1.25;overflow:hidden;padding:var(--ld-switch-item-padding-y) var(--ld-switch-item-padding-x);text-align:center;text-overflow:ellipsis;white-space:nowrap;width:100%}.ld-switch-item__content ::slotted(.ld-icon),.ld-switch-item__content ::slotted(ld-icon),.ld-switch-item__content>.ld-icon,.ld-switch-item__content>ld-icon{margin:auto var(--ld-switch-item-icon-margin-x)}.ld-switch-item__label{overflow:hidden;padding:auto var(--ld-switch-item-padding-x);text-align:center;text-overflow:ellipsis}:host .ld-switch-item__label{display:none}:host(.ld-switch-item--has-label) .ld-switch-item__label{display:block}.ld-switch-item,:host label{align-items:center;background-clip:padding-box;background-color:var(--ld-switch-item-label-bg-col);border:0;display:inline-flex;height:100%;margin:0}:host label{border-radius:inherit;width:100%}";

const LdSwitchItem = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.ldswitchitemchange = index.createEvent(this, "ldswitchitemchange", 7);
    this.ldswitchitemfocus = index.createEvent(this, "ldswitchitemfocus", 7);
    /** Indicates whether the switch item is selected. */
    this.checked = false;
    this.handleKeyDown = (ev) => {
      switch (ev.key) {
        case 'ArrowUp':
        case 'ArrowLeft':
          ev.preventDefault();
          this.focusAndSelect('prev');
          return;
        case 'ArrowDown':
        case 'ArrowRight':
          ev.preventDefault();
          this.focusAndSelect('next');
      }
    };
    this.handleClick = (ev) => {
      if (this.checked || this.disabled || this.ariaDisabled || this.readonly) {
        ev.preventDefault();
        return;
      }
      // Uncheck siblings.
      Array.from(this.el.parentElement.querySelectorAll('ld-switch-item')).forEach((ldSwitchItem) => {
        ldSwitchItem.checked = false;
      });
      this.checked = true;
      this.el.dispatchEvent(new InputEvent('change', { bubbles: true }));
      this.ldswitchitemchange.emit(this.el.value);
    };
    this.handleFocus = () => {
      this.ldswitchitemfocus.emit();
    };
  }
  /** Sets focus on the switch item. */
  async focusInner() {
    this.input.focus();
  }
  updateHiddenInput() {
    const outerForm = this.el.closest('form');
    if (!this.hiddenInput && this.name && (outerForm || this.form)) {
      this.createHiddenInput();
    }
    if (this.hiddenInput) {
      if (!this.name) {
        this.hiddenInput.remove();
        this.hiddenInput = undefined;
        return;
      }
      this.hiddenInput.name = this.name;
      this.hiddenInput.checked = this.checked;
      if (this.value) {
        this.hiddenInput.value = this.value;
      }
      else {
        this.hiddenInput.removeAttribute('value');
      }
      if (this.form) {
        this.hiddenInput.setAttribute('form', this.form);
      }
      else if (this.hiddenInput.getAttribute('form')) {
        if (outerForm) {
          this.hiddenInput.removeAttribute('form');
        }
        else {
          this.hiddenInput.remove();
          this.hiddenInput = undefined;
        }
      }
    }
  }
  createHiddenInput() {
    this.hiddenInput = document.createElement('input');
    this.hiddenInput.type = 'radio';
    this.hiddenInput.style.visibility = 'hidden';
    this.hiddenInput.style.position = 'absolute';
    this.hiddenInput.style.pointerEvents = 'none';
    this.el.appendChild(this.hiddenInput);
  }
  focusAndSelect(dir) {
    const sibling = (dir === 'next'
      ? this.el.nextElementSibling
      : this.el.previousElementSibling);
    if (sibling) {
      sibling.focusInner();
      sibling.click();
    }
  }
  componentWillLoad() {
    this.hasLabel = Array.from(this.el.childNodes).some((el) => {
      var _a;
      return el.tagName !== 'LD-ICON' &&
        !((_a = el.classList) === null || _a === void 0 ? void 0 : _a.contains('ld-icon')) &&
        el.textContent.trim();
    });
    this.attributesObserver = cloneAttributes.cloneAttributes.call(this);
  }
  // istanbul ignore next
  disconnectedCallback() {
    var _a;
    (_a = this.attributesObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  render() {
    const cl = getClassNames.getClassNames([
      'ld-switch-item',
      this.hasLabel && 'ld-switch-item--has-label',
    ]);
    return (index.h(index.Host, { onClick: this.handleClick, class: cl }, index.h("label", { part: "label-element" }, index.h("input", Object.assign({ type: "radio" }, this.clonedAttributes, { part: "input focusable", onKeyDown: this.handleKeyDown, onFocus: this.handleFocus, ref: (ref) => (this.input = ref), required: this.required, disabled: this.disabled, checked: this.checked, tabIndex: this.checked ? this.ldTabindex : -1 })), index.h("span", { part: "content", class: "ld-switch-item__content" }, index.h("slot", { name: "icon-start" }), index.h("span", { part: "label", class: "ld-switch-item__label" }, index.h("slot", null)), index.h("slot", { name: "icon-end" })))));
  }
  get el() { return index.getElement(this); }
  static get watchers() { return {
    "checked": ["updateHiddenInput"],
    "form": ["updateHiddenInput"],
    "name": ["updateHiddenInput"],
    "value": ["updateHiddenInput"]
  }; }
};
LdSwitchItem.style = ldSwitchItemCss;

exports.ld_switch_item = LdSwitchItem;

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-9117e53d.js');
const getClassNames = require('./getClassNames-dd3906b3.js');
const focus = require('./focus-7ca42572.js');

const ldTablistShadowCss = ":host{--ld-tablist-max-height:2.5rem;--ld-tablist-padding:0px;--ld-tablist-border-col:var(--ld-col-neutral-100);--ld-tablist-border-height:0.1875rem;--ld-tablist-btn-scroll-col:var(--ld-col-neutral-900);--ld-tablist-btn-scroll-col-active:var(--ld-col-neutral-900);--ld-tablist-btn-scroll-bg-col:var(--ld-col-neutral-010);--ld-tablist-btn-scroll-bg-col-hover:var(--ld-col-neutral-100);--ld-tablist-btn-scroll-bg-col-active:var(--ld-col-neutral-300);--ld-tablist-border-brand-col:var(--ld-thm-primary-hover);--ld-tablist-btn-scroll-bg-brand-col-active:var(--ld-thm-primary-active);--ld-tablist-btn-scroll-bg-brand-col-hover:var(--ld-thm-primary-hover);--ld-tablist-btn-scroll-bg-brand-col:var(--ld-thm-primary);--ld-tab-bg-brand-col-active:var(--ld-thm-primary-active);--ld-tab-bg-brand-col-focus:var(--ld-thm-primary-focus);--ld-tab-bg-brand-col-hover:var(--ld-thm-primary-hover);--ld-tab-bg-brand-col:var(--ld-thm-primary);--ld-tab-text-brand-col-focus:var(--ld-thm-primary-active);--ld-tab-disabled-bg-brand-col-focus:var(--ld-thm-primary-active);--ld-tab-disabled-text-brand-col-focus:var(--ld-thm-primary-focus);--ld-tab-disabled-text-brand-col:var(--ld-thm-primary-focus);--ld-tab-selected-border-brand-col:var(--ld-thm-secondary);--ld-tablist-transition-duration:0s}@media (prefers-reduced-motion:no-preference){:host{--ld-tablist-transition-duration:0.2s}}:host{position:relative}.ld-tablist{background-color:var(--ld-tablist-btn-scroll-bg-col);display:flex;max-height:var(\n    --ld-tablist-max-height\n  );overflow:hidden;padding:var(--ld-tablist-padding);position:relative;z-index:0}.ld-tablist:after{background-color:var(--ld-tablist-border-col);content:\"\";height:var(--ld-tablist-border-height);inset:auto 0 0 0;position:absolute;z-index:2}.ld-tablist--rounded-all{border-radius:var(--ld-br-m)}.ld-tablist--rounded-all-lg{border-radius:var(--ld-br-l)}.ld-tablist--rounded-top{border-radius:var(--ld-br-m) var(--ld-br-m) 0 0}.ld-tablist--rounded-top-lg{border-radius:var(--ld-br-l) var(--ld-br-l) 0 0}.ld-tablist ::slotted(ld-tab){--ld-tab-indicator-height:var(--ld-tablist-border-height)}.ld-tablist--sm{--ld-tablist-max-height:2rem}.ld-tablist--sm ::slotted(ld-tab){--ld-tab-font:var(--ld-typo-body-s);--ld-tab-gap:0.375rem;--ld-tab-min-height:2rem;--ld-tab-padding-x:0.625rem;--ld-tab-padding-y:0.5rem}.ld-tablist--lg{--ld-tablist-max-height:3.125rem}.ld-tablist--lg ::slotted(ld-tab){--ld-tab-font:var(--ld-typo-body-l);--ld-tab-gap:0.875rem;--ld-tab-min-height:3.125rem;--ld-tab-padding-x:1.3125rem;--ld-tab-padding-y:0.75rem}.ld-tablist--ghost{--ld-tablist-btn-scroll-bg-col:#0000}.ld-tablist--ghost ::slotted(ld-tab){--ld-tab-bg-col:#0000}.ld-tablist--brand-color{--ld-tablist-btn-scroll-col-active:var(--ld-col-wht);--ld-tablist-btn-scroll-col:var(--ld-col-wht);--ld-tablist-btn-scroll-bg-col:var(--ld-tablist-btn-scroll-bg-brand-col);--ld-tablist-btn-scroll-bg-col-hover:var(\n      --ld-tablist-btn-scroll-bg-brand-col-hover\n    );--ld-tablist-btn-scroll-bg-col-active:var(\n      --ld-tablist-btn-scroll-bg-brand-col-active\n    );--ld-tablist-border-col:var(--ld-tablist-border-brand-col)}.ld-tablist--brand-color ::slotted(ld-tab){--ld-tab-disabled-opacity:0.5;--ld-tab-disabled-content-opacity:1;--ld-tab-selected-text-col-focus:var(--ld-col-wht);--ld-tab-selected-text-col:var(--ld-col-wht);--ld-tab-text-col:var(--ld-col-wht);--ld-tab-text-col-hover:var(--ld-col-wht);--ld-tab-bg-col:var(--ld-tab-bg-brand-col);--ld-tab-bg-col-focus:var(--ld-tab-bg-brand-col-focus);--ld-tab-bg-col-hover:var(--ld-tab-bg-brand-col-hover);--ld-tab-bg-col-active:var(--ld-tab-bg-brand-col-active);--ld-tab-disabled-bg-col-focus:var(--ld-tab-disabled-bg-brand-col-focus);--ld-tab-disabled-text-col-focus:var(\n        --ld-tab-disabled-text-brand-col-focus\n      );--ld-tab-disabled-text-col:var(--ld-tab-disabled-text-brand-col);--ld-tab-selected-border-col-focus:var(--ld-tab-selected-border-col);--ld-tab-selected-border-col:var(--ld-tab-selected-border-brand-col);--ld-tab-text-col-focus:var(--ld-tab-text-brand-col-focus)}.ld-tablist--floating,.ld-tablist--floating-on-brand-color{--ld-tablist-padding:var(--ld-sp-8) 0;--ld-tab-border-radius:var(--ld-br-m);--ld-tab-selected-border-display:none;--ld-tab-text-col-focus:var(--ld-tab-text-brand-col-focus);border-radius:var(--ld-br-l)}.ld-tablist--floating-on-brand-color:after,.ld-tablist--floating:after{content:none}.ld-tablist--floating .ld-tablist__scroll-container,.ld-tablist--floating-on-brand-color .ld-tablist__scroll-container{gap:var(--ld-sp-8);padding-left:var(--ld-sp-8);padding-right:var(--ld-sp-8);position:relative;scroll-snap-type:none}.ld-tablist--floating ::slotted(ld-tab),.ld-tablist--floating-on-brand-color ::slotted(ld-tab){--ld-tab-selected-text-col-focus:var(--ld-col-wht);--ld-tab-selected-text-col:var(--ld-col-wht);--ld-tab-bg-col:#0000;--ld-tab-bg-col-active:#0000;--ld-tab-bg-col-hover:#0000;--ld-tab-bg-col-focus:#0000;--ld-tab-disabled-bg-col-focus:#0000;--ld-tab-disabled-text-col-focus:var(--ld-col-neutral-700);--ld-tab-selected-bg-col-hover:#0000;--ld-tab-selected-bg-col-active:#0000;--ld-tab-text-col-hover:var(--ld-thm-primary-hover);--ld-tab-text-col-focus:var(--ld-thm-primary-focus)}.ld-tablist--floating-on-brand-color{--ld-tablist-btn-scroll-bg-col:var(--ld-col-wht)}.ld-tablist__scroll-container{display:flex;margin-bottom:-4rem;overflow-x:auto;padding-bottom:4rem;scroll-snap-type:x mandatory}.ld-tablist__btn-scroll{-webkit-touch-callout:none;align-items:center;background-color:var(--ld-tablist-btn-scroll-bg-col);border:0;box-shadow:var(--ld-shadow-active);color:var(--ld-tablist-btn-scroll-col);justify-content:center;position:relative;text-decoration:none;touch-action:manipulation;-webkit-user-select:none;user-select:none;width:var(--ld-sp-32);z-index:2}.ld-tablist__btn-scroll:focus:focus-visible{outline:none}.ld-tablist__btn-scroll[aria-disabled=true] svg{opacity:.25}.ld-tablist__btn-scroll:where(:not([aria-disabled=true])){cursor:pointer}@media (hover:hover){.ld-tablist__btn-scroll:where(:not([aria-disabled=true])):hover{background-color:var(--ld-tablist-btn-scroll-bg-col-hover)}}.ld-tablist__btn-scroll:where(:not([aria-disabled=true])):active:focus,.ld-tablist__btn-scroll:where(:not([aria-disabled=true])):active:focus:focus-visible{background-color:var(--ld-tablist-btn-scroll-bg-col-active);color:var(--ld-tablist-btn-scroll-col-active)}.ld-tablist__btn-scroll--left{left:0}.ld-tablist__btn-scroll--right{right:0}.ld-tablist__active-tab-indicator{background-color:var(--ld-thm-primary);border:2px solid $colorSynBrightBlue;border-radius:var(--ld-br-m);height:var(--ld-tablist-max-height);opacity:0;position:absolute;width:0;will-change:transform,width;z-index:-1}.ld-tablist--initialized .ld-tablist__active-tab-indicator{transition:width var(--ld-tablist-transition-duration) ease,transform var(--ld-tablist-transition-duration) ease,opacity var(--ld-tablist-transition-duration) var(--ld-tablist-transition-duration) linear}.ld-tablist--focus-visible.ld-tablist--selected-focused:focus-within .ld-tablist__active-tab-indicator{background-color:var(--ld-thm-primary-focus)}";

const LdTablist = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.initialized = false;
    this.focusVisible = true;
    this.selectedIsFocused = true;
    this.isFloating = () => ['floating', 'floating-on-brand-color'].includes(this.mode);
    this.onClick = (ev) => {
      if (ev.pointerType === 'mouse') {
        this.focusVisible = false;
      }
    };
    this.onFocusout = (ev) => {
      if (!ev.relatedTarget ||
        ev.relatedTarget.closest('ld-tablist') !== this.el) {
        this.focusVisible = true;
        this.selectedIsFocused = true;
      }
    };
    this.onKeydown = (ev) => {
      switch (ev.key) {
        case 'ArrowLeft':
          ev.preventDefault();
          this.focusVisible = true;
          this.focusTab(ev.target, 'left');
          return;
        case 'ArrowRight': {
          ev.preventDefault();
          this.focusVisible = true;
          this.focusTab(ev.target, 'right');
          return;
        }
        case 'ArrowDown': {
          ev.preventDefault();
          this.focusVisible = true;
          this.setFocusOnSelectedTabpanel();
          return;
        }
      }
    };
    this.handleResize = () => {
      if (this.isFloating()) {
        this.updateSelectedTabIndicator();
      }
      else {
        this.updateScrollable();
        this.updateScrollButtons();
      }
    };
    this.updateSelectedTab = () => {
      this.selectedTab = Array.from(this.el.querySelectorAll('ld-tab')).find((tab) => tab.selected);
    };
  }
  updateScrollable() {
    if (this.isFloating())
      return;
    const scrollButtonsWidth = 2 * this.btnScrollLeftRef.getBoundingClientRect().width;
    const scrollContainerWidth = this.slotContainerRef.getBoundingClientRect().width;
    const contentWidth = Array.from(this.el.children)
      .map((child) => child.getBoundingClientRect().width)
      .reduce((a, b) => a + b);
    this.scrollable =
      scrollContainerWidth + (this.scrollable ? scrollButtonsWidth : 0) <
        contentWidth;
  }
  updateScrollButtons() {
    if (this.isFloating())
      return;
    if (!this.scrollable)
      return;
    this.scrollLeftEnabled = this.slotContainerRef.scrollLeft > 0;
    this.scrollRightEnabled =
      this.slotContainerRef.scrollLeft +
        this.slotContainerRef.getBoundingClientRect().width -
        this.slotContainerRef.scrollWidth <
        0;
  }
  scroll(dir) {
    this.slotContainerRef.scrollTo({
      left: this.slotContainerRef.scrollLeft +
        ((dir === 'left' ? -1 : 1) *
          this.slotContainerRef.getBoundingClientRect().width) /
          2,
      behavior: 'smooth',
    });
  }
  focusTab(prevLdTab, dir) {
    const currentTab = dir === 'left'
      ? prevLdTab.previousElementSibling
      : prevLdTab.nextElementSibling;
    if (focus.isInnerFocusable(currentTab)) {
      currentTab.focusInner();
      currentTab.scrollIntoView({
        behavior: 'smooth',
        block: 'nearest',
        inline: 'center',
      });
      this.selectedIsFocused = currentTab === this.selectedTab;
    }
  }
  setFocusOnSelectedTabpanel() {
    var _a;
    // TODO: fix Stencils DOM implementation for unit testing and replace
    // ;(this.el
    //   .closest('ld-tabs')
    //   .querySelector('ld-tabpanel:not([hidden])') as HTMLElement)?.focus()
    (_a = Array.from(this.el.closest('ld-tabs').querySelectorAll('ld-tabpanel'))
      .find((tabpanel) => !tabpanel.hasAttribute('hidden'))) === null || _a === void 0 ? void 0 : _a.focus();
  }
  handleTabSelect(ev) {
    this.selectedIsFocused = true;
    this.selectedTab = ev.target;
  }
  updateSelectedTabIndicator() {
    if (!this.selectedTabIndicatorRef)
      return;
    const indicatorStyle = this.selectedTabIndicatorRef.style;
    if (!this.selectedTab) {
      // hide indicator
      indicatorStyle.opacity = '0';
      return;
    }
    const bcr = this.selectedTab.getBoundingClientRect();
    const offsetLeft = this.selectedTab.offsetLeft;
    indicatorStyle.transform = `translateX(${offsetLeft - 8}px)`;
    indicatorStyle.width = `${bcr.width}px`;
    indicatorStyle.opacity = '1';
  }
  updateIconSize() {
    this.el.querySelectorAll('ld-icon').forEach((icon) => {
      if (this.size !== undefined) {
        icon.size = this.size;
      }
      else {
        icon.size = undefined;
      }
    });
    this.el.querySelectorAll('.ld-icon').forEach((icon) => {
      if (this.size === 'sm') {
        icon.classList.remove('ld-icon--lg');
        icon.classList.add('ld-icon--sm');
      }
      else if (this.size === 'lg') {
        icon.classList.remove('ld-icon--sm');
        icon.classList.add('ld-icon--lg');
      }
      else {
        icon.classList.remove('ld-icon--sm', 'ld-icon--lg');
      }
    });
  }
  componentWillLoad() {
    // Attribute selector fails in test env, hance filtering with js below.
    this.selectedTab = Array.from(this.el.querySelectorAll('ld-tab')).find((tab) => tab.selected);
    this.updateIconSize();
    this.mutationObserver = new MutationObserver(this.updateSelectedTab);
    this.mutationObserver.observe(this.el, {
      subtree: true,
      childList: true,
      attributes: false,
    });
  }
  componentDidLoad() {
    setTimeout(() => {
      this.updateScrollable();
      this.updateScrollButtons();
      this.initialized = true;
    });
    this.resizeObserver = new ResizeObserver(this.handleResize);
    this.resizeObserver.observe(this.slotContainerRef);
  }
  disconnectedCallback() {
    var _a, _b;
    /* istanbul ignore next */
    (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.unobserve(this.slotContainerRef);
    /* istanbul ignore next */
    (_b = this.mutationObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
  }
  render() {
    return (index.h(index.Host, { onClick: this.onClick, onKeydown: this.onKeydown, onFocusout: this.onFocusout, role: "tablist" }, index.h("div", { class: getClassNames.getClassNames([
        'ld-tablist',
        this.initialized && 'ld-tablist--initialized',
        this.focusVisible && 'ld-tablist--focus-visible',
        this.selectedIsFocused && 'ld-tablist--selected-focused',
        this.size && `ld-tablist--${this.size}`,
        this.mode && `ld-tablist--${this.mode}`,
        this.rounded && `ld-tablist--rounded-${this.rounded}`,
      ]), part: "wrapper" }, !this.isFloating() && (index.h("button", { "aria-disabled": this.scrollLeftEnabled ? undefined : 'true', class: "ld-tablist__btn-scroll ld-tablist__btn-scroll--left", hidden: !this.scrollable, onClick: this.scroll.bind(this, 'left'), part: "arrow arrow-left", ref: (el) => (this.btnScrollLeftRef = el), tabindex: "-1" }, index.h("svg", { fill: "none", height: "16", part: "arrow-icon arrow-icon-left", viewBox: "0 0 16 16", width: "16" }, index.h("title", null, "Scroll left"), index.h("path", { d: "M10 13L6 8L10 3", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round" })))), index.h("div", { class: "ld-tablist__scroll-container", onScroll: this.updateScrollButtons.bind(this), part: "scroll-container", ref: (el) => (this.slotContainerRef = el) }, index.h("slot", null), this.isFloating() && (index.h("div", { part: "active-tab-indicator", class: "ld-tablist__active-tab-indicator", ref: (el) => (this.selectedTabIndicatorRef = el) }))), !this.isFloating() && (index.h("button", { "aria-disabled": this.scrollRightEnabled ? undefined : 'true', class: "ld-tablist__btn-scroll ld-tablist__btn-scroll--right", hidden: !this.scrollable, onClick: this.scroll.bind(this, 'right'), part: "arrow arrow-right", tabindex: "-1" }, index.h("svg", { fill: "none", height: "16", part: "arrow-icon arrow-icon-right", viewBox: "0 0 16 16", width: "16" }, index.h("title", null, "Scroll right"), index.h("path", { d: "M6 13L10 8L6 3", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round" })))))));
  }
  get el() { return index.getElement(this); }
  static get watchers() { return {
    "selectedTab": ["updateSelectedTabIndicator"],
    "size": ["updateIconSize"]
  }; }
};
LdTablist.style = ldTablistShadowCss;

exports.ld_tablist = LdTablist;

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-9117e53d.js');

const ldTabsShadowCss = "";

let tabsCount = 0;
const LdTabs = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.ldtabchange = index.createEvent(this, "ldtabchange", 7);
    this.idDescriber = `ld-tabs-${tabsCount++}`;
    this.handleLdtabselect = (ev) => {
      ev.stopImmediatePropagation();
      const currentLdTab = ev.target;
      this.updateTabs(currentLdTab);
      this.updateTabPanels(currentLdTab.id);
      this.ldtabchange.emit(currentLdTab.id);
    };
  }
  updateTabs(currentLdTab) {
    var _a;
    // TODO: fix Stencils DOM implementation for unit testing and replace
    // this.el.querySelector('[selected]')?.removeAttribute('selected')
    (_a = Array.from(this.el.querySelectorAll('ld-tab'))
      .find((tab) => tab.hasAttribute('selected'))) === null || _a === void 0 ? void 0 : _a.removeAttribute('selected');
    currentLdTab.scrollIntoView({
      behavior: 'smooth',
      block: 'nearest',
      inline: 'center',
    });
  }
  updateTabPanels(tabId) {
    var _a, _b;
    // TODO: fix Stencils DOM implementation for unit testing and replace
    const tabPanels = Array.from(this.el.querySelectorAll('ld-tabpanel'));
    // this.el.querySelector('ld-tabpanel:not([hidden])')
    (_a = tabPanels
      .find((tabpanel) => !tabpanel.hasAttribute('hidden'))) === null || _a === void 0 ? void 0 : _a.setAttribute('hidden', undefined);
    // this.el.querySelector(`[aria-labelledby="${tabId}"]`)
    (_b = tabPanels
      .find((tabpanel) => tabpanel.getAttribute('aria-labelledby') === tabId)) === null || _b === void 0 ? void 0 : _b.removeAttribute('hidden');
  }
  /** Set selected tab to a certain index */
  async switchTab(identifier) {
    const newActiveTab = typeof identifier === 'number'
      ? this.el.querySelectorAll('ld-tab')[identifier]
      : this.el.querySelector(`ld-tab#${identifier}`);
    if (!newActiveTab) {
      throw new Error(`Could not find ld-tab with ${typeof identifier === 'number' ? 'index' : 'id'} ${typeof identifier === 'number' ? identifier : `"${identifier}"`}.`);
    }
    newActiveTab.select();
  }
  componentDidRender() {
    // Assign ids to tabs and use them in aria-describedby attributes of the corresponding tabpanels.
    // Memorize the index of the selected tab in order to hide all non-selected tabpanels.
    let selectedIndex;
    this.el.querySelectorAll('ld-tab').forEach((tab, index) => {
      tab.id = `${this.idDescriber}-tab-${index}`;
      if (tab.selected) {
        selectedIndex = index;
      }
    });
    this.el.querySelectorAll('ld-tabpanel').forEach((tabpanel, index) => {
      tabpanel.setAttribute('aria-labelledby', `${this.idDescriber}-tab-${index}`);
      if (selectedIndex === index) {
        tabpanel.removeAttribute('hidden');
      }
      else {
        tabpanel.setAttribute('hidden', 'true');
      }
    });
  }
  render() {
    return (index.h(index.Host, { onLdtabselect: this.handleLdtabselect, class: "ld-tabs" }, index.h("slot", null)));
  }
  get el() { return index.getElement(this); }
};
LdTabs.style = ldTabsShadowCss;

exports.ld_tabs = LdTabs;
